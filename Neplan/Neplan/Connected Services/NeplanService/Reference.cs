//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neplan_coordinacion.NeplanService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalProject", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class ExternalProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AngleXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalcNameIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordinateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreateAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiagramIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DirectionUpYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FactorXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GraphicLayerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ImportWithGraphicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNeplanExampleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LayerMinXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LayerMinYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayerUnitXYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibrarySubnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumDiagramField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumGraphicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SridIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubAreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariantIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMaxXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMaxYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMinXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WorldCoordMinYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AngleXY {
            get {
                return this.AngleXYField;
            }
            set {
                if ((this.AngleXYField.Equals(value) != true)) {
                    this.AngleXYField = value;
                    this.RaisePropertyChanged("AngleXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaID {
            get {
                return this.AreaIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaIDField, value) != true)) {
                    this.AreaIDField = value;
                    this.RaisePropertyChanged("AreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalcNameID {
            get {
                return this.CalcNameIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CalcNameIDField, value) != true)) {
                    this.CalcNameIDField = value;
                    this.RaisePropertyChanged("CalcNameID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordinateUnits {
            get {
                return this.CoordinateUnitsField;
            }
            set {
                if ((this.CoordinateUnitsField.Equals(value) != true)) {
                    this.CoordinateUnitsField = value;
                    this.RaisePropertyChanged("CoordinateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateAt {
            get {
                return this.CreateAtField;
            }
            set {
                if ((this.CreateAtField.Equals(value) != true)) {
                    this.CreateAtField = value;
                    this.RaisePropertyChanged("CreateAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiagramID {
            get {
                return this.DiagramIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagramIDField, value) != true)) {
                    this.DiagramIDField = value;
                    this.RaisePropertyChanged("DiagramID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DirectionUpY {
            get {
                return this.DirectionUpYField;
            }
            set {
                if ((this.DirectionUpYField.Equals(value) != true)) {
                    this.DirectionUpYField = value;
                    this.RaisePropertyChanged("DirectionUpY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FactorXY {
            get {
                return this.FactorXYField;
            }
            set {
                if ((this.FactorXYField.Equals(value) != true)) {
                    this.FactorXYField = value;
                    this.RaisePropertyChanged("FactorXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderPath {
            get {
                return this.FolderPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderPathField, value) != true)) {
                    this.FolderPathField = value;
                    this.RaisePropertyChanged("FolderPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GraphicLayerID {
            get {
                return this.GraphicLayerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GraphicLayerIDField, value) != true)) {
                    this.GraphicLayerIDField = value;
                    this.RaisePropertyChanged("GraphicLayerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIDField, value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ImportWithGraphic {
            get {
                return this.ImportWithGraphicField;
            }
            set {
                if ((this.ImportWithGraphicField.Equals(value) != true)) {
                    this.ImportWithGraphicField = value;
                    this.RaisePropertyChanged("ImportWithGraphic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNeplanExample {
            get {
                return this.IsNeplanExampleField;
            }
            set {
                if ((this.IsNeplanExampleField.Equals(value) != true)) {
                    this.IsNeplanExampleField = value;
                    this.RaisePropertyChanged("IsNeplanExample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinX {
            get {
                return this.LayerMinXField;
            }
            set {
                if ((this.LayerMinXField.Equals(value) != true)) {
                    this.LayerMinXField = value;
                    this.RaisePropertyChanged("LayerMinX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LayerMinY {
            get {
                return this.LayerMinYField;
            }
            set {
                if ((this.LayerMinYField.Equals(value) != true)) {
                    this.LayerMinYField = value;
                    this.RaisePropertyChanged("LayerMinY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LayerUnitXY {
            get {
                return this.LayerUnitXYField;
            }
            set {
                if ((this.LayerUnitXYField.Equals(value) != true)) {
                    this.LayerUnitXYField = value;
                    this.RaisePropertyChanged("LayerUnitXY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibrarySubname {
            get {
                return this.LibrarySubnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibrarySubnameField, value) != true)) {
                    this.LibrarySubnameField = value;
                    this.RaisePropertyChanged("LibrarySubname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName {
            get {
                return this.LogNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogNameField, value) != true)) {
                    this.LogNameField = value;
                    this.RaisePropertyChanged("LogName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedAt {
            get {
                return this.ModifiedAtField;
            }
            set {
                if ((this.ModifiedAtField.Equals(value) != true)) {
                    this.ModifiedAtField = value;
                    this.RaisePropertyChanged("ModifiedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumDiagram {
            get {
                return this.NumDiagramField;
            }
            set {
                if ((this.NumDiagramField.Equals(value) != true)) {
                    this.NumDiagramField = value;
                    this.RaisePropertyChanged("NumDiagram");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumGraphic {
            get {
                return this.NumGraphicField;
            }
            set {
                if ((this.NumGraphicField.Equals(value) != true)) {
                    this.NumGraphicField = value;
                    this.RaisePropertyChanged("NumGraphic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIDField, value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnCode {
            get {
                return this.ReturnCodeField;
            }
            set {
                if ((this.ReturnCodeField.Equals(value) != true)) {
                    this.ReturnCodeField = value;
                    this.RaisePropertyChanged("ReturnCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SridID {
            get {
                return this.SridIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SridIDField, value) != true)) {
                    this.SridIDField = value;
                    this.RaisePropertyChanged("SridID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaID {
            get {
                return this.SubAreaIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SubAreaIDField, value) != true)) {
                    this.SubAreaIDField = value;
                    this.RaisePropertyChanged("SubAreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariantID {
            get {
                return this.VariantIDField;
            }
            set {
                if ((object.ReferenceEquals(this.VariantIDField, value) != true)) {
                    this.VariantIDField = value;
                    this.RaisePropertyChanged("VariantID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxX {
            get {
                return this.WorldCoordMaxXField;
            }
            set {
                if ((this.WorldCoordMaxXField.Equals(value) != true)) {
                    this.WorldCoordMaxXField = value;
                    this.RaisePropertyChanged("WorldCoordMaxX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMaxY {
            get {
                return this.WorldCoordMaxYField;
            }
            set {
                if ((this.WorldCoordMaxYField.Equals(value) != true)) {
                    this.WorldCoordMaxYField = value;
                    this.RaisePropertyChanged("WorldCoordMaxY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinX {
            get {
                return this.WorldCoordMinXField;
            }
            set {
                if ((this.WorldCoordMinXField.Equals(value) != true)) {
                    this.WorldCoordMinXField = value;
                    this.RaisePropertyChanged("WorldCoordMinX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WorldCoordMinY {
            get {
                return this.WorldCoordMinYField;
            }
            set {
                if ((this.WorldCoordMinYField.Equals(value) != true)) {
                    this.WorldCoordMinYField = value;
                    this.RaisePropertyChanged("WorldCoordMinY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneID {
            get {
                return this.ZoneIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneIDField, value) != true)) {
                    this.ZoneIDField = value;
                    this.RaisePropertyChanged("ZoneID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.ElementResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceElementResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SimulationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLdataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short portNrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SimulationTime {
            get {
                return this.SimulationTimeField;
            }
            set {
                if ((this.SimulationTimeField.Equals(value) != true)) {
                    this.SimulationTimeField = value;
                    this.RaisePropertyChanged("SimulationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLdata {
            get {
                return this.XMLdataField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLdataField, value) != true)) {
                    this.XMLdataField = value;
                    this.RaisePropertyChanged("XMLdata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short portNr {
            get {
                return this.portNrField;
            }
            set {
                if ((this.portNrField.Equals(value) != true)) {
                    this.portNrField = value;
                    this.RaisePropertyChanged("portNr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisParameterSettings", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class AnalysisParameterSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AnschlKnIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CalcOnlyLoadedDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DoRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> EleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeElementsInMaintField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeElementsInstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeOutOfOperElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeProjectedElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExclutionDateForInstalledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExclutionDateForOutOfOperField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] FaultTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FaultsOnBusbarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] FixedNodeForPartNetwIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeBoundaryElementsInCalculationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IndividualSettingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemTypeNameForRecondResizingFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemlibNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemlibSubNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibItemTypeNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibSubNameForRecondResizingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfRelayIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfSelectedFeederIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfSelectedPartNetwIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ListOfShortCircuitLocationIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MediumTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NCalcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] NetworkSelectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> RelayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectedLimitConfigurationForCalculationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SelectedRecondResizElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SelectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ToleranceTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseDefaultInputValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseLimitConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UsePointInTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WriteCalculationLogFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AnschlKnID {
            get {
                return this.AnschlKnIDField;
            }
            set {
                if ((this.AnschlKnIDField.Equals(value) != true)) {
                    this.AnschlKnIDField = value;
                    this.RaisePropertyChanged("AnschlKnID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CalcOnlyLoadedData {
            get {
                return this.CalcOnlyLoadedDataField;
            }
            set {
                if ((this.CalcOnlyLoadedDataField.Equals(value) != true)) {
                    this.CalcOnlyLoadedDataField = value;
                    this.RaisePropertyChanged("CalcOnlyLoadedData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculationDate {
            get {
                return this.CalculationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculationDateField, value) != true)) {
                    this.CalculationDateField = value;
                    this.RaisePropertyChanged("CalculationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML {
            get {
                return this.ConXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.ConXMLField, value) != true)) {
                    this.ConXMLField = value;
                    this.RaisePropertyChanged("ConXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoRecondResizing {
            get {
                return this.DoRecondResizingField;
            }
            set {
                if ((this.DoRecondResizingField.Equals(value) != true)) {
                    this.DoRecondResizingField = value;
                    this.RaisePropertyChanged("DoRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> EleID {
            get {
                return this.EleIDField;
            }
            set {
                if ((this.EleIDField.Equals(value) != true)) {
                    this.EleIDField = value;
                    this.RaisePropertyChanged("EleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInMaint {
            get {
                return this.ExcludeElementsInMaintField;
            }
            set {
                if ((this.ExcludeElementsInMaintField.Equals(value) != true)) {
                    this.ExcludeElementsInMaintField = value;
                    this.RaisePropertyChanged("ExcludeElementsInMaint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeElementsInstalled {
            get {
                return this.ExcludeElementsInstalledField;
            }
            set {
                if ((this.ExcludeElementsInstalledField.Equals(value) != true)) {
                    this.ExcludeElementsInstalledField = value;
                    this.RaisePropertyChanged("ExcludeElementsInstalled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeOutOfOperElements {
            get {
                return this.ExcludeOutOfOperElementsField;
            }
            set {
                if ((this.ExcludeOutOfOperElementsField.Equals(value) != true)) {
                    this.ExcludeOutOfOperElementsField = value;
                    this.RaisePropertyChanged("ExcludeOutOfOperElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeProjectedElements {
            get {
                return this.ExcludeProjectedElementsField;
            }
            set {
                if ((this.ExcludeProjectedElementsField.Equals(value) != true)) {
                    this.ExcludeProjectedElementsField = value;
                    this.RaisePropertyChanged("ExcludeProjectedElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForInstalled {
            get {
                return this.ExclutionDateForInstalledField;
            }
            set {
                if ((object.ReferenceEquals(this.ExclutionDateForInstalledField, value) != true)) {
                    this.ExclutionDateForInstalledField = value;
                    this.RaisePropertyChanged("ExclutionDateForInstalled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExclutionDateForOutOfOper {
            get {
                return this.ExclutionDateForOutOfOperField;
            }
            set {
                if ((object.ReferenceEquals(this.ExclutionDateForOutOfOperField, value) != true)) {
                    this.ExclutionDateForOutOfOperField = value;
                    this.RaisePropertyChanged("ExclutionDateForOutOfOper");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] FaultTypes {
            get {
                return this.FaultTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultTypesField, value) != true)) {
                    this.FaultTypesField = value;
                    this.RaisePropertyChanged("FaultTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FaultsOnBusbar {
            get {
                return this.FaultsOnBusbarField;
            }
            set {
                if ((this.FaultsOnBusbarField.Equals(value) != true)) {
                    this.FaultsOnBusbarField = value;
                    this.RaisePropertyChanged("FaultsOnBusbar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FixedNodeForPartNetwIDs {
            get {
                return this.FixedNodeForPartNetwIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.FixedNodeForPartNetwIDsField, value) != true)) {
                    this.FixedNodeForPartNetwIDsField = value;
                    this.RaisePropertyChanged("FixedNodeForPartNetwIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeBoundaryElementsInCalculation {
            get {
                return this.IncludeBoundaryElementsInCalculationField;
            }
            set {
                if ((this.IncludeBoundaryElementsInCalculationField.Equals(value) != true)) {
                    this.IncludeBoundaryElementsInCalculationField = value;
                    this.RaisePropertyChanged("IncludeBoundaryElementsInCalculation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndividualSetting {
            get {
                return this.IndividualSettingField;
            }
            set {
                if ((this.IndividualSettingField.Equals(value) != true)) {
                    this.IndividualSettingField = value;
                    this.RaisePropertyChanged("IndividualSetting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemTypeNameForRecondResizingField {
            get {
                return this.ItemTypeNameForRecondResizingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypeNameForRecondResizingFieldField, value) != true)) {
                    this.ItemTypeNameForRecondResizingFieldField = value;
                    this.RaisePropertyChanged("ItemTypeNameForRecondResizingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibNameForRecondResizing {
            get {
                return this.ItemlibNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemlibNameForRecondResizingField, value) != true)) {
                    this.ItemlibNameForRecondResizingField = value;
                    this.RaisePropertyChanged("ItemlibNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemlibSubNameForRecondResizing {
            get {
                return this.ItemlibSubNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemlibSubNameForRecondResizingField, value) != true)) {
                    this.ItemlibSubNameForRecondResizingField = value;
                    this.RaisePropertyChanged("ItemlibSubNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibItemTypeNameForRecondResizing {
            get {
                return this.LibItemTypeNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibItemTypeNameForRecondResizingField, value) != true)) {
                    this.LibItemTypeNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibItemTypeNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibNameForRecondResizing {
            get {
                return this.LibNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibNameForRecondResizingField, value) != true)) {
                    this.LibNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibSubNameForRecondResizing {
            get {
                return this.LibSubNameForRecondResizingField;
            }
            set {
                if ((object.ReferenceEquals(this.LibSubNameForRecondResizingField, value) != true)) {
                    this.LibSubNameForRecondResizingField = value;
                    this.RaisePropertyChanged("LibSubNameForRecondResizing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfRelayIDs {
            get {
                return this.ListOfRelayIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfRelayIDsField, value) != true)) {
                    this.ListOfRelayIDsField = value;
                    this.RaisePropertyChanged("ListOfRelayIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedFeederIDs {
            get {
                return this.ListOfSelectedFeederIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfSelectedFeederIDsField, value) != true)) {
                    this.ListOfSelectedFeederIDsField = value;
                    this.RaisePropertyChanged("ListOfSelectedFeederIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfSelectedPartNetwIDs {
            get {
                return this.ListOfSelectedPartNetwIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfSelectedPartNetwIDsField, value) != true)) {
                    this.ListOfSelectedPartNetwIDsField = value;
                    this.RaisePropertyChanged("ListOfSelectedPartNetwIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ListOfShortCircuitLocationIDs {
            get {
                return this.ListOfShortCircuitLocationIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfShortCircuitLocationIDsField, value) != true)) {
                    this.ListOfShortCircuitLocationIDsField = value;
                    this.RaisePropertyChanged("ListOfShortCircuitLocationIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogName {
            get {
                return this.LogNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogNameField, value) != true)) {
                    this.LogNameField = value;
                    this.RaisePropertyChanged("LogName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediumType {
            get {
                return this.MediumTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MediumTypeField, value) != true)) {
                    this.MediumTypeField = value;
                    this.RaisePropertyChanged("MediumType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NCalc {
            get {
                return this.NCalcField;
            }
            set {
                if ((this.NCalcField.Equals(value) != true)) {
                    this.NCalcField = value;
                    this.RaisePropertyChanged("NCalc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] NetworkSelection {
            get {
                return this.NetworkSelectionField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkSelectionField, value) != true)) {
                    this.NetworkSelectionField = value;
                    this.RaisePropertyChanged("NetworkSelection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RelayID {
            get {
                return this.RelayIDField;
            }
            set {
                if ((this.RelayIDField.Equals(value) != true)) {
                    this.RelayIDField = value;
                    this.RaisePropertyChanged("RelayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanDistance {
            get {
                return this.ScanDistanceField;
            }
            set {
                if ((this.ScanDistanceField.Equals(value) != true)) {
                    this.ScanDistanceField = value;
                    this.RaisePropertyChanged("ScanDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedLimitConfigurationForCalculation {
            get {
                return this.SelectedLimitConfigurationForCalculationField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedLimitConfigurationForCalculationField, value) != true)) {
                    this.SelectedLimitConfigurationForCalculationField = value;
                    this.RaisePropertyChanged("SelectedLimitConfigurationForCalculation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SelectedRecondResizElements {
            get {
                return this.SelectedRecondResizElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedRecondResizElementsField, value) != true)) {
                    this.SelectedRecondResizElementsField = value;
                    this.RaisePropertyChanged("SelectedRecondResizElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectionType {
            get {
                return this.SelectionTypeField;
            }
            set {
                if ((this.SelectionTypeField.Equals(value) != true)) {
                    this.SelectionTypeField = value;
                    this.RaisePropertyChanged("SelectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ToleranceTime {
            get {
                return this.ToleranceTimeField;
            }
            set {
                if ((this.ToleranceTimeField.Equals(value) != true)) {
                    this.ToleranceTimeField = value;
                    this.RaisePropertyChanged("ToleranceTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseDefaultInputValues {
            get {
                return this.UseDefaultInputValuesField;
            }
            set {
                if ((this.UseDefaultInputValuesField.Equals(value) != true)) {
                    this.UseDefaultInputValuesField = value;
                    this.RaisePropertyChanged("UseDefaultInputValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseLimitConfiguration {
            get {
                return this.UseLimitConfigurationField;
            }
            set {
                if ((this.UseLimitConfigurationField.Equals(value) != true)) {
                    this.UseLimitConfigurationField = value;
                    this.RaisePropertyChanged("UseLimitConfiguration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UsePointInTime {
            get {
                return this.UsePointInTimeField;
            }
            set {
                if ((this.UsePointInTimeField.Equals(value) != true)) {
                    this.UsePointInTimeField = value;
                    this.RaisePropertyChanged("UsePointInTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WriteCalculationLogFile {
            get {
                return this.WriteCalculationLogFileField;
            }
            set {
                if ((this.WriteCalculationLogFileField.Equals(value) != true)) {
                    this.WriteCalculationLogFileField = value;
                    this.RaisePropertyChanged("WriteCalculationLogFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class AnalysisReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdjustedLoadsFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnalysisIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnalysisModuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomaticSettingsResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ConnectionCheckSummaryResult ConnectionCheckResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FaultClearedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.FaultScanningResult[] FaultScanningResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasConvergedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogFilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NetworkReductionXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalDataNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RelayDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFile2ButtonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFile2NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RunAnalysisWithoutSavingToDBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.AnalysisReturnInfo.RelayResultData[] SelectivityChartResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdjustedLoadsFileName {
            get {
                return this.AdjustedLoadsFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjustedLoadsFileNameField, value) != true)) {
                    this.AdjustedLoadsFileNameField = value;
                    this.RaisePropertyChanged("AdjustedLoadsFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisID {
            get {
                return this.AnalysisIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalysisIDField, value) != true)) {
                    this.AnalysisIDField = value;
                    this.RaisePropertyChanged("AnalysisID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AnalysisModule {
            get {
                return this.AnalysisModuleField;
            }
            set {
                if ((object.ReferenceEquals(this.AnalysisModuleField, value) != true)) {
                    this.AnalysisModuleField = value;
                    this.RaisePropertyChanged("AnalysisModule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomaticSettingsResult {
            get {
                return this.AutomaticSettingsResultField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomaticSettingsResultField, value) != true)) {
                    this.AutomaticSettingsResultField = value;
                    this.RaisePropertyChanged("AutomaticSettingsResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo.CableSizingLineData[] CableSizingLineDataResult {
            get {
                return this.CableSizingLineDataResultField;
            }
            set {
                if ((object.ReferenceEquals(this.CableSizingLineDataResultField, value) != true)) {
                    this.CableSizingLineDataResultField = value;
                    this.RaisePropertyChanged("CableSizingLineDataResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConXML {
            get {
                return this.ConXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.ConXMLField, value) != true)) {
                    this.ConXMLField = value;
                    this.RaisePropertyChanged("ConXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ConnectionCheckSummaryResult ConnectionCheckResult {
            get {
                return this.ConnectionCheckResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionCheckResultField, value) != true)) {
                    this.ConnectionCheckResultField = value;
                    this.RaisePropertyChanged("ConnectionCheckResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectoryName {
            get {
                return this.DirectoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryNameField, value) != true)) {
                    this.DirectoryNameField = value;
                    this.RaisePropertyChanged("DirectoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FaultCleared {
            get {
                return this.FaultClearedField;
            }
            set {
                if ((this.FaultClearedField.Equals(value) != true)) {
                    this.FaultClearedField = value;
                    this.RaisePropertyChanged("FaultCleared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.FaultScanningResult[] FaultScanningResults {
            get {
                return this.FaultScanningResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultScanningResultsField, value) != true)) {
                    this.FaultScanningResultsField = value;
                    this.RaisePropertyChanged("FaultScanningResults");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasConverged {
            get {
                return this.HasConvergedField;
            }
            set {
                if ((this.HasConvergedField.Equals(value) != true)) {
                    this.HasConvergedField = value;
                    this.RaisePropertyChanged("HasConverged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogFilename {
            get {
                return this.LogFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogFilenameField, value) != true)) {
                    this.LogFilenameField = value;
                    this.RaisePropertyChanged("LogFilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetworkReductionXML {
            get {
                return this.NetworkReductionXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkReductionXMLField, value) != true)) {
                    this.NetworkReductionXMLField = value;
                    this.RaisePropertyChanged("NetworkReductionXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalDataName {
            get {
                return this.OperationalDataNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalDataNameField, value) != true)) {
                    this.OperationalDataNameField = value;
                    this.RaisePropertyChanged("OperationalDataName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RelayData {
            get {
                return this.RelayDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RelayDataField, value) != true)) {
                    this.RelayDataField = value;
                    this.RaisePropertyChanged("RelayData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2ButtonName {
            get {
                return this.ResultFile2ButtonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFile2ButtonNameField, value) != true)) {
                    this.ResultFile2ButtonNameField = value;
                    this.RaisePropertyChanged("ResultFile2ButtonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFile2Name {
            get {
                return this.ResultFile2NameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFile2NameField, value) != true)) {
                    this.ResultFile2NameField = value;
                    this.RaisePropertyChanged("ResultFile2Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFilename {
            get {
                return this.ResultFilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFilenameField, value) != true)) {
                    this.ResultFilenameField = value;
                    this.RaisePropertyChanged("ResultFilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultFolder {
            get {
                return this.ResultFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultFolderField, value) != true)) {
                    this.ResultFolderField = value;
                    this.RaisePropertyChanged("ResultFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnInfo {
            get {
                return this.ReturnInfoField;
            }
            set {
                if ((this.ReturnInfoField.Equals(value) != true)) {
                    this.ReturnInfoField = value;
                    this.RaisePropertyChanged("ReturnInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunAnalysisWithoutSavingToDB {
            get {
                return this.RunAnalysisWithoutSavingToDBField;
            }
            set {
                if ((this.RunAnalysisWithoutSavingToDBField.Equals(value) != true)) {
                    this.RunAnalysisWithoutSavingToDBField = value;
                    this.RaisePropertyChanged("RunAnalysisWithoutSavingToDB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo.RelayResultData[] SelectivityChartResults {
            get {
                return this.SelectivityChartResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectivityChartResultsField, value) != true)) {
                    this.SelectivityChartResultsField = value;
                    this.RaisePropertyChanged("SelectivityChartResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo.CableSizingLineData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        [System.SerializableAttribute()]
        public partial class CableSizingLineData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private byte[] BinaryDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string LibTypeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid LineIDField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public byte[] BinaryData {
                get {
                    return this.BinaryDataField;
                }
                set {
                    if ((object.ReferenceEquals(this.BinaryDataField, value) != true)) {
                        this.BinaryDataField = value;
                        this.RaisePropertyChanged("BinaryData");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string LibType {
                get {
                    return this.LibTypeField;
                }
                set {
                    if ((object.ReferenceEquals(this.LibTypeField, value) != true)) {
                        this.LibTypeField = value;
                        this.RaisePropertyChanged("LibType");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid LineID {
                get {
                    return this.LineIDField;
                }
                set {
                    if ((this.LineIDField.Equals(value) != true)) {
                        this.LineIDField = value;
                        this.RaisePropertyChanged("LineID");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReturnInfo.RelayResultData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
        [System.SerializableAttribute()]
        public partial class RelayResultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid ElementIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double FactorField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid FaultedNodeIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double IField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double IangField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double RField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid RelayIdField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double TripTimeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string TypeSCField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double UField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double UnField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double XField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double ZField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private double ZangField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid ElementId {
                get {
                    return this.ElementIdField;
                }
                set {
                    if ((this.ElementIdField.Equals(value) != true)) {
                        this.ElementIdField = value;
                        this.RaisePropertyChanged("ElementId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Factor {
                get {
                    return this.FactorField;
                }
                set {
                    if ((this.FactorField.Equals(value) != true)) {
                        this.FactorField = value;
                        this.RaisePropertyChanged("Factor");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid FaultedNodeId {
                get {
                    return this.FaultedNodeIdField;
                }
                set {
                    if ((this.FaultedNodeIdField.Equals(value) != true)) {
                        this.FaultedNodeIdField = value;
                        this.RaisePropertyChanged("FaultedNodeId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double I {
                get {
                    return this.IField;
                }
                set {
                    if ((this.IField.Equals(value) != true)) {
                        this.IField = value;
                        this.RaisePropertyChanged("I");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Iang {
                get {
                    return this.IangField;
                }
                set {
                    if ((this.IangField.Equals(value) != true)) {
                        this.IangField = value;
                        this.RaisePropertyChanged("Iang");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double R {
                get {
                    return this.RField;
                }
                set {
                    if ((this.RField.Equals(value) != true)) {
                        this.RField = value;
                        this.RaisePropertyChanged("R");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid RelayId {
                get {
                    return this.RelayIdField;
                }
                set {
                    if ((this.RelayIdField.Equals(value) != true)) {
                        this.RelayIdField = value;
                        this.RaisePropertyChanged("RelayId");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double TripTime {
                get {
                    return this.TripTimeField;
                }
                set {
                    if ((this.TripTimeField.Equals(value) != true)) {
                        this.TripTimeField = value;
                        this.RaisePropertyChanged("TripTime");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string TypeSC {
                get {
                    return this.TypeSCField;
                }
                set {
                    if ((object.ReferenceEquals(this.TypeSCField, value) != true)) {
                        this.TypeSCField = value;
                        this.RaisePropertyChanged("TypeSC");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double U {
                get {
                    return this.UField;
                }
                set {
                    if ((this.UField.Equals(value) != true)) {
                        this.UField = value;
                        this.RaisePropertyChanged("U");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Un {
                get {
                    return this.UnField;
                }
                set {
                    if ((this.UnField.Equals(value) != true)) {
                        this.UnField = value;
                        this.RaisePropertyChanged("Un");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double X {
                get {
                    return this.XField;
                }
                set {
                    if ((this.XField.Equals(value) != true)) {
                        this.XField = value;
                        this.RaisePropertyChanged("X");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Z {
                get {
                    return this.ZField;
                }
                set {
                    if ((this.ZField.Equals(value) != true)) {
                        this.ZField = value;
                        this.RaisePropertyChanged("Z");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public double Zang {
                get {
                    return this.ZangField;
                }
                set {
                    if ((this.ZangField.Equals(value) != true)) {
                        this.ZangField = value;
                        this.RaisePropertyChanged("Zang");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionCheckSummaryResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.Result")]
    [System.SerializableAttribute()]
    public partial class ConnectionCheckSummaryResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedDachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedLoadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedNewLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedNewNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedUmaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ApprovedUminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalcMaxVoltageChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ConnectionPointDeltaUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ConnectionPointUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ConnectionPointUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaLoadingMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaLossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaUconnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaUmaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighestLoadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighestUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighestUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LineHighestLoadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LineHighestLoadingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LossesTransformerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowestUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowestUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxAllowedPowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxAllowedPowerRedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxAllowedPowerYellowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewLineCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewLineCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewLineLoadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewNodeUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewNodeUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeHighestUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid NodeHighestUpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeLowestUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid NodeLowestUpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RelativeVoltageRiseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RunDachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RunLfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RunMaxPowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZSk2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZbetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZwinkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedDach {
            get {
                return this.ApprovedDachField;
            }
            set {
                if ((this.ApprovedDachField.Equals(value) != true)) {
                    this.ApprovedDachField = value;
                    this.RaisePropertyChanged("ApprovedDach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedLoading {
            get {
                return this.ApprovedLoadingField;
            }
            set {
                if ((this.ApprovedLoadingField.Equals(value) != true)) {
                    this.ApprovedLoadingField = value;
                    this.RaisePropertyChanged("ApprovedLoading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedNewLine {
            get {
                return this.ApprovedNewLineField;
            }
            set {
                if ((this.ApprovedNewLineField.Equals(value) != true)) {
                    this.ApprovedNewLineField = value;
                    this.RaisePropertyChanged("ApprovedNewLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedNewNode {
            get {
                return this.ApprovedNewNodeField;
            }
            set {
                if ((this.ApprovedNewNodeField.Equals(value) != true)) {
                    this.ApprovedNewNodeField = value;
                    this.RaisePropertyChanged("ApprovedNewNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedUmax {
            get {
                return this.ApprovedUmaxField;
            }
            set {
                if ((this.ApprovedUmaxField.Equals(value) != true)) {
                    this.ApprovedUmaxField = value;
                    this.RaisePropertyChanged("ApprovedUmax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ApprovedUmin {
            get {
                return this.ApprovedUminField;
            }
            set {
                if ((this.ApprovedUminField.Equals(value) != true)) {
                    this.ApprovedUminField = value;
                    this.RaisePropertyChanged("ApprovedUmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalcMaxVoltageChange {
            get {
                return this.CalcMaxVoltageChangeField;
            }
            set {
                if ((this.CalcMaxVoltageChangeField.Equals(value) != true)) {
                    this.CalcMaxVoltageChangeField = value;
                    this.RaisePropertyChanged("CalcMaxVoltageChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ConnectionPointDeltaU {
            get {
                return this.ConnectionPointDeltaUField;
            }
            set {
                if ((this.ConnectionPointDeltaUField.Equals(value) != true)) {
                    this.ConnectionPointDeltaUField = value;
                    this.RaisePropertyChanged("ConnectionPointDeltaU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ConnectionPointU {
            get {
                return this.ConnectionPointUField;
            }
            set {
                if ((this.ConnectionPointUField.Equals(value) != true)) {
                    this.ConnectionPointUField = value;
                    this.RaisePropertyChanged("ConnectionPointU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ConnectionPointUp {
            get {
                return this.ConnectionPointUpField;
            }
            set {
                if ((this.ConnectionPointUpField.Equals(value) != true)) {
                    this.ConnectionPointUpField = value;
                    this.RaisePropertyChanged("ConnectionPointUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DeltaLoadingMax {
            get {
                return this.DeltaLoadingMaxField;
            }
            set {
                if ((this.DeltaLoadingMaxField.Equals(value) != true)) {
                    this.DeltaLoadingMaxField = value;
                    this.RaisePropertyChanged("DeltaLoadingMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DeltaLosses {
            get {
                return this.DeltaLossesField;
            }
            set {
                if ((this.DeltaLossesField.Equals(value) != true)) {
                    this.DeltaLossesField = value;
                    this.RaisePropertyChanged("DeltaLosses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DeltaUconnection {
            get {
                return this.DeltaUconnectionField;
            }
            set {
                if ((this.DeltaUconnectionField.Equals(value) != true)) {
                    this.DeltaUconnectionField = value;
                    this.RaisePropertyChanged("DeltaUconnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DeltaUmax {
            get {
                return this.DeltaUmaxField;
            }
            set {
                if ((this.DeltaUmaxField.Equals(value) != true)) {
                    this.DeltaUmaxField = value;
                    this.RaisePropertyChanged("DeltaUmax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighestLoading {
            get {
                return this.HighestLoadingField;
            }
            set {
                if ((this.HighestLoadingField.Equals(value) != true)) {
                    this.HighestLoadingField = value;
                    this.RaisePropertyChanged("HighestLoading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighestU {
            get {
                return this.HighestUField;
            }
            set {
                if ((this.HighestUField.Equals(value) != true)) {
                    this.HighestUField = value;
                    this.RaisePropertyChanged("HighestU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighestUp {
            get {
                return this.HighestUpField;
            }
            set {
                if ((this.HighestUpField.Equals(value) != true)) {
                    this.HighestUpField = value;
                    this.RaisePropertyChanged("HighestUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LineHighestLoading {
            get {
                return this.LineHighestLoadingField;
            }
            set {
                if ((object.ReferenceEquals(this.LineHighestLoadingField, value) != true)) {
                    this.LineHighestLoadingField = value;
                    this.RaisePropertyChanged("LineHighestLoading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LineHighestLoadingID {
            get {
                return this.LineHighestLoadingIDField;
            }
            set {
                if ((this.LineHighestLoadingIDField.Equals(value) != true)) {
                    this.LineHighestLoadingIDField = value;
                    this.RaisePropertyChanged("LineHighestLoadingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Losses {
            get {
                return this.LossesField;
            }
            set {
                if ((this.LossesField.Equals(value) != true)) {
                    this.LossesField = value;
                    this.RaisePropertyChanged("Losses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LossesTransformer {
            get {
                return this.LossesTransformerField;
            }
            set {
                if ((this.LossesTransformerField.Equals(value) != true)) {
                    this.LossesTransformerField = value;
                    this.RaisePropertyChanged("LossesTransformer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowestU {
            get {
                return this.LowestUField;
            }
            set {
                if ((this.LowestUField.Equals(value) != true)) {
                    this.LowestUField = value;
                    this.RaisePropertyChanged("LowestU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowestUp {
            get {
                return this.LowestUpField;
            }
            set {
                if ((this.LowestUpField.Equals(value) != true)) {
                    this.LowestUpField = value;
                    this.RaisePropertyChanged("LowestUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxAllowedPower {
            get {
                return this.MaxAllowedPowerField;
            }
            set {
                if ((this.MaxAllowedPowerField.Equals(value) != true)) {
                    this.MaxAllowedPowerField = value;
                    this.RaisePropertyChanged("MaxAllowedPower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxAllowedPowerRed {
            get {
                return this.MaxAllowedPowerRedField;
            }
            set {
                if ((this.MaxAllowedPowerRedField.Equals(value) != true)) {
                    this.MaxAllowedPowerRedField = value;
                    this.RaisePropertyChanged("MaxAllowedPowerRed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxAllowedPowerYellow {
            get {
                return this.MaxAllowedPowerYellowField;
            }
            set {
                if ((this.MaxAllowedPowerYellowField.Equals(value) != true)) {
                    this.MaxAllowedPowerYellowField = value;
                    this.RaisePropertyChanged("MaxAllowedPowerYellow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewLineCost {
            get {
                return this.NewLineCostField;
            }
            set {
                if ((this.NewLineCostField.Equals(value) != true)) {
                    this.NewLineCostField = value;
                    this.RaisePropertyChanged("NewLineCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewLineCurrent {
            get {
                return this.NewLineCurrentField;
            }
            set {
                if ((this.NewLineCurrentField.Equals(value) != true)) {
                    this.NewLineCurrentField = value;
                    this.RaisePropertyChanged("NewLineCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewLineLoading {
            get {
                return this.NewLineLoadingField;
            }
            set {
                if ((this.NewLineLoadingField.Equals(value) != true)) {
                    this.NewLineLoadingField = value;
                    this.RaisePropertyChanged("NewLineLoading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewNodeU {
            get {
                return this.NewNodeUField;
            }
            set {
                if ((this.NewNodeUField.Equals(value) != true)) {
                    this.NewNodeUField = value;
                    this.RaisePropertyChanged("NewNodeU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewNodeUp {
            get {
                return this.NewNodeUpField;
            }
            set {
                if ((this.NewNodeUpField.Equals(value) != true)) {
                    this.NewNodeUpField = value;
                    this.RaisePropertyChanged("NewNodeUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeHighestUp {
            get {
                return this.NodeHighestUpField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeHighestUpField, value) != true)) {
                    this.NodeHighestUpField = value;
                    this.RaisePropertyChanged("NodeHighestUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeHighestUpID {
            get {
                return this.NodeHighestUpIDField;
            }
            set {
                if ((this.NodeHighestUpIDField.Equals(value) != true)) {
                    this.NodeHighestUpIDField = value;
                    this.RaisePropertyChanged("NodeHighestUpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeLowestUp {
            get {
                return this.NodeLowestUpField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeLowestUpField, value) != true)) {
                    this.NodeLowestUpField = value;
                    this.RaisePropertyChanged("NodeLowestUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeLowestUpID {
            get {
                return this.NodeLowestUpIDField;
            }
            set {
                if ((this.NodeLowestUpIDField.Equals(value) != true)) {
                    this.NodeLowestUpIDField = value;
                    this.RaisePropertyChanged("NodeLowestUpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Power {
            get {
                return this.PowerField;
            }
            set {
                if ((this.PowerField.Equals(value) != true)) {
                    this.PowerField = value;
                    this.RaisePropertyChanged("Power");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RelativeVoltageRise {
            get {
                return this.RelativeVoltageRiseField;
            }
            set {
                if ((this.RelativeVoltageRiseField.Equals(value) != true)) {
                    this.RelativeVoltageRiseField = value;
                    this.RaisePropertyChanged("RelativeVoltageRise");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunDach {
            get {
                return this.RunDachField;
            }
            set {
                if ((this.RunDachField.Equals(value) != true)) {
                    this.RunDachField = value;
                    this.RaisePropertyChanged("RunDach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunLf {
            get {
                return this.RunLfField;
            }
            set {
                if ((this.RunLfField.Equals(value) != true)) {
                    this.RunLfField = value;
                    this.RaisePropertyChanged("RunLf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RunMaxPower {
            get {
                return this.RunMaxPowerField;
            }
            set {
                if ((this.RunMaxPowerField.Equals(value) != true)) {
                    this.RunMaxPowerField = value;
                    this.RaisePropertyChanged("RunMaxPower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ZSk2 {
            get {
                return this.ZSk2Field;
            }
            set {
                if ((this.ZSk2Field.Equals(value) != true)) {
                    this.ZSk2Field = value;
                    this.RaisePropertyChanged("ZSk2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Zbet {
            get {
                return this.ZbetField;
            }
            set {
                if ((this.ZbetField.Equals(value) != true)) {
                    this.ZbetField = value;
                    this.RaisePropertyChanged("Zbet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Zwink {
            get {
                return this.ZwinkField;
            }
            set {
                if ((this.ZwinkField.Equals(value) != true)) {
                    this.ZwinkField = value;
                    this.RaisePropertyChanged("Zwink");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultScanningResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.Result")]
    [System.SerializableAttribute()]
    public partial class FaultScanningResult : Neplan_coordinacion.NeplanService.NotifyBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EndNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FaultDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FaultLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaultTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] InterNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationalStateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid StartNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.TrippedRelaysResult[] TrippedRelaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariantNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EndNode {
            get {
                return this.EndNodeField;
            }
            set {
                if ((this.EndNodeField.Equals(value) != true)) {
                    this.EndNodeField = value;
                    this.RaisePropertyChanged("EndNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FaultDistance {
            get {
                return this.FaultDistanceField;
            }
            set {
                if ((this.FaultDistanceField.Equals(value) != true)) {
                    this.FaultDistanceField = value;
                    this.RaisePropertyChanged("FaultDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FaultLocation {
            get {
                return this.FaultLocationField;
            }
            set {
                if ((this.FaultLocationField.Equals(value) != true)) {
                    this.FaultLocationField = value;
                    this.RaisePropertyChanged("FaultLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultTypeField, value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] InterNodes {
            get {
                return this.InterNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.InterNodesField, value) != true)) {
                    this.InterNodesField = value;
                    this.RaisePropertyChanged("InterNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperationalStateName {
            get {
                return this.OperationalStateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationalStateNameField, value) != true)) {
                    this.OperationalStateNameField = value;
                    this.RaisePropertyChanged("OperationalStateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PathName {
            get {
                return this.PathNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PathNameField, value) != true)) {
                    this.PathNameField = value;
                    this.RaisePropertyChanged("PathName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StartNode {
            get {
                return this.StartNodeField;
            }
            set {
                if ((this.StartNodeField.Equals(value) != true)) {
                    this.StartNodeField = value;
                    this.RaisePropertyChanged("StartNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.TrippedRelaysResult[] TrippedRelays {
            get {
                return this.TrippedRelaysField;
            }
            set {
                if ((object.ReferenceEquals(this.TrippedRelaysField, value) != true)) {
                    this.TrippedRelaysField = value;
                    this.RaisePropertyChanged("TrippedRelays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariantName {
            get {
                return this.VariantNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VariantNameField, value) != true)) {
                    this.VariantNameField = value;
                    this.RaisePropertyChanged("VariantName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotifyBase", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrippedRelaysResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.InterfaceConnectionItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.OperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo3WindingOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingAsymmetricalOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrafoRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ACDisperseGenerationOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AsynchronousMachineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CompositeLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SubLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DCConverterOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.EnergyStorageOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalGridOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PWMOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShuntOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SynchronousMachineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfGFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfWFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfHFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterReservoirOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterHydrantOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPlantOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkGroupOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CustomerTypeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FeederOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ZoneOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FaultScanningResult))]
    public partial class NotifyBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SwitchedAdmittanceBlock", Namespace="http://BCP.ch/Neplan/Web/Models/TechData")]
    [System.SerializableAttribute()]
    public partial class SwitchedAdmittanceBlock : Neplan_coordinacion.NeplanService.NotifyBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfStepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Q0IncrementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Q1IncrementField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfSteps {
            get {
                return this.NumberOfStepsField;
            }
            set {
                if ((this.NumberOfStepsField.Equals(value) != true)) {
                    this.NumberOfStepsField = value;
                    this.RaisePropertyChanged("NumberOfSteps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q0Increment {
            get {
                return this.Q0IncrementField;
            }
            set {
                if ((this.Q0IncrementField.Equals(value) != true)) {
                    this.Q0IncrementField = value;
                    this.RaisePropertyChanged("Q0Increment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q1Increment {
            get {
                return this.Q1IncrementField;
            }
            set {
                if ((this.Q1IncrementField.Equals(value) != true)) {
                    this.Q1IncrementField = value;
                    this.RaisePropertyChanged("Q1Increment");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrippedRelaysResult", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.Result")]
    [System.SerializableAttribute()]
    public partial class TrippedRelaysResult : Neplan_coordinacion.NeplanService.NotifyBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FaultCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaultDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FaultImpedanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TripTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TrippedRelayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FaultCurrent {
            get {
                return this.FaultCurrentField;
            }
            set {
                if ((this.FaultCurrentField.Equals(value) != true)) {
                    this.FaultCurrentField = value;
                    this.RaisePropertyChanged("FaultCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaultDistance {
            get {
                return this.FaultDistanceField;
            }
            set {
                if ((this.FaultDistanceField.Equals(value) != true)) {
                    this.FaultDistanceField = value;
                    this.RaisePropertyChanged("FaultDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FaultImpedance {
            get {
                return this.FaultImpedanceField;
            }
            set {
                if ((this.FaultImpedanceField.Equals(value) != true)) {
                    this.FaultImpedanceField = value;
                    this.RaisePropertyChanged("FaultImpedance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsChecked {
            get {
                return this.IsCheckedField;
            }
            set {
                if ((this.IsCheckedField.Equals(value) != true)) {
                    this.IsCheckedField = value;
                    this.RaisePropertyChanged("IsChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TripTime {
            get {
                return this.TripTimeField;
            }
            set {
                if ((this.TripTimeField.Equals(value) != true)) {
                    this.TripTimeField = value;
                    this.RaisePropertyChanged("TripTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TrippedRelay {
            get {
                return this.TrippedRelayField;
            }
            set {
                if ((this.TrippedRelayField.Equals(value) != true)) {
                    this.TrippedRelayField = value;
                    this.RaisePropertyChanged("TrippedRelay");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterfaceConnectionItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class InterfaceConnectionItem : Neplan_coordinacion.NeplanService.NotifyBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PortNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementTypeField, value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short PortNumber {
            get {
                return this.PortNumberField;
            }
            set {
                if ((this.PortNumberField.Equals(value) != true)) {
                    this.PortNumberField = value;
                    this.RaisePropertyChanged("PortNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo3WindingOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingAsymmetricalOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrafoRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ACDisperseGenerationOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AsynchronousMachineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CompositeLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SubLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DCConverterOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.EnergyStorageOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalGridOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PWMOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShuntOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SynchronousMachineOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfGFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfWFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfHFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterReservoirOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingCirculationPumpOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterHydrantOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPlantOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkGroupOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CustomerTypeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FeederOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ZoneOperData))]
    public partial class OperData : Neplan_coordinacion.NeplanService.NotifyBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trafo2WindingOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class Trafo2WindingOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulated1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulated2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.EarthingTypes PrimarySideEarthingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.EarthingTypes SecondarySideEarthingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated1 {
            get {
                return this.IsRegulated1Field;
            }
            set {
                if ((this.IsRegulated1Field.Equals(value) != true)) {
                    this.IsRegulated1Field = value;
                    this.RaisePropertyChanged("IsRegulated1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated2 {
            get {
                return this.IsRegulated2Field;
            }
            set {
                if ((this.IsRegulated2Field.Equals(value) != true)) {
                    this.IsRegulated2Field = value;
                    this.RaisePropertyChanged("IsRegulated2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.EarthingTypes PrimarySideEarthing {
            get {
                return this.PrimarySideEarthingField;
            }
            set {
                if ((this.PrimarySideEarthingField.Equals(value) != true)) {
                    this.PrimarySideEarthingField = value;
                    this.RaisePropertyChanged("PrimarySideEarthing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.EarthingTypes SecondarySideEarthing {
            get {
                return this.SecondarySideEarthingField;
            }
            set {
                if ((this.SecondarySideEarthingField.Equals(value) != true)) {
                    this.SecondarySideEarthingField = value;
                    this.RaisePropertyChanged("SecondarySideEarthing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap1 {
            get {
                return this.Tap1Field;
            }
            set {
                if ((this.Tap1Field.Equals(value) != true)) {
                    this.Tap1Field = value;
                    this.RaisePropertyChanged("Tap1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap2 {
            get {
                return this.Tap2Field;
            }
            set {
                if ((this.Tap2Field.Equals(value) != true)) {
                    this.Tap2Field = value;
                    this.RaisePropertyChanged("Tap2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trafo3WindingOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class Trafo3WindingOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulated1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulated2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.EarthingTypes PrimarySideEarthingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.EarthingTypes SecondarySideEarthingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.EarthingTypes TertiarySideEarthingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated1 {
            get {
                return this.IsRegulated1Field;
            }
            set {
                if ((this.IsRegulated1Field.Equals(value) != true)) {
                    this.IsRegulated1Field = value;
                    this.RaisePropertyChanged("IsRegulated1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated2 {
            get {
                return this.IsRegulated2Field;
            }
            set {
                if ((this.IsRegulated2Field.Equals(value) != true)) {
                    this.IsRegulated2Field = value;
                    this.RaisePropertyChanged("IsRegulated2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.EarthingTypes PrimarySideEarthing {
            get {
                return this.PrimarySideEarthingField;
            }
            set {
                if ((this.PrimarySideEarthingField.Equals(value) != true)) {
                    this.PrimarySideEarthingField = value;
                    this.RaisePropertyChanged("PrimarySideEarthing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.EarthingTypes SecondarySideEarthing {
            get {
                return this.SecondarySideEarthingField;
            }
            set {
                if ((this.SecondarySideEarthingField.Equals(value) != true)) {
                    this.SecondarySideEarthingField = value;
                    this.RaisePropertyChanged("SecondarySideEarthing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap1 {
            get {
                return this.Tap1Field;
            }
            set {
                if ((this.Tap1Field.Equals(value) != true)) {
                    this.Tap1Field = value;
                    this.RaisePropertyChanged("Tap1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap2 {
            get {
                return this.Tap2Field;
            }
            set {
                if ((this.Tap2Field.Equals(value) != true)) {
                    this.Tap2Field = value;
                    this.RaisePropertyChanged("Tap2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.EarthingTypes TertiarySideEarthing {
            get {
                return this.TertiarySideEarthingField;
            }
            set {
                if ((this.TertiarySideEarthingField.Equals(value) != true)) {
                    this.TertiarySideEarthingField = value;
                    this.RaisePropertyChanged("TertiarySideEarthing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trafo2WindingAsymmetricalOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class Trafo2WindingAsymmetricalOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated {
            get {
                return this.IsRegulatedField;
            }
            set {
                if ((this.IsRegulatedField.Equals(value) != true)) {
                    this.IsRegulatedField = value;
                    this.RaisePropertyChanged("IsRegulated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap {
            get {
                return this.TapField;
            }
            set {
                if ((this.TapField.Equals(value) != true)) {
                    this.TapField = value;
                    this.RaisePropertyChanged("Tap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafoRegulatorOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class TrafoRegulatorOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tap3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double U1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double U2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double U3Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulated {
            get {
                return this.IsRegulatedField;
            }
            set {
                if ((this.IsRegulatedField.Equals(value) != true)) {
                    this.IsRegulatedField = value;
                    this.RaisePropertyChanged("IsRegulated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap1 {
            get {
                return this.Tap1Field;
            }
            set {
                if ((this.Tap1Field.Equals(value) != true)) {
                    this.Tap1Field = value;
                    this.RaisePropertyChanged("Tap1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap2 {
            get {
                return this.Tap2Field;
            }
            set {
                if ((this.Tap2Field.Equals(value) != true)) {
                    this.Tap2Field = value;
                    this.RaisePropertyChanged("Tap2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tap3 {
            get {
                return this.Tap3Field;
            }
            set {
                if ((this.Tap3Field.Equals(value) != true)) {
                    this.Tap3Field = value;
                    this.RaisePropertyChanged("Tap3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U1 {
            get {
                return this.U1Field;
            }
            set {
                if ((this.U1Field.Equals(value) != true)) {
                    this.U1Field = value;
                    this.RaisePropertyChanged("U1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U2 {
            get {
                return this.U2Field;
            }
            set {
                if ((this.U2Field.Equals(value) != true)) {
                    this.U2Field = value;
                    this.RaisePropertyChanged("U2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U3 {
            get {
                return this.U3Field;
            }
            set {
                if ((this.U3Field.Equals(value) != true)) {
                    this.U3Field = value;
                    this.RaisePropertyChanged("U3");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ACDisperseGenerationOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class ACDisperseGenerationOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCapacitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesACDisperseGen LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.phases_connect PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SlackPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UangleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.UnitTypes UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCapacitive {
            get {
                return this.IsCapacitiveField;
            }
            set {
                if ((this.IsCapacitiveField.Equals(value) != true)) {
                    this.IsCapacitiveField = value;
                    this.RaisePropertyChanged("IsCapacitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesACDisperseGen LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.phases_connect Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SlackPortion {
            get {
                return this.SlackPortionField;
            }
            set {
                if ((this.SlackPortionField.Equals(value) != true)) {
                    this.SlackPortionField = value;
                    this.RaisePropertyChanged("SlackPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Uangle {
            get {
                return this.UangleField;
            }
            set {
                if ((this.UangleField.Equals(value) != true)) {
                    this.UangleField = value;
                    this.RaisePropertyChanged("Uangle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.UnitTypes Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((this.UnitsField.Equals(value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AsynchronousMachineOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class AsynchronousMachineOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DFIGPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DFIGQField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DFIGSlipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DFIGTorqueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.DfigTypes DFIGTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCapacitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesASM LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DFIGP {
            get {
                return this.DFIGPField;
            }
            set {
                if ((this.DFIGPField.Equals(value) != true)) {
                    this.DFIGPField = value;
                    this.RaisePropertyChanged("DFIGP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DFIGQ {
            get {
                return this.DFIGQField;
            }
            set {
                if ((this.DFIGQField.Equals(value) != true)) {
                    this.DFIGQField = value;
                    this.RaisePropertyChanged("DFIGQ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DFIGSlip {
            get {
                return this.DFIGSlipField;
            }
            set {
                if ((this.DFIGSlipField.Equals(value) != true)) {
                    this.DFIGSlipField = value;
                    this.RaisePropertyChanged("DFIGSlip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DFIGTorque {
            get {
                return this.DFIGTorqueField;
            }
            set {
                if ((this.DFIGTorqueField.Equals(value) != true)) {
                    this.DFIGTorqueField = value;
                    this.RaisePropertyChanged("DFIGTorque");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.DfigTypes DFIGType {
            get {
                return this.DFIGTypeField;
            }
            set {
                if ((this.DFIGTypeField.Equals(value) != true)) {
                    this.DFIGTypeField = value;
                    this.RaisePropertyChanged("DFIGType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCapacitive {
            get {
                return this.IsCapacitiveField;
            }
            set {
                if ((this.IsCapacitiveField.Equals(value) != true)) {
                    this.IsCapacitiveField = value;
                    this.RaisePropertyChanged("IsCapacitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesASM LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class CompositeLoadOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.SubLoadOperData[] OperDataSubLoadsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.SubLoadOperData[] OperDataSubLoads {
            get {
                return this.OperDataSubLoadsField;
            }
            set {
                if ((object.ReferenceEquals(this.OperDataSubLoadsField, value) != true)) {
                    this.OperDataSubLoadsField = value;
                    this.RaisePropertyChanged("OperDataSubLoads");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class SubLoadOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ConnectionTypes ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DomesticUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesLoad LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Name1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double P0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.phases_connect PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Q0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ConnectionTypes ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((this.ConnectionTypeField.Equals(value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomesticUnits {
            get {
                return this.DomesticUnitsField;
            }
            set {
                if ((this.DomesticUnitsField.Equals(value) != true)) {
                    this.DomesticUnitsField = value;
                    this.RaisePropertyChanged("DomesticUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double E {
            get {
                return this.EField;
            }
            set {
                if ((this.EField.Equals(value) != true)) {
                    this.EField = value;
                    this.RaisePropertyChanged("E");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesLoad LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Name")]
        public string Name1 {
            get {
                return this.Name1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Name1Field, value) != true)) {
                    this.Name1Field = value;
                    this.RaisePropertyChanged("Name1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P0 {
            get {
                return this.P0Field;
            }
            set {
                if ((this.P0Field.Equals(value) != true)) {
                    this.P0Field = value;
                    this.RaisePropertyChanged("P0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.phases_connect Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q0 {
            get {
                return this.Q0Field;
            }
            set {
                if ((this.Q0Field.Equals(value) != true)) {
                    this.Q0Field = value;
                    this.RaisePropertyChanged("Q0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DCConverterOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class DCConverterOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ConverterFunctionType ConverterFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ConverterControlTypes RegulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UmodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ConverterFunctionType ConverterFunction {
            get {
                return this.ConverterFunctionField;
            }
            set {
                if ((this.ConverterFunctionField.Equals(value) != true)) {
                    this.ConverterFunctionField = value;
                    this.RaisePropertyChanged("ConverterFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ConverterControlTypes Regulation {
            get {
                return this.RegulationField;
            }
            set {
                if ((this.RegulationField.Equals(value) != true)) {
                    this.RegulationField = value;
                    this.RaisePropertyChanged("Regulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Umode {
            get {
                return this.UmodeField;
            }
            set {
                if ((this.UmodeField.Equals(value) != true)) {
                    this.UmodeField = value;
                    this.RaisePropertyChanged("Umode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnergyStorageOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class EnergyStorageOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCapacitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesEnergyStorage LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.phases_connect PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SlackPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UangleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.UnitTypes UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCapacitive {
            get {
                return this.IsCapacitiveField;
            }
            set {
                if ((this.IsCapacitiveField.Equals(value) != true)) {
                    this.IsCapacitiveField = value;
                    this.RaisePropertyChanged("IsCapacitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesEnergyStorage LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.phases_connect Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SlackPortion {
            get {
                return this.SlackPortionField;
            }
            set {
                if ((this.SlackPortionField.Equals(value) != true)) {
                    this.SlackPortionField = value;
                    this.RaisePropertyChanged("SlackPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Uangle {
            get {
                return this.UangleField;
            }
            set {
                if ((this.UangleField.Equals(value) != true)) {
                    this.UangleField = value;
                    this.RaisePropertyChanged("Uangle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.UnitTypes Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((this.UnitsField.Equals(value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalGridOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class ExternalGridOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesExternalGrid LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SlackPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UangleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesExternalGrid LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SlackPortion {
            get {
                return this.SlackPortionField;
            }
            set {
                if ((this.SlackPortionField.Equals(value) != true)) {
                    this.SlackPortionField = value;
                    this.RaisePropertyChanged("SlackPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Uangle {
            get {
                return this.UangleField;
            }
            set {
                if ((this.UangleField.Equals(value) != true)) {
                    this.UangleField = value;
                    this.RaisePropertyChanged("Uangle");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class LineOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OutsideTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ShuntActive1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ShuntActive2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OutsideTemperature {
            get {
                return this.OutsideTemperatureField;
            }
            set {
                if ((this.OutsideTemperatureField.Equals(value) != true)) {
                    this.OutsideTemperatureField = value;
                    this.RaisePropertyChanged("OutsideTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ShuntActive1 {
            get {
                return this.ShuntActive1Field;
            }
            set {
                if ((this.ShuntActive1Field.Equals(value) != true)) {
                    this.ShuntActive1Field = value;
                    this.RaisePropertyChanged("ShuntActive1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ShuntActive2 {
            get {
                return this.ShuntActive2Field;
            }
            set {
                if ((this.ShuntActive2Field.Equals(value) != true)) {
                    this.ShuntActive2Field = value;
                    this.RaisePropertyChanged("ShuntActive2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLineLoadOperData))]
    public partial class LoadOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesLoad LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double P0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.phases_connect PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Q0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.UnitTypes UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double E {
            get {
                return this.EField;
            }
            set {
                if ((this.EField.Equals(value) != true)) {
                    this.EField = value;
                    this.RaisePropertyChanged("E");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesLoad LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P0 {
            get {
                return this.P0Field;
            }
            set {
                if ((this.P0Field.Equals(value) != true)) {
                    this.P0Field = value;
                    this.RaisePropertyChanged("P0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.phases_connect Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q0 {
            get {
                return this.Q0Field;
            }
            set {
                if ((this.Q0Field.Equals(value) != true)) {
                    this.Q0Field = value;
                    this.RaisePropertyChanged("Q0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Un {
            get {
                return this.UnField;
            }
            set {
                if ((this.UnField.Equals(value) != true)) {
                    this.UnField = value;
                    this.RaisePropertyChanged("Un");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.UnitTypes Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((this.UnitsField.Equals(value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerLineLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class PowerLineLoadOperData : Neplan_coordinacion.NeplanService.LoadOperData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PWMOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class PWMOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.PWMControlTypes Control1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.PWMControlTypes Control2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SetValue1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SetValue2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.PWMControlTypes Control1 {
            get {
                return this.Control1Field;
            }
            set {
                if ((this.Control1Field.Equals(value) != true)) {
                    this.Control1Field = value;
                    this.RaisePropertyChanged("Control1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.PWMControlTypes Control2 {
            get {
                return this.Control2Field;
            }
            set {
                if ((this.Control2Field.Equals(value) != true)) {
                    this.Control2Field = value;
                    this.RaisePropertyChanged("Control2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetValue1 {
            get {
                return this.SetValue1Field;
            }
            set {
                if ((this.SetValue1Field.Equals(value) != true)) {
                    this.SetValue1Field = value;
                    this.RaisePropertyChanged("SetValue1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetValue2 {
            get {
                return this.SetValue2Field;
            }
            set {
                if ((this.SetValue2Field.Equals(value) != true)) {
                    this.SetValue2Field = value;
                    this.RaisePropertyChanged("SetValue2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShuntOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class ShuntOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double P0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.phases_connect PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Q0Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ShuntRegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P0 {
            get {
                return this.P0Field;
            }
            set {
                if ((this.P0Field.Equals(value) != true)) {
                    this.P0Field = value;
                    this.RaisePropertyChanged("P0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.phases_connect Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q0 {
            get {
                return this.Q0Field;
            }
            set {
                if ((this.Q0Field.Equals(value) != true)) {
                    this.Q0Field = value;
                    this.RaisePropertyChanged("Q0");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ShuntRegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynchronousMachineOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class SynchronousMachineOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCapacitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVariableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LfTypesSM LFTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QScalingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SlackPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UangleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCapacitive {
            get {
                return this.IsCapacitiveField;
            }
            set {
                if ((this.IsCapacitiveField.Equals(value) != true)) {
                    this.IsCapacitiveField = value;
                    this.RaisePropertyChanged("IsCapacitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVariable {
            get {
                return this.IsVariableField;
            }
            set {
                if ((this.IsVariableField.Equals(value) != true)) {
                    this.IsVariableField = value;
                    this.RaisePropertyChanged("IsVariable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LfTypesSM LFType {
            get {
                return this.LFTypeField;
            }
            set {
                if ((this.LFTypeField.Equals(value) != true)) {
                    this.LFTypeField = value;
                    this.RaisePropertyChanged("LFType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PScaling {
            get {
                return this.PScalingField;
            }
            set {
                if ((this.PScalingField.Equals(value) != true)) {
                    this.PScalingField = value;
                    this.RaisePropertyChanged("PScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QPortion {
            get {
                return this.QPortionField;
            }
            set {
                if ((this.QPortionField.Equals(value) != true)) {
                    this.QPortionField = value;
                    this.RaisePropertyChanged("QPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QScaling {
            get {
                return this.QScalingField;
            }
            set {
                if ((this.QScalingField.Equals(value) != true)) {
                    this.QScalingField = value;
                    this.RaisePropertyChanged("QScaling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SlackPortion {
            get {
                return this.SlackPortionField;
            }
            set {
                if ((this.SlackPortionField.Equals(value) != true)) {
                    this.SlackPortionField = value;
                    this.RaisePropertyChanged("SlackPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double U {
            get {
                return this.UField;
            }
            set {
                if ((this.UField.Equals(value) != true)) {
                    this.UField = value;
                    this.RaisePropertyChanged("U");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Uangle {
            get {
                return this.UangleField;
            }
            set {
                if ((this.UangleField.Equals(value) != true)) {
                    this.UangleField = value;
                    this.RaisePropertyChanged("Uangle");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandOperDataOfGFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasLineLoadOperData))]
    public partial class GWHDemandOperDataOfGFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GFlowRateUnits QDemandUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand {
            get {
                return this.QDemandField;
            }
            set {
                if ((this.QDemandField.Equals(value) != true)) {
                    this.QDemandField = value;
                    this.RaisePropertyChanged("QDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GFlowRateUnits QDemandUnits {
            get {
                return this.QDemandUnitsField;
            }
            set {
                if ((this.QDemandUnitsField.Equals(value) != true)) {
                    this.QDemandUnitsField = value;
                    this.RaisePropertyChanged("QDemandUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasPipeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasPipeOperData : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfGFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasLineLoadOperData))]
    public partial class GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfGFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QDemandProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool QDemandProfileOnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemandFactor {
            get {
                return this.QDemandFactorField;
            }
            set {
                if ((this.QDemandFactorField.Equals(value) != true)) {
                    this.QDemandFactorField = value;
                    this.RaisePropertyChanged("QDemandFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QDemandProfile {
            get {
                return this.QDemandProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.QDemandProfileField, value) != true)) {
                    this.QDemandProfileField = value;
                    this.RaisePropertyChanged("QDemandProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool QDemandProfileOn {
            get {
                return this.QDemandProfileOnField;
            }
            set {
                if ((this.QDemandProfileOnField.Equals(value) != true)) {
                    this.QDemandProfileOnField = value;
                    this.RaisePropertyChanged("QDemandProfileOn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasNodeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasNodeOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GPressureUnits FixedPressureUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GasConsumerOperData[] OperDataGasConsumersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandMaxField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedPressure {
            get {
                return this.FixedPressureField;
            }
            set {
                if ((this.FixedPressureField.Equals(value) != true)) {
                    this.FixedPressureField = value;
                    this.RaisePropertyChanged("FixedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GPressureUnits FixedPressureUnits {
            get {
                return this.FixedPressureUnitsField;
            }
            set {
                if ((this.FixedPressureUnitsField.Equals(value) != true)) {
                    this.FixedPressureUnitsField = value;
                    this.RaisePropertyChanged("FixedPressureUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GasConsumerOperData[] OperDataGasConsumers {
            get {
                return this.OperDataGasConsumersField;
            }
            set {
                if ((object.ReferenceEquals(this.OperDataGasConsumersField, value) != true)) {
                    this.OperDataGasConsumersField = value;
                    this.RaisePropertyChanged("OperDataGasConsumers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemandMax {
            get {
                return this.QDemandMaxField;
            }
            set {
                if ((this.QDemandMaxField.Equals(value) != true)) {
                    this.QDemandMaxField = value;
                    this.RaisePropertyChanged("QDemandMax");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasConsumerOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasConsumerOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandMaxField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemandMax {
            get {
                return this.QDemandMaxField;
            }
            set {
                if ((this.QDemandMaxField.Equals(value) != true)) {
                    this.QDemandMaxField = value;
                    this.RaisePropertyChanged("QDemandMax");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasSpecialLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasSpecialLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasLineLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasLineLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandOperDataOfWFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLineLoadOperData))]
    public partial class GWHDemandOperDataOfWFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WFlowRateUnits QDemandUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand {
            get {
                return this.QDemandField;
            }
            set {
                if ((this.QDemandField.Equals(value) != true)) {
                    this.QDemandField = value;
                    this.RaisePropertyChanged("QDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WFlowRateUnits QDemandUnits {
            get {
                return this.QDemandUnitsField;
            }
            set {
                if ((this.QDemandUnitsField.Equals(value) != true)) {
                    this.QDemandUnitsField = value;
                    this.RaisePropertyChanged("QDemandUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterPipeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterPipeOperData : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfWFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLineLoadOperData))]
    public partial class GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfWFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QDemandProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool QDemandProfileOnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemandFactor {
            get {
                return this.QDemandFactorField;
            }
            set {
                if ((this.QDemandFactorField.Equals(value) != true)) {
                    this.QDemandFactorField = value;
                    this.RaisePropertyChanged("QDemandFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QDemandProfile {
            get {
                return this.QDemandProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.QDemandProfileField, value) != true)) {
                    this.QDemandProfileField = value;
                    this.RaisePropertyChanged("QDemandProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool QDemandProfileOn {
            get {
                return this.QDemandProfileOnField;
            }
            set {
                if ((this.QDemandProfileOnField.Equals(value) != true)) {
                    this.QDemandProfileOnField = value;
                    this.RaisePropertyChanged("QDemandProfileOn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterNodeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterNodeOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WPressureUnits FixedPressureUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WaterConsumerOperData[] OperDataWaterConsumersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedPressure {
            get {
                return this.FixedPressureField;
            }
            set {
                if ((this.FixedPressureField.Equals(value) != true)) {
                    this.FixedPressureField = value;
                    this.RaisePropertyChanged("FixedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WPressureUnits FixedPressureUnits {
            get {
                return this.FixedPressureUnitsField;
            }
            set {
                if ((this.FixedPressureUnitsField.Equals(value) != true)) {
                    this.FixedPressureUnitsField = value;
                    this.RaisePropertyChanged("FixedPressureUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WaterConsumerOperData[] OperDataWaterConsumers {
            get {
                return this.OperDataWaterConsumersField;
            }
            set {
                if ((object.ReferenceEquals(this.OperDataWaterConsumersField, value) != true)) {
                    this.OperDataWaterConsumersField = value;
                    this.RaisePropertyChanged("OperDataWaterConsumers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterConsumerOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterConsumerOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterSpecialLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterSpecialLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterLineLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterLineLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandOperDataOfHFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPipeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLoadOperData))]
    public partial class GWHDemandOperDataOfHFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HFlowRateUnits QDemandUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand {
            get {
                return this.QDemandField;
            }
            set {
                if ((this.QDemandField.Equals(value) != true)) {
                    this.QDemandField = value;
                    this.RaisePropertyChanged("QDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HFlowRateUnits QDemandUnits {
            get {
                return this.QDemandUnitsField;
            }
            set {
                if ((this.QDemandUnitsField.Equals(value) != true)) {
                    this.QDemandUnitsField = value;
                    this.RaisePropertyChanged("QDemandUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingPipeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingPipeOperData : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfHFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingNodeOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingSpecialLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLineLoadOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLoadOperData))]
    public partial class GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol : Neplan_coordinacion.NeplanService.GWHDemandOperDataOfHFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QDemandProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool QDemandProfileOnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemandFactor {
            get {
                return this.QDemandFactorField;
            }
            set {
                if ((this.QDemandFactorField.Equals(value) != true)) {
                    this.QDemandFactorField = value;
                    this.RaisePropertyChanged("QDemandFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QDemandProfile {
            get {
                return this.QDemandProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.QDemandProfileField, value) != true)) {
                    this.QDemandProfileField = value;
                    this.RaisePropertyChanged("QDemandProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool QDemandProfileOn {
            get {
                return this.QDemandProfileOnField;
            }
            set {
                if ((this.QDemandProfileOnField.Equals(value) != true)) {
                    this.QDemandProfileOnField = value;
                    this.RaisePropertyChanged("QDemandProfileOn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingNodeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingNodeOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HPressureUnits FixedPressureUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatingConsumerOperData[] OperDataHeatConsumersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedPressure {
            get {
                return this.FixedPressureField;
            }
            set {
                if ((this.FixedPressureField.Equals(value) != true)) {
                    this.FixedPressureField = value;
                    this.RaisePropertyChanged("FixedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HPressureUnits FixedPressureUnits {
            get {
                return this.FixedPressureUnitsField;
            }
            set {
                if ((this.FixedPressureUnitsField.Equals(value) != true)) {
                    this.FixedPressureUnitsField = value;
                    this.RaisePropertyChanged("FixedPressureUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatingConsumerOperData[] OperDataHeatConsumers {
            get {
                return this.OperDataHeatConsumersField;
            }
            set {
                if ((object.ReferenceEquals(this.OperDataHeatConsumersField, value) != true)) {
                    this.OperDataHeatConsumersField = value;
                    this.RaisePropertyChanged("OperDataHeatConsumers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingConsumerOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingConsumerOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingSpecialLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingSpecialLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingLineLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingLineLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingLoadOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingLoadOperData : Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatExchangerModel CalculationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatingConsumerOperData[] OperDataHeatConsumersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OutletTemperatureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatExchangerModel CalculationType {
            get {
                return this.CalculationTypeField;
            }
            set {
                if ((this.CalculationTypeField.Equals(value) != true)) {
                    this.CalculationTypeField = value;
                    this.RaisePropertyChanged("CalculationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DeltaTemperature {
            get {
                return this.DeltaTemperatureField;
            }
            set {
                if ((this.DeltaTemperatureField.Equals(value) != true)) {
                    this.DeltaTemperatureField = value;
                    this.RaisePropertyChanged("DeltaTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatingConsumerOperData[] OperDataHeatConsumers {
            get {
                return this.OperDataHeatConsumersField;
            }
            set {
                if ((object.ReferenceEquals(this.OperDataHeatConsumersField, value) != true)) {
                    this.OperDataHeatConsumersField = value;
                    this.RaisePropertyChanged("OperDataHeatConsumers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OutletTemperature {
            get {
                return this.OutletTemperatureField;
            }
            set {
                if ((this.OutletTemperatureField.Equals(value) != true)) {
                    this.OutletTemperatureField = value;
                    this.RaisePropertyChanged("OutletTemperature");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasCirculationPumpOperData))]
    public partial class GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedFlowRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GFlowRateUnits RegulatedFlowRateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GPressureUnits RegulatedPressureUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedFlowRate {
            get {
                return this.RegulatedFlowRateField;
            }
            set {
                if ((this.RegulatedFlowRateField.Equals(value) != true)) {
                    this.RegulatedFlowRateField = value;
                    this.RaisePropertyChanged("RegulatedFlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GFlowRateUnits RegulatedFlowRateUnits {
            get {
                return this.RegulatedFlowRateUnitsField;
            }
            set {
                if ((this.RegulatedFlowRateUnitsField.Equals(value) != true)) {
                    this.RegulatedFlowRateUnitsField = value;
                    this.RaisePropertyChanged("RegulatedFlowRateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedPressure {
            get {
                return this.RegulatedPressureField;
            }
            set {
                if ((this.RegulatedPressureField.Equals(value) != true)) {
                    this.RegulatedPressureField = value;
                    this.RaisePropertyChanged("RegulatedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GPressureUnits RegulatedPressureUnits {
            get {
                return this.RegulatedPressureUnitsField;
            }
            set {
                if ((this.RegulatedPressureUnitsField.Equals(value) != true)) {
                    this.RegulatedPressureUnitsField = value;
                    this.RaisePropertyChanged("RegulatedPressureUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasValveOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasValveOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.GasRegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulationActive {
            get {
                return this.IsRegulationActiveField;
            }
            set {
                if ((this.IsRegulationActiveField.Equals(value) != true)) {
                    this.IsRegulationActiveField = value;
                    this.RaisePropertyChanged("IsRegulationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.GasRegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasPressureRegulatorOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasPressureRegulatorOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalorificValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPressureConstantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxEnforcedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpecificGravityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalorificValue {
            get {
                return this.CalorificValueField;
            }
            set {
                if ((this.CalorificValueField.Equals(value) != true)) {
                    this.CalorificValueField = value;
                    this.RaisePropertyChanged("CalorificValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPressureConstant {
            get {
                return this.IsPressureConstantField;
            }
            set {
                if ((this.IsPressureConstantField.Equals(value) != true)) {
                    this.IsPressureConstantField = value;
                    this.RaisePropertyChanged("IsPressureConstant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxChecked {
            get {
                return this.IsQMaxCheckedField;
            }
            set {
                if ((this.IsQMaxCheckedField.Equals(value) != true)) {
                    this.IsQMaxCheckedField = value;
                    this.RaisePropertyChanged("IsQMaxChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxEnforced {
            get {
                return this.IsQMaxEnforcedField;
            }
            set {
                if ((this.IsQMaxEnforcedField.Equals(value) != true)) {
                    this.IsQMaxEnforcedField = value;
                    this.RaisePropertyChanged("IsQMaxEnforced");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpecificGravity {
            get {
                return this.SpecificGravityField;
            }
            set {
                if ((this.SpecificGravityField.Equals(value) != true)) {
                    this.SpecificGravityField = value;
                    this.RaisePropertyChanged("SpecificGravity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasCirculationPumpOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class GasCirculationPumpOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.RegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.RegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterReservoirOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterCirculationPumpOperData))]
    public partial class GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedFlowRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WFlowRateUnits RegulatedFlowRateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WPressureUnits RegulatedPressureUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedFlowRate {
            get {
                return this.RegulatedFlowRateField;
            }
            set {
                if ((this.RegulatedFlowRateField.Equals(value) != true)) {
                    this.RegulatedFlowRateField = value;
                    this.RaisePropertyChanged("RegulatedFlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WFlowRateUnits RegulatedFlowRateUnits {
            get {
                return this.RegulatedFlowRateUnitsField;
            }
            set {
                if ((this.RegulatedFlowRateUnitsField.Equals(value) != true)) {
                    this.RegulatedFlowRateUnitsField = value;
                    this.RaisePropertyChanged("RegulatedFlowRateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedPressure {
            get {
                return this.RegulatedPressureField;
            }
            set {
                if ((this.RegulatedPressureField.Equals(value) != true)) {
                    this.RegulatedPressureField = value;
                    this.RaisePropertyChanged("RegulatedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WPressureUnits RegulatedPressureUnits {
            get {
                return this.RegulatedPressureUnitsField;
            }
            set {
                if ((this.RegulatedPressureUnitsField.Equals(value) != true)) {
                    this.RegulatedPressureUnitsField = value;
                    this.RaisePropertyChanged("RegulatedPressureUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterValveOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterValveOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.RegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulationActive {
            get {
                return this.IsRegulationActiveField;
            }
            set {
                if ((this.IsRegulationActiveField.Equals(value) != true)) {
                    this.IsRegulationActiveField = value;
                    this.RaisePropertyChanged("IsRegulationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.RegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterReservoirOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterReservoirOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPressureConstantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxEnforcedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPressureConstant {
            get {
                return this.IsPressureConstantField;
            }
            set {
                if ((this.IsPressureConstantField.Equals(value) != true)) {
                    this.IsPressureConstantField = value;
                    this.RaisePropertyChanged("IsPressureConstant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxChecked {
            get {
                return this.IsQMaxCheckedField;
            }
            set {
                if ((this.IsQMaxCheckedField.Equals(value) != true)) {
                    this.IsQMaxCheckedField = value;
                    this.RaisePropertyChanged("IsQMaxChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxEnforced {
            get {
                return this.IsQMaxEnforcedField;
            }
            set {
                if ((this.IsQMaxEnforcedField.Equals(value) != true)) {
                    this.IsQMaxEnforcedField = value;
                    this.RaisePropertyChanged("IsQMaxEnforced");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterCirculationPumpOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterCirculationPumpOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.RegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.RegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingValveOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPressureRegulatorOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingCirculationPumpOperData))]
    public partial class GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedFlowRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HFlowRateUnits RegulatedFlowRateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RegulatedPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HPressureUnits RegulatedPressureUnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedFlowRate {
            get {
                return this.RegulatedFlowRateField;
            }
            set {
                if ((this.RegulatedFlowRateField.Equals(value) != true)) {
                    this.RegulatedFlowRateField = value;
                    this.RaisePropertyChanged("RegulatedFlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HFlowRateUnits RegulatedFlowRateUnits {
            get {
                return this.RegulatedFlowRateUnitsField;
            }
            set {
                if ((this.RegulatedFlowRateUnitsField.Equals(value) != true)) {
                    this.RegulatedFlowRateUnitsField = value;
                    this.RaisePropertyChanged("RegulatedFlowRateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RegulatedPressure {
            get {
                return this.RegulatedPressureField;
            }
            set {
                if ((this.RegulatedPressureField.Equals(value) != true)) {
                    this.RegulatedPressureField = value;
                    this.RaisePropertyChanged("RegulatedPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HPressureUnits RegulatedPressureUnits {
            get {
                return this.RegulatedPressureUnitsField;
            }
            set {
                if ((this.RegulatedPressureUnitsField.Equals(value) != true)) {
                    this.RegulatedPressureUnitsField = value;
                    this.RaisePropertyChanged("RegulatedPressureUnits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingValveOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingValveOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRegulationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatingRegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRegulationActive {
            get {
                return this.IsRegulationActiveField;
            }
            set {
                if ((this.IsRegulationActiveField.Equals(value) != true)) {
                    this.IsRegulationActiveField = value;
                    this.RaisePropertyChanged("IsRegulationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatingRegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingPressureRegulatorOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingPressureRegulatorOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNegativeFlowBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPressureConstantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsQMaxEnforcedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNegativeFlowBlocked {
            get {
                return this.IsNegativeFlowBlockedField;
            }
            set {
                if ((this.IsNegativeFlowBlockedField.Equals(value) != true)) {
                    this.IsNegativeFlowBlockedField = value;
                    this.RaisePropertyChanged("IsNegativeFlowBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPressureConstant {
            get {
                return this.IsPressureConstantField;
            }
            set {
                if ((this.IsPressureConstantField.Equals(value) != true)) {
                    this.IsPressureConstantField = value;
                    this.RaisePropertyChanged("IsPressureConstant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxChecked {
            get {
                return this.IsQMaxCheckedField;
            }
            set {
                if ((this.IsQMaxCheckedField.Equals(value) != true)) {
                    this.IsQMaxCheckedField = value;
                    this.RaisePropertyChanged("IsQMaxChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsQMaxEnforced {
            get {
                return this.IsQMaxEnforcedField;
            }
            set {
                if ((this.IsQMaxEnforcedField.Equals(value) != true)) {
                    this.IsQMaxEnforcedField = value;
                    this.RaisePropertyChanged("IsQMaxEnforced");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingCirculationPumpOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingCirculationPumpOperData : Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.RegulationTypes RegulationTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.RegulationTypes RegulationType {
            get {
                return this.RegulationTypeField;
            }
            set {
                if ((this.RegulationTypeField.Equals(value) != true)) {
                    this.RegulationTypeField = value;
                    this.RaisePropertyChanged("RegulationType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterHydrantOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class WaterHydrantOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HydrantFlowRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WFlowRateUnits HydrantFlowRateUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HydrantPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WPressureUnits HydrantPressureUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WaterHydrantType HydrantTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HydrantFlowRate {
            get {
                return this.HydrantFlowRateField;
            }
            set {
                if ((this.HydrantFlowRateField.Equals(value) != true)) {
                    this.HydrantFlowRateField = value;
                    this.RaisePropertyChanged("HydrantFlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WFlowRateUnits HydrantFlowRateUnits {
            get {
                return this.HydrantFlowRateUnitsField;
            }
            set {
                if ((this.HydrantFlowRateUnitsField.Equals(value) != true)) {
                    this.HydrantFlowRateUnitsField = value;
                    this.RaisePropertyChanged("HydrantFlowRateUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HydrantPressure {
            get {
                return this.HydrantPressureField;
            }
            set {
                if ((this.HydrantPressureField.Equals(value) != true)) {
                    this.HydrantPressureField = value;
                    this.RaisePropertyChanged("HydrantPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WPressureUnits HydrantPressureUnits {
            get {
                return this.HydrantPressureUnitsField;
            }
            set {
                if ((this.HydrantPressureUnitsField.Equals(value) != true)) {
                    this.HydrantPressureUnitsField = value;
                    this.RaisePropertyChanged("HydrantPressureUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WaterHydrantType HydrantType {
            get {
                return this.HydrantTypeField;
            }
            set {
                if ((this.HydrantTypeField.Equals(value) != true)) {
                    this.HydrantTypeField = value;
                    this.RaisePropertyChanged("HydrantType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingPlantOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class HeatingPlantOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedHeatingSupplyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedMassFlowRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedReturnPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FixedSupplyPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MeanPressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureDropField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatPlantPressureRegulation PressureModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.HeatPlantProduction ProductionModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SupplyPortionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SupplyTemperatureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedHeatingSupply {
            get {
                return this.FixedHeatingSupplyField;
            }
            set {
                if ((this.FixedHeatingSupplyField.Equals(value) != true)) {
                    this.FixedHeatingSupplyField = value;
                    this.RaisePropertyChanged("FixedHeatingSupply");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedMassFlowRate {
            get {
                return this.FixedMassFlowRateField;
            }
            set {
                if ((this.FixedMassFlowRateField.Equals(value) != true)) {
                    this.FixedMassFlowRateField = value;
                    this.RaisePropertyChanged("FixedMassFlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedReturnPressure {
            get {
                return this.FixedReturnPressureField;
            }
            set {
                if ((this.FixedReturnPressureField.Equals(value) != true)) {
                    this.FixedReturnPressureField = value;
                    this.RaisePropertyChanged("FixedReturnPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FixedSupplyPressure {
            get {
                return this.FixedSupplyPressureField;
            }
            set {
                if ((this.FixedSupplyPressureField.Equals(value) != true)) {
                    this.FixedSupplyPressureField = value;
                    this.RaisePropertyChanged("FixedSupplyPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MeanPressure {
            get {
                return this.MeanPressureField;
            }
            set {
                if ((this.MeanPressureField.Equals(value) != true)) {
                    this.MeanPressureField = value;
                    this.RaisePropertyChanged("MeanPressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PressureDrop {
            get {
                return this.PressureDropField;
            }
            set {
                if ((this.PressureDropField.Equals(value) != true)) {
                    this.PressureDropField = value;
                    this.RaisePropertyChanged("PressureDrop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatPlantPressureRegulation PressureModel {
            get {
                return this.PressureModelField;
            }
            set {
                if ((this.PressureModelField.Equals(value) != true)) {
                    this.PressureModelField = value;
                    this.RaisePropertyChanged("PressureModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.HeatPlantProduction ProductionModel {
            get {
                return this.ProductionModelField;
            }
            set {
                if ((this.ProductionModelField.Equals(value) != true)) {
                    this.ProductionModelField = value;
                    this.RaisePropertyChanged("ProductionModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SupplyPortion {
            get {
                return this.SupplyPortionField;
            }
            set {
                if ((this.SupplyPortionField.Equals(value) != true)) {
                    this.SupplyPortionField = value;
                    this.RaisePropertyChanged("SupplyPortion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SupplyTemperature {
            get {
                return this.SupplyTemperatureField;
            }
            set {
                if ((this.SupplyTemperatureField.Equals(value) != true)) {
                    this.SupplyTemperatureField = value;
                    this.RaisePropertyChanged("SupplyTemperature");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkGroupOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FeederOperData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ZoneOperData))]
    public partial class NetworkGroupOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GWHAirTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GWHExternalTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GWHLoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GWHSpecialLoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.NetworkGroupTypes NetworkGroupTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PgenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QcapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QgenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QloadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GWHAirTemperature {
            get {
                return this.GWHAirTemperatureField;
            }
            set {
                if ((this.GWHAirTemperatureField.Equals(value) != true)) {
                    this.GWHAirTemperatureField = value;
                    this.RaisePropertyChanged("GWHAirTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GWHExternalTemperature {
            get {
                return this.GWHExternalTemperatureField;
            }
            set {
                if ((this.GWHExternalTemperatureField.Equals(value) != true)) {
                    this.GWHExternalTemperatureField = value;
                    this.RaisePropertyChanged("GWHExternalTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GWHLoad {
            get {
                return this.GWHLoadField;
            }
            set {
                if ((this.GWHLoadField.Equals(value) != true)) {
                    this.GWHLoadField = value;
                    this.RaisePropertyChanged("GWHLoad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GWHSpecialLoad {
            get {
                return this.GWHSpecialLoadField;
            }
            set {
                if ((this.GWHSpecialLoadField.Equals(value) != true)) {
                    this.GWHSpecialLoadField = value;
                    this.RaisePropertyChanged("GWHSpecialLoad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.NetworkGroupTypes NetworkGroupType {
            get {
                return this.NetworkGroupTypeField;
            }
            set {
                if ((this.NetworkGroupTypeField.Equals(value) != true)) {
                    this.NetworkGroupTypeField = value;
                    this.RaisePropertyChanged("NetworkGroupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pgen {
            get {
                return this.PgenField;
            }
            set {
                if ((this.PgenField.Equals(value) != true)) {
                    this.PgenField = value;
                    this.RaisePropertyChanged("Pgen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pload {
            get {
                return this.PloadField;
            }
            set {
                if ((this.PloadField.Equals(value) != true)) {
                    this.PloadField = value;
                    this.RaisePropertyChanged("Pload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Qcap {
            get {
                return this.QcapField;
            }
            set {
                if ((this.QcapField.Equals(value) != true)) {
                    this.QcapField = value;
                    this.RaisePropertyChanged("Qcap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Qgen {
            get {
                return this.QgenField;
            }
            set {
                if ((this.QgenField.Equals(value) != true)) {
                    this.QgenField = value;
                    this.RaisePropertyChanged("Qgen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Qind {
            get {
                return this.QindField;
            }
            set {
                if ((this.QindField.Equals(value) != true)) {
                    this.QindField = value;
                    this.RaisePropertyChanged("Qind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Qload {
            get {
                return this.QloadField;
            }
            set {
                if ((this.QloadField.Equals(value) != true)) {
                    this.QloadField = value;
                    this.RaisePropertyChanged("Qload");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class NetworkOperData : Neplan_coordinacion.NeplanService.NetworkGroupOperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.CustomerTypeOperData[] CustomerTypesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.CustomerTypeOperData[] CustomerTypes {
            get {
                return this.CustomerTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerTypesField, value) != true)) {
                    this.CustomerTypesField = value;
                    this.RaisePropertyChanged("CustomerTypes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerTypeOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class CustomerTypeOperData : Neplan_coordinacion.NeplanService.OperData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GWHFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QFactorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GWHFactor {
            get {
                return this.GWHFactorField;
            }
            set {
                if ((this.GWHFactorField.Equals(value) != true)) {
                    this.GWHFactorField = value;
                    this.RaisePropertyChanged("GWHFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PFactor {
            get {
                return this.PFactorField;
            }
            set {
                if ((this.PFactorField.Equals(value) != true)) {
                    this.PFactorField = value;
                    this.RaisePropertyChanged("PFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QFactor {
            get {
                return this.QFactorField;
            }
            set {
                if ((this.QFactorField.Equals(value) != true)) {
                    this.QFactorField = value;
                    this.RaisePropertyChanged("QFactor");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FeederOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class FeederOperData : Neplan_coordinacion.NeplanService.NetworkGroupOperData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZoneOperData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class ZoneOperData : Neplan_coordinacion.NeplanService.NetworkGroupOperData {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EarthingTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum EarthingTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Direct = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Impedance = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Isolated = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesACDisperseGen", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesACDisperseGen : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PV = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SC = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cosfP = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cosfU = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QfU = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cosBranch = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="phases_connect", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models")]
    public enum phases_connect : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L1L2L3N = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L1N = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L2N = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L3N = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L1L2N = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L1L3N = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L2L3N = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        L1L2L3N_AS = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnitTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum UnitTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HV = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LV = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DfigTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum DfigTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DFIGPTes = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DFIGPQs = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DFIGPQ = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesASM", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesASM : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MLoad = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum ConnectionTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WyeGnd = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delta = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WyeIsolator = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesLoad", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesLoad : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IC = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PI = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EC = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConverterFunctionType", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum ConverterFunctionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inverter = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rectifier = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConverterControlTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum ConverterControlTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        P = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AandU = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesEnergyStorage", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesEnergyStorage : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PV = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SC = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cosfP = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cosfU = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QfU = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesExternalGrid", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesExternalGrid : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PV = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PWMControlTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum PWMControlTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Uac = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Udc = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        P = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Q = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Md = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mq = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShuntRegulationTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum ShuntRegulationTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedAdmittance = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchedAdmittanceDiscrete = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchedAdmittanceContinuous = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchedAdmittanceFixed = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LfTypesSM", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum LfTypesSM : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PQ = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PV = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GFlowRateUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum GFlowRateUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NM3pH = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kNM3pH = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KWH = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MWH = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GPressureUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum GPressureUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MBAR = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WFlowRateUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum WFlowRateUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LpSEC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LpMIN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M3pH = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WPressureUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum WPressureUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BAR = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HFlowRateUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HFlowRateUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LpSEC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LpMIN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M3pH = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TpH = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KGpS = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KW = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HPressureUnits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HPressureUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BAR = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatExchangerModel", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HeatExchangerModel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedOutletTemperature = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedDeltaTemperature = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GasRegulationTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum GasRegulationTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedOutletPressure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CharacteristicCurve = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedInletPressure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedFlowRate = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedDeltaPressure = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedPressureRatio = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegulationTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum RegulationTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedOutletPressure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CharacteristicCurve = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedInletPressure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedFlowRate = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedDeltaPressure = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedPressureRatio = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatingRegulationTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HeatingRegulationTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedOutletPressure = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CharacteristicCurve = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedInletPressure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedFlowRate = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedDeltaPressure = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedPressureRatio = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterHydrantType", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum WaterHydrantType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantFlowRate = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantPressure = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatPlantPressureRegulation", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HeatPlantPressureRegulation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fitting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MeanRegulation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedRegulation = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatPlantProduction", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum HeatPlantProduction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantPowerTunknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantMassFlow = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConstantPower = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoPower = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkGroupTypes", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    public enum NetworkGroupTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Zone = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Feeder = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Network = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportFeederItem", Namespace="")]
    [System.SerializableAttribute()]
    public partial class ImportFeederItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PloadFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QloadFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string atElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string atNodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string colorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PloadFactor {
            get {
                return this.PloadFactorField;
            }
            set {
                if ((this.PloadFactorField.Equals(value) != true)) {
                    this.PloadFactorField = value;
                    this.RaisePropertyChanged("PloadFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QloadFactor {
            get {
                return this.QloadFactorField;
            }
            set {
                if ((this.QloadFactorField.Equals(value) != true)) {
                    this.QloadFactorField = value;
                    this.RaisePropertyChanged("QloadFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atElementName {
            get {
                return this.atElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.atElementNameField, value) != true)) {
                    this.atElementNameField = value;
                    this.RaisePropertyChanged("atElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string atNodeName {
            get {
                return this.atNodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.atNodeNameField, value) != true)) {
                    this.atNodeNameField = value;
                    this.RaisePropertyChanged("atNodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string color {
            get {
                return this.colorField;
            }
            set {
                if ((object.ReferenceEquals(this.colorField, value) != true)) {
                    this.colorField = value;
                    this.RaisePropertyChanged("color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportElementItem", Namespace="")]
    [System.SerializableAttribute()]
    public partial class ImportElementItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] BayesInStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CableOrOHLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.Consumer[] ConnectedConsumersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLabel4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesLink3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] CoordinatesSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ElevationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstallationYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsForwardNetworkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInMaintenanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProjectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LoadData LoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LogicalSwitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeName4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short OnPortNrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.PipeFittingEntry[] PipeFittingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SymbolAngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SymbolSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.TechDataValue[] TechDataValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.UserDataValue[] UserDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.WaterLoadData WaterLoadDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ZOrderNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string aliasName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string aliasName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] binaryDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string libraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string librarySubnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string libraryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string librayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LineSectionData[] listLineSectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.LoadData[] listSubLoadsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short numConnectionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short phaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool removeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double unField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> xLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlInvestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string xmlItemListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> yLocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName {
            get {
                return this.AreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaNameField, value) != true)) {
                    this.AreaNameField = value;
                    this.RaisePropertyChanged("AreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bay {
            get {
                return this.BayField;
            }
            set {
                if ((object.ReferenceEquals(this.BayField, value) != true)) {
                    this.BayField = value;
                    this.RaisePropertyChanged("Bay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] BayesInStation {
            get {
                return this.BayesInStationField;
            }
            set {
                if ((object.ReferenceEquals(this.BayesInStationField, value) != true)) {
                    this.BayesInStationField = value;
                    this.RaisePropertyChanged("BayesInStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL {
            get {
                return this.CableOrOHLField;
            }
            set {
                if ((this.CableOrOHLField.Equals(value) != true)) {
                    this.CableOrOHLField = value;
                    this.RaisePropertyChanged("CableOrOHL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.Consumer[] ConnectedConsumers {
            get {
                return this.ConnectedConsumersField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectedConsumersField, value) != true)) {
                    this.ConnectedConsumersField = value;
                    this.RaisePropertyChanged("ConnectedConsumers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel1 {
            get {
                return this.CoordinatesLabel1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel1Field, value) != true)) {
                    this.CoordinatesLabel1Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel2 {
            get {
                return this.CoordinatesLabel2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel2Field, value) != true)) {
                    this.CoordinatesLabel2Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel3 {
            get {
                return this.CoordinatesLabel3Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel3Field, value) != true)) {
                    this.CoordinatesLabel3Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLabel4 {
            get {
                return this.CoordinatesLabel4Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLabel4Field, value) != true)) {
                    this.CoordinatesLabel4Field = value;
                    this.RaisePropertyChanged("CoordinatesLabel4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink1 {
            get {
                return this.CoordinatesLink1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink1Field, value) != true)) {
                    this.CoordinatesLink1Field = value;
                    this.RaisePropertyChanged("CoordinatesLink1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink2 {
            get {
                return this.CoordinatesLink2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink2Field, value) != true)) {
                    this.CoordinatesLink2Field = value;
                    this.RaisePropertyChanged("CoordinatesLink2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesLink3 {
            get {
                return this.CoordinatesLink3Field;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesLink3Field, value) != true)) {
                    this.CoordinatesLink3Field = value;
                    this.RaisePropertyChanged("CoordinatesLink3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] CoordinatesSymbol {
            get {
                return this.CoordinatesSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesSymbolField, value) != true)) {
                    this.CoordinatesSymbolField = value;
                    this.RaisePropertyChanged("CoordinatesSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter {
            get {
                return this.DiameterField;
            }
            set {
                if ((this.DiameterField.Equals(value) != true)) {
                    this.DiameterField = value;
                    this.RaisePropertyChanged("Diameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementInfo {
            get {
                return this.ElementInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementInfoField, value) != true)) {
                    this.ElementInfoField = value;
                    this.RaisePropertyChanged("ElementInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Elevation {
            get {
                return this.ElevationField;
            }
            set {
                if ((this.ElevationField.Equals(value) != true)) {
                    this.ElevationField = value;
                    this.RaisePropertyChanged("Elevation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear {
            get {
                return this.InstallationYearField;
            }
            set {
                if ((this.InstallationYearField.Equals(value) != true)) {
                    this.InstallationYearField = value;
                    this.RaisePropertyChanged("InstallationYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsForwardNetwork {
            get {
                return this.IsForwardNetworkField;
            }
            set {
                if ((this.IsForwardNetworkField.Equals(value) != true)) {
                    this.IsForwardNetworkField = value;
                    this.RaisePropertyChanged("IsForwardNetwork");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInMaintenance {
            get {
                return this.IsInMaintenanceField;
            }
            set {
                if ((this.IsInMaintenanceField.Equals(value) != true)) {
                    this.IsInMaintenanceField = value;
                    this.RaisePropertyChanged("IsInMaintenance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProjected {
            get {
                return this.IsProjectedField;
            }
            set {
                if ((this.IsProjectedField.Equals(value) != true)) {
                    this.IsProjectedField = value;
                    this.RaisePropertyChanged("IsProjected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerName {
            get {
                return this.LayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerNameField, value) != true)) {
                    this.LayerNameField = value;
                    this.RaisePropertyChanged("LayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout {
            get {
                return this.LayoutField;
            }
            set {
                if ((this.LayoutField.Equals(value) != true)) {
                    this.LayoutField = value;
                    this.RaisePropertyChanged("Layout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LoadData Load {
            get {
                return this.LoadField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadField, value) != true)) {
                    this.LoadField = value;
                    this.RaisePropertyChanged("Load");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogicalSwitch {
            get {
                return this.LogicalSwitchField;
            }
            set {
                if ((this.LogicalSwitchField.Equals(value) != true)) {
                    this.LogicalSwitchField = value;
                    this.RaisePropertyChanged("LogicalSwitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material {
            get {
                return this.MaterialField;
            }
            set {
                if ((this.MaterialField.Equals(value) != true)) {
                    this.MaterialField = value;
                    this.RaisePropertyChanged("Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName1 {
            get {
                return this.NodeName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName1Field, value) != true)) {
                    this.NodeName1Field = value;
                    this.RaisePropertyChanged("NodeName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName2 {
            get {
                return this.NodeName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName2Field, value) != true)) {
                    this.NodeName2Field = value;
                    this.RaisePropertyChanged("NodeName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName3 {
            get {
                return this.NodeName3Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName3Field, value) != true)) {
                    this.NodeName3Field = value;
                    this.RaisePropertyChanged("NodeName3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName4 {
            get {
                return this.NodeName4Field;
            }
            set {
                if ((object.ReferenceEquals(this.NodeName4Field, value) != true)) {
                    this.NodeName4Field = value;
                    this.RaisePropertyChanged("NodeName4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short OnPortNr {
            get {
                return this.OnPortNrField;
            }
            set {
                if ((this.OnPortNrField.Equals(value) != true)) {
                    this.OnPortNrField = value;
                    this.RaisePropertyChanged("OnPortNr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.PipeFittingEntry[] PipeFittings {
            get {
                return this.PipeFittingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeFittingsField, value) != true)) {
                    this.PipeFittingsField = value;
                    this.RaisePropertyChanged("PipeFittings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubAreaName {
            get {
                return this.SubAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubAreaNameField, value) != true)) {
                    this.SubAreaNameField = value;
                    this.RaisePropertyChanged("SubAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Substation {
            get {
                return this.SubstationField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstationField, value) != true)) {
                    this.SubstationField = value;
                    this.RaisePropertyChanged("Substation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolAngle {
            get {
                return this.SymbolAngleField;
            }
            set {
                if ((this.SymbolAngleField.Equals(value) != true)) {
                    this.SymbolAngleField = value;
                    this.RaisePropertyChanged("SymbolAngle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolName {
            get {
                return this.SymbolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolNameField, value) != true)) {
                    this.SymbolNameField = value;
                    this.RaisePropertyChanged("SymbolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SymbolSize {
            get {
                return this.SymbolSizeField;
            }
            set {
                if ((this.SymbolSizeField.Equals(value) != true)) {
                    this.SymbolSizeField = value;
                    this.RaisePropertyChanged("SymbolSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.TechDataValue[] TechDataValues {
            get {
                return this.TechDataValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.TechDataValuesField, value) != true)) {
                    this.TechDataValuesField = value;
                    this.RaisePropertyChanged("TechDataValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.UserDataValue[] UserData {
            get {
                return this.UserDataField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDataField, value) != true)) {
                    this.UserDataField = value;
                    this.RaisePropertyChanged("UserData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.WaterLoadData WaterLoadData {
            get {
                return this.WaterLoadDataField;
            }
            set {
                if ((object.ReferenceEquals(this.WaterLoadDataField, value) != true)) {
                    this.WaterLoadDataField = value;
                    this.RaisePropertyChanged("WaterLoadData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ZOrderNum {
            get {
                return this.ZOrderNumField;
            }
            set {
                if ((this.ZOrderNumField.Equals(value) != true)) {
                    this.ZOrderNumField = value;
                    this.RaisePropertyChanged("ZOrderNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName {
            get {
                return this.ZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneNameField, value) != true)) {
                    this.ZoneNameField = value;
                    this.RaisePropertyChanged("ZoneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName1 {
            get {
                return this.aliasName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.aliasName1Field, value) != true)) {
                    this.aliasName1Field = value;
                    this.RaisePropertyChanged("aliasName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string aliasName2 {
            get {
                return this.aliasName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.aliasName2Field, value) != true)) {
                    this.aliasName2Field = value;
                    this.RaisePropertyChanged("aliasName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                if ((object.ReferenceEquals(this.binaryDataField, value) != true)) {
                    this.binaryDataField = value;
                    this.RaisePropertyChanged("binaryData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementType {
            get {
                return this.elementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.elementTypeField, value) != true)) {
                    this.elementTypeField = value;
                    this.RaisePropertyChanged("elementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double length {
            get {
                return this.lengthField;
            }
            set {
                if ((this.lengthField.Equals(value) != true)) {
                    this.lengthField = value;
                    this.RaisePropertyChanged("length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryName {
            get {
                return this.libraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.libraryNameField, value) != true)) {
                    this.libraryNameField = value;
                    this.RaisePropertyChanged("libraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librarySubname {
            get {
                return this.librarySubnameField;
            }
            set {
                if ((object.ReferenceEquals(this.librarySubnameField, value) != true)) {
                    this.librarySubnameField = value;
                    this.RaisePropertyChanged("librarySubname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string libraryType {
            get {
                return this.libraryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.libraryTypeField, value) != true)) {
                    this.libraryTypeField = value;
                    this.RaisePropertyChanged("libraryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string librayType {
            get {
                return this.librayTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.librayTypeField, value) != true)) {
                    this.librayTypeField = value;
                    this.RaisePropertyChanged("librayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LineSectionData[] listLineSections {
            get {
                return this.listLineSectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.listLineSectionsField, value) != true)) {
                    this.listLineSectionsField = value;
                    this.RaisePropertyChanged("listLineSections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.LoadData[] listSubLoads {
            get {
                return this.listSubLoadsField;
            }
            set {
                if ((object.ReferenceEquals(this.listSubLoadsField, value) != true)) {
                    this.listSubLoadsField = value;
                    this.RaisePropertyChanged("listSubLoads");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short numConnections {
            get {
                return this.numConnectionsField;
            }
            set {
                if ((this.numConnectionsField.Equals(value) != true)) {
                    this.numConnectionsField = value;
                    this.RaisePropertyChanged("numConnections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short phase {
            get {
                return this.phaseField;
            }
            set {
                if ((this.phaseField.Equals(value) != true)) {
                    this.phaseField = value;
                    this.RaisePropertyChanged("phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool remove {
            get {
                return this.removeField;
            }
            set {
                if ((this.removeField.Equals(value) != true)) {
                    this.removeField = value;
                    this.RaisePropertyChanged("remove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double un {
            get {
                return this.unField;
            }
            set {
                if ((this.unField.Equals(value) != true)) {
                    this.unField = value;
                    this.RaisePropertyChanged("un");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> xLocation {
            get {
                return this.xLocationField;
            }
            set {
                if ((this.xLocationField.Equals(value) != true)) {
                    this.xLocationField = value;
                    this.RaisePropertyChanged("xLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlData {
            get {
                return this.xmlDataField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlDataField, value) != true)) {
                    this.xmlDataField = value;
                    this.RaisePropertyChanged("xmlData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlInvest {
            get {
                return this.xmlInvestField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlInvestField, value) != true)) {
                    this.xmlInvestField = value;
                    this.RaisePropertyChanged("xmlInvest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string xmlItemList {
            get {
                return this.xmlItemListField;
            }
            set {
                if ((object.ReferenceEquals(this.xmlItemListField, value) != true)) {
                    this.xmlItemListField = value;
                    this.RaisePropertyChanged("xmlItemList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> yLocation {
            get {
                return this.yLocationField;
            }
            set {
                if ((this.yLocationField.Equals(value) != true)) {
                    this.yLocationField = value;
                    this.RaisePropertyChanged("yLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class LoadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LfTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumCustomersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Value1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Value2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((this.ConnectionTypeField.Equals(value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LfType {
            get {
                return this.LfTypeField;
            }
            set {
                if ((this.LfTypeField.Equals(value) != true)) {
                    this.LfTypeField = value;
                    this.RaisePropertyChanged("LfType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumCustomers {
            get {
                return this.NumCustomersField;
            }
            set {
                if ((this.NumCustomersField.Equals(value) != true)) {
                    this.NumCustomersField = value;
                    this.RaisePropertyChanged("NumCustomers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value1 {
            get {
                return this.Value1Field;
            }
            set {
                if ((this.Value1Field.Equals(value) != true)) {
                    this.Value1Field = value;
                    this.RaisePropertyChanged("Value1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value2 {
            get {
                return this.Value2Field;
            }
            set {
                if ((this.Value2Field.Equals(value) != true)) {
                    this.Value2Field = value;
                    this.RaisePropertyChanged("Value2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WaterLoadData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class WaterLoadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoadTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short QunitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadType {
            get {
                return this.LoadTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadTypeField, value) != true)) {
                    this.LoadTypeField = value;
                    this.RaisePropertyChanged("LoadType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QDemand {
            get {
                return this.QDemandField;
            }
            set {
                if ((this.QDemandField.Equals(value) != true)) {
                    this.QDemandField = value;
                    this.RaisePropertyChanged("QDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Qunit {
            get {
                return this.QunitField;
            }
            set {
                if ((this.QunitField.Equals(value) != true)) {
                    this.QunitField = value;
                    this.RaisePropertyChanged("Qunit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Consumer", Namespace="")]
    [System.SerializableAttribute()]
    public partial class Consumer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConnectionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DemandFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DemandFactorTauField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DemandTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short DemandUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProfileActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UnitsLabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConnectionStatus {
            get {
                return this.ConnectionStatusField;
            }
            set {
                if ((this.ConnectionStatusField.Equals(value) != true)) {
                    this.ConnectionStatusField = value;
                    this.RaisePropertyChanged("ConnectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Demand {
            get {
                return this.DemandField;
            }
            set {
                if ((this.DemandField.Equals(value) != true)) {
                    this.DemandField = value;
                    this.RaisePropertyChanged("Demand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DemandFactor {
            get {
                return this.DemandFactorField;
            }
            set {
                if ((this.DemandFactorField.Equals(value) != true)) {
                    this.DemandFactorField = value;
                    this.RaisePropertyChanged("DemandFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DemandFactorTau {
            get {
                return this.DemandFactorTauField;
            }
            set {
                if ((this.DemandFactorTauField.Equals(value) != true)) {
                    this.DemandFactorTauField = value;
                    this.RaisePropertyChanged("DemandFactorTau");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DemandType {
            get {
                return this.DemandTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DemandTypeField, value) != true)) {
                    this.DemandTypeField = value;
                    this.RaisePropertyChanged("DemandType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short DemandUnits {
            get {
                return this.DemandUnitsField;
            }
            set {
                if ((this.DemandUnitsField.Equals(value) != true)) {
                    this.DemandUnitsField = value;
                    this.RaisePropertyChanged("DemandUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProfileActive {
            get {
                return this.IsProfileActiveField;
            }
            set {
                if ((this.IsProfileActiveField.Equals(value) != true)) {
                    this.IsProfileActiveField = value;
                    this.RaisePropertyChanged("IsProfileActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UnitsLabel {
            get {
                return this.UnitsLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsLabelField, value) != true)) {
                    this.UnitsLabelField = value;
                    this.RaisePropertyChanged("UnitsLabel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PipeFittingEntry", Namespace="")]
    [System.SerializableAttribute()]
    public partial class PipeFittingEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Branch1NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Branch2NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CorrectionFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InletDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFittingEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OutletDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RadiusCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusDiameterRatioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RatioCheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SelectedGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectedGroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SelectedMethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectedMethodNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SelectedSubTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SelectedTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectedTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseConstantCoefficientsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Branch1Name {
            get {
                return this.Branch1NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Branch1NameField, value) != true)) {
                    this.Branch1NameField = value;
                    this.RaisePropertyChanged("Branch1Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Branch2Name {
            get {
                return this.Branch2NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Branch2NameField, value) != true)) {
                    this.Branch2NameField = value;
                    this.RaisePropertyChanged("Branch2Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CorrectionFactor {
            get {
                return this.CorrectionFactorField;
            }
            set {
                if ((this.CorrectionFactorField.Equals(value) != true)) {
                    this.CorrectionFactorField = value;
                    this.RaisePropertyChanged("CorrectionFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InletDiameter {
            get {
                return this.InletDiameterField;
            }
            set {
                if ((this.InletDiameterField.Equals(value) != true)) {
                    this.InletDiameterField = value;
                    this.RaisePropertyChanged("InletDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFittingEnabled {
            get {
                return this.IsFittingEnabledField;
            }
            set {
                if ((this.IsFittingEnabledField.Equals(value) != true)) {
                    this.IsFittingEnabledField = value;
                    this.RaisePropertyChanged("IsFittingEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OutletDiameter {
            get {
                return this.OutletDiameterField;
            }
            set {
                if ((this.OutletDiameterField.Equals(value) != true)) {
                    this.OutletDiameterField = value;
                    this.RaisePropertyChanged("OutletDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RadiusChecked {
            get {
                return this.RadiusCheckedField;
            }
            set {
                if ((this.RadiusCheckedField.Equals(value) != true)) {
                    this.RadiusCheckedField = value;
                    this.RaisePropertyChanged("RadiusChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RadiusDiameterRatio {
            get {
                return this.RadiusDiameterRatioField;
            }
            set {
                if ((this.RadiusDiameterRatioField.Equals(value) != true)) {
                    this.RadiusDiameterRatioField = value;
                    this.RaisePropertyChanged("RadiusDiameterRatio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RatioChecked {
            get {
                return this.RatioCheckedField;
            }
            set {
                if ((this.RatioCheckedField.Equals(value) != true)) {
                    this.RatioCheckedField = value;
                    this.RaisePropertyChanged("RatioChecked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedGroup {
            get {
                return this.SelectedGroupField;
            }
            set {
                if ((this.SelectedGroupField.Equals(value) != true)) {
                    this.SelectedGroupField = value;
                    this.RaisePropertyChanged("SelectedGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedGroupName {
            get {
                return this.SelectedGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedGroupNameField, value) != true)) {
                    this.SelectedGroupNameField = value;
                    this.RaisePropertyChanged("SelectedGroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedMethod {
            get {
                return this.SelectedMethodField;
            }
            set {
                if ((this.SelectedMethodField.Equals(value) != true)) {
                    this.SelectedMethodField = value;
                    this.RaisePropertyChanged("SelectedMethod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedMethodName {
            get {
                return this.SelectedMethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedMethodNameField, value) != true)) {
                    this.SelectedMethodNameField = value;
                    this.RaisePropertyChanged("SelectedMethodName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedSubType {
            get {
                return this.SelectedSubTypeField;
            }
            set {
                if ((this.SelectedSubTypeField.Equals(value) != true)) {
                    this.SelectedSubTypeField = value;
                    this.RaisePropertyChanged("SelectedSubType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SelectedType {
            get {
                return this.SelectedTypeField;
            }
            set {
                if ((this.SelectedTypeField.Equals(value) != true)) {
                    this.SelectedTypeField = value;
                    this.RaisePropertyChanged("SelectedType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectedTypeName {
            get {
                return this.SelectedTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedTypeNameField, value) != true)) {
                    this.SelectedTypeNameField = value;
                    this.RaisePropertyChanged("SelectedTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseConstantCoefficients {
            get {
                return this.UseConstantCoefficientsField;
            }
            set {
                if ((this.UseConstantCoefficientsField.Equals(value) != true)) {
                    this.UseConstantCoefficientsField = value;
                    this.RaisePropertyChanged("UseConstantCoefficients");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TechDataValue", Namespace="")]
    [System.SerializableAttribute()]
    public partial class TechDataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VariableName {
            get {
                return this.VariableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VariableNameField, value) != true)) {
                    this.VariableNameField = value;
                    this.RaisePropertyChanged("VariableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDataValue", Namespace="")]
    [System.SerializableAttribute()]
    public partial class UserDataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserDataDefinitionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserDataDefinitionName {
            get {
                return this.UserDataDefinitionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDataDefinitionNameField, value) != true)) {
                    this.UserDataDefinitionNameField = value;
                    this.RaisePropertyChanged("UserDataDefinitionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineSectionData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External")]
    [System.SerializableAttribute()]
    public partial class LineSectionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short CableOrOHLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstallationYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LayoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.TechDataValue[] TechDataValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short CableOrOHL {
            get {
                return this.CableOrOHLField;
            }
            set {
                if ((this.CableOrOHLField.Equals(value) != true)) {
                    this.CableOrOHLField = value;
                    this.RaisePropertyChanged("CableOrOHL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter {
            get {
                return this.DiameterField;
            }
            set {
                if ((this.DiameterField.Equals(value) != true)) {
                    this.DiameterField = value;
                    this.RaisePropertyChanged("Diameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstallationYear {
            get {
                return this.InstallationYearField;
            }
            set {
                if ((this.InstallationYearField.Equals(value) != true)) {
                    this.InstallationYearField = value;
                    this.RaisePropertyChanged("InstallationYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Layout {
            get {
                return this.LayoutField;
            }
            set {
                if ((this.LayoutField.Equals(value) != true)) {
                    this.LayoutField = value;
                    this.RaisePropertyChanged("Layout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryType {
            get {
                return this.LibraryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryTypeField, value) != true)) {
                    this.LibraryTypeField = value;
                    this.RaisePropertyChanged("LibraryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Material {
            get {
                return this.MaterialField;
            }
            set {
                if ((this.MaterialField.Equals(value) != true)) {
                    this.MaterialField = value;
                    this.RaisePropertyChanged("Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.TechDataValue[] TechDataValues {
            get {
                return this.TechDataValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.TechDataValuesField, value) != true)) {
                    this.TechDataValuesField = value;
                    this.RaisePropertyChanged("TechDataValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReturnCode", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceControl")]
    public enum ReturnCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Successfull = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.Connection_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceConnection_info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoordinateXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoordinateYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_Connection_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Elem_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MPRNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhasesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionStatus {
            get {
                return this.ConnectionStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStatusField, value) != true)) {
                    this.ConnectionStatusField = value;
                    this.RaisePropertyChanged("ConnectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateX {
            get {
                return this.CoordinateXField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateXField, value) != true)) {
                    this.CoordinateXField = value;
                    this.RaisePropertyChanged("CoordinateX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoordinateY {
            get {
                return this.CoordinateYField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinateYField, value) != true)) {
                    this.CoordinateYField = value;
                    this.RaisePropertyChanged("CoordinateY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_Connection_ID {
            get {
                return this.Elem_Connection_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_Connection_IDField, value) != true)) {
                    this.Elem_Connection_IDField = value;
                    this.RaisePropertyChanged("Elem_Connection_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_ID {
            get {
                return this.Elem_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_IDField, value) != true)) {
                    this.Elem_IDField = value;
                    this.RaisePropertyChanged("Elem_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Elem_Name {
            get {
                return this.Elem_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Elem_NameField, value) != true)) {
                    this.Elem_NameField = value;
                    this.RaisePropertyChanged("Elem_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementTypeField, value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MPRN {
            get {
                return this.MPRNField;
            }
            set {
                if ((object.ReferenceEquals(this.MPRNField, value) != true)) {
                    this.MPRNField = value;
                    this.RaisePropertyChanged("MPRN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phases {
            get {
                return this.PhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasesField, value) != true)) {
                    this.PhasesField = value;
                    this.RaisePropertyChanged("Phases");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanService.LoadGeneration_info", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class NeplanServiceLoadGeneration_info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string elementtypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid elemidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementname {
            get {
                return this.elementnameField;
            }
            set {
                if ((object.ReferenceEquals(this.elementnameField, value) != true)) {
                    this.elementnameField = value;
                    this.RaisePropertyChanged("elementname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string elementtype {
            get {
                return this.elementtypeField;
            }
            set {
                if ((object.ReferenceEquals(this.elementtypeField, value) != true)) {
                    this.elementtypeField = value;
                    this.RaisePropertyChanged("elementtype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid elemid {
            get {
                return this.elemidField;
            }
            set {
                if ((this.elemidField.Equals(value) != true)) {
                    this.elemidField = value;
                    this.RaisePropertyChanged("elemid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanDomainService.ImportReturnInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services")]
    [System.SerializableAttribute()]
    public partial class NeplanDomainServiceImportReturnInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.NeplanDomainServiceFileAsByte FileStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] LogInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReturnValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScenarioTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string actualCreatedProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string actualCreatedProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> dictFileNamesToFileIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> dictMAStoFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string variantIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] wrongTPNodesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationTimeField, value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceFileAsByte FileStream {
            get {
                return this.FileStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.FileStreamField, value) != true)) {
                    this.FileStreamField = value;
                    this.RaisePropertyChanged("FileStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] LogInfo {
            get {
                return this.LogInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogInfoField, value) != true)) {
                    this.LogInfoField = value;
                    this.RaisePropertyChanged("LogInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReturnValue {
            get {
                return this.ReturnValueField;
            }
            set {
                if ((this.ReturnValueField.Equals(value) != true)) {
                    this.ReturnValueField = value;
                    this.RaisePropertyChanged("ReturnValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScenarioTime {
            get {
                return this.ScenarioTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScenarioTimeField, value) != true)) {
                    this.ScenarioTimeField = value;
                    this.RaisePropertyChanged("ScenarioTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string actualCreatedProjectID {
            get {
                return this.actualCreatedProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.actualCreatedProjectIDField, value) != true)) {
                    this.actualCreatedProjectIDField = value;
                    this.RaisePropertyChanged("actualCreatedProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string actualCreatedProjectName {
            get {
                return this.actualCreatedProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.actualCreatedProjectNameField, value) != true)) {
                    this.actualCreatedProjectNameField = value;
                    this.RaisePropertyChanged("actualCreatedProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> dictFileNamesToFileIDs {
            get {
                return this.dictFileNamesToFileIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.dictFileNamesToFileIDsField, value) != true)) {
                    this.dictFileNamesToFileIDsField = value;
                    this.RaisePropertyChanged("dictFileNamesToFileIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> dictMAStoFileName {
            get {
                return this.dictMAStoFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.dictMAStoFileNameField, value) != true)) {
                    this.dictMAStoFileNameField = value;
                    this.RaisePropertyChanged("dictMAStoFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string variantID {
            get {
                return this.variantIDField;
            }
            set {
                if ((object.ReferenceEquals(this.variantIDField, value) != true)) {
                    this.variantIDField = value;
                    this.RaisePropertyChanged("variantID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] wrongTPNodes {
            get {
                return this.wrongTPNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.wrongTPNodesField, value) != true)) {
                    this.wrongTPNodesField = value;
                    this.RaisePropertyChanged("wrongTPNodes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeplanDomainService.FileAsByte", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services")]
    [System.SerializableAttribute()]
    public partial class NeplanDomainServiceFileAsByte : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] logDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] logData {
            get {
                return this.logDataField;
            }
            set {
                if ((object.ReferenceEquals(this.logDataField, value) != true)) {
                    this.logDataField = value;
                    this.RaisePropertyChanged("logData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalFeeder", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class ExternalFeeder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AtElementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AtNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> PGenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> PLoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> QCapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> QGenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> QIndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> QLoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SourceVoltageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AtElement {
            get {
                return this.AtElementField;
            }
            set {
                if ((object.ReferenceEquals(this.AtElementField, value) != true)) {
                    this.AtElementField = value;
                    this.RaisePropertyChanged("AtElement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AtNode {
            get {
                return this.AtNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AtNodeField, value) != true)) {
                    this.AtNodeField = value;
                    this.RaisePropertyChanged("AtNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> PGen {
            get {
                return this.PGenField;
            }
            set {
                if ((this.PGenField.Equals(value) != true)) {
                    this.PGenField = value;
                    this.RaisePropertyChanged("PGen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> PLoad {
            get {
                return this.PLoadField;
            }
            set {
                if ((this.PLoadField.Equals(value) != true)) {
                    this.PLoadField = value;
                    this.RaisePropertyChanged("PLoad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> QCap {
            get {
                return this.QCapField;
            }
            set {
                if ((this.QCapField.Equals(value) != true)) {
                    this.QCapField = value;
                    this.RaisePropertyChanged("QCap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> QGen {
            get {
                return this.QGenField;
            }
            set {
                if ((this.QGenField.Equals(value) != true)) {
                    this.QGenField = value;
                    this.RaisePropertyChanged("QGen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> QInd {
            get {
                return this.QIndField;
            }
            set {
                if ((this.QIndField.Equals(value) != true)) {
                    this.QIndField = value;
                    this.RaisePropertyChanged("QInd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> QLoad {
            get {
                return this.QLoadField;
            }
            set {
                if ((this.QLoadField.Equals(value) != true)) {
                    this.QLoadField = value;
                    this.RaisePropertyChanged("QLoad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SourceVoltage {
            get {
                return this.SourceVoltageField;
            }
            set {
                if ((this.SourceVoltageField.Equals(value) != true)) {
                    this.SourceVoltageField = value;
                    this.RaisePropertyChanged("SourceVoltage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalTopologyInfo", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class ExternalTopologyInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FeederIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeederNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartialNetworkFedForGWHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartialNetworkFedForLoadFlowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartialNetworkFedForShortCircuitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PartialNetworkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartialNetworkIsEarthedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartialNetworkNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartialNetworkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubareaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubareaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ZoneIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AreaID {
            get {
                return this.AreaIDField;
            }
            set {
                if ((this.AreaIDField.Equals(value) != true)) {
                    this.AreaIDField = value;
                    this.RaisePropertyChanged("AreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreaName {
            get {
                return this.AreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreaNameField, value) != true)) {
                    this.AreaNameField = value;
                    this.RaisePropertyChanged("AreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FeederID {
            get {
                return this.FeederIDField;
            }
            set {
                if ((this.FeederIDField.Equals(value) != true)) {
                    this.FeederIDField = value;
                    this.RaisePropertyChanged("FeederID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeederName {
            get {
                return this.FeederNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FeederNameField, value) != true)) {
                    this.FeederNameField = value;
                    this.RaisePropertyChanged("FeederName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartialNetworkFedForGWH {
            get {
                return this.PartialNetworkFedForGWHField;
            }
            set {
                if ((this.PartialNetworkFedForGWHField.Equals(value) != true)) {
                    this.PartialNetworkFedForGWHField = value;
                    this.RaisePropertyChanged("PartialNetworkFedForGWH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartialNetworkFedForLoadFlow {
            get {
                return this.PartialNetworkFedForLoadFlowField;
            }
            set {
                if ((this.PartialNetworkFedForLoadFlowField.Equals(value) != true)) {
                    this.PartialNetworkFedForLoadFlowField = value;
                    this.RaisePropertyChanged("PartialNetworkFedForLoadFlow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartialNetworkFedForShortCircuit {
            get {
                return this.PartialNetworkFedForShortCircuitField;
            }
            set {
                if ((this.PartialNetworkFedForShortCircuitField.Equals(value) != true)) {
                    this.PartialNetworkFedForShortCircuitField = value;
                    this.RaisePropertyChanged("PartialNetworkFedForShortCircuit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PartialNetworkID {
            get {
                return this.PartialNetworkIDField;
            }
            set {
                if ((this.PartialNetworkIDField.Equals(value) != true)) {
                    this.PartialNetworkIDField = value;
                    this.RaisePropertyChanged("PartialNetworkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartialNetworkIsEarthed {
            get {
                return this.PartialNetworkIsEarthedField;
            }
            set {
                if ((this.PartialNetworkIsEarthedField.Equals(value) != true)) {
                    this.PartialNetworkIsEarthedField = value;
                    this.RaisePropertyChanged("PartialNetworkIsEarthed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartialNetworkName {
            get {
                return this.PartialNetworkNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialNetworkNameField, value) != true)) {
                    this.PartialNetworkNameField = value;
                    this.RaisePropertyChanged("PartialNetworkName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartialNetworkNumber {
            get {
                return this.PartialNetworkNumberField;
            }
            set {
                if ((this.PartialNetworkNumberField.Equals(value) != true)) {
                    this.PartialNetworkNumberField = value;
                    this.RaisePropertyChanged("PartialNetworkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubareaID {
            get {
                return this.SubareaIDField;
            }
            set {
                if ((this.SubareaIDField.Equals(value) != true)) {
                    this.SubareaIDField = value;
                    this.RaisePropertyChanged("SubareaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubareaName {
            get {
                return this.SubareaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubareaNameField, value) != true)) {
                    this.SubareaNameField = value;
                    this.RaisePropertyChanged("SubareaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ZoneID {
            get {
                return this.ZoneIDField;
            }
            set {
                if ((this.ZoneIDField.Equals(value) != true)) {
                    this.ZoneIDField = value;
                    this.RaisePropertyChanged("ZoneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName {
            get {
                return this.ZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneNameField, value) != true)) {
                    this.ZoneNameField = value;
                    this.RaisePropertyChanged("ZoneName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CimExportOptions", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Helpers.CimInterface")]
    [System.SerializableAttribute()]
    public partial class CimExportOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] AreasToExportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AreasToExportNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BalticRSCExportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoundaryAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoundaryPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DynamicLineRatingPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ENTSOEZIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EqFileCIMIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeBRELLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportAsCGMES3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportBoundaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportDLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportDYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportEQField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportGLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportMergedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportSSHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportSVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportSVShortCircuitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExportTPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileHeaderCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAutomatedExportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool KeepEQIDConstantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MASField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScenarioDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] AreasToExport {
            get {
                return this.AreasToExportField;
            }
            set {
                if ((object.ReferenceEquals(this.AreasToExportField, value) != true)) {
                    this.AreasToExportField = value;
                    this.RaisePropertyChanged("AreasToExport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AreasToExportNames {
            get {
                return this.AreasToExportNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AreasToExportNamesField, value) != true)) {
                    this.AreasToExportNamesField = value;
                    this.RaisePropertyChanged("AreasToExportNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BalticRSCExport {
            get {
                return this.BalticRSCExportField;
            }
            set {
                if ((this.BalticRSCExportField.Equals(value) != true)) {
                    this.BalticRSCExportField = value;
                    this.RaisePropertyChanged("BalticRSCExport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BoundaryAreaName {
            get {
                return this.BoundaryAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BoundaryAreaNameField, value) != true)) {
                    this.BoundaryAreaNameField = value;
                    this.RaisePropertyChanged("BoundaryAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BoundaryPath {
            get {
                return this.BoundaryPathField;
            }
            set {
                if ((object.ReferenceEquals(this.BoundaryPathField, value) != true)) {
                    this.BoundaryPathField = value;
                    this.RaisePropertyChanged("BoundaryPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DynamicLineRatingPath {
            get {
                return this.DynamicLineRatingPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicLineRatingPathField, value) != true)) {
                    this.DynamicLineRatingPathField = value;
                    this.RaisePropertyChanged("DynamicLineRatingPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ENTSOEZIP {
            get {
                return this.ENTSOEZIPField;
            }
            set {
                if ((this.ENTSOEZIPField.Equals(value) != true)) {
                    this.ENTSOEZIPField = value;
                    this.RaisePropertyChanged("ENTSOEZIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EqFileCIMID {
            get {
                return this.EqFileCIMIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EqFileCIMIDField, value) != true)) {
                    this.EqFileCIMIDField = value;
                    this.RaisePropertyChanged("EqFileCIMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeBRELL {
            get {
                return this.ExcludeBRELLField;
            }
            set {
                if ((this.ExcludeBRELLField.Equals(value) != true)) {
                    this.ExcludeBRELLField = value;
                    this.RaisePropertyChanged("ExcludeBRELL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportAsCGMES3 {
            get {
                return this.ExportAsCGMES3Field;
            }
            set {
                if ((this.ExportAsCGMES3Field.Equals(value) != true)) {
                    this.ExportAsCGMES3Field = value;
                    this.RaisePropertyChanged("ExportAsCGMES3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportBoundary {
            get {
                return this.ExportBoundaryField;
            }
            set {
                if ((this.ExportBoundaryField.Equals(value) != true)) {
                    this.ExportBoundaryField = value;
                    this.RaisePropertyChanged("ExportBoundary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportDL {
            get {
                return this.ExportDLField;
            }
            set {
                if ((this.ExportDLField.Equals(value) != true)) {
                    this.ExportDLField = value;
                    this.RaisePropertyChanged("ExportDL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportDY {
            get {
                return this.ExportDYField;
            }
            set {
                if ((this.ExportDYField.Equals(value) != true)) {
                    this.ExportDYField = value;
                    this.RaisePropertyChanged("ExportDY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportEQ {
            get {
                return this.ExportEQField;
            }
            set {
                if ((this.ExportEQField.Equals(value) != true)) {
                    this.ExportEQField = value;
                    this.RaisePropertyChanged("ExportEQ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportGL {
            get {
                return this.ExportGLField;
            }
            set {
                if ((this.ExportGLField.Equals(value) != true)) {
                    this.ExportGLField = value;
                    this.RaisePropertyChanged("ExportGL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportMerged {
            get {
                return this.ExportMergedField;
            }
            set {
                if ((this.ExportMergedField.Equals(value) != true)) {
                    this.ExportMergedField = value;
                    this.RaisePropertyChanged("ExportMerged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportSSH {
            get {
                return this.ExportSSHField;
            }
            set {
                if ((this.ExportSSHField.Equals(value) != true)) {
                    this.ExportSSHField = value;
                    this.RaisePropertyChanged("ExportSSH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportSV {
            get {
                return this.ExportSVField;
            }
            set {
                if ((this.ExportSVField.Equals(value) != true)) {
                    this.ExportSVField = value;
                    this.RaisePropertyChanged("ExportSV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportSVShortCircuit {
            get {
                return this.ExportSVShortCircuitField;
            }
            set {
                if ((this.ExportSVShortCircuitField.Equals(value) != true)) {
                    this.ExportSVShortCircuitField = value;
                    this.RaisePropertyChanged("ExportSVShortCircuit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExportTP {
            get {
                return this.ExportTPField;
            }
            set {
                if ((this.ExportTPField.Equals(value) != true)) {
                    this.ExportTPField = value;
                    this.RaisePropertyChanged("ExportTP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileHeaderComment {
            get {
                return this.FileHeaderCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.FileHeaderCommentField, value) != true)) {
                    this.FileHeaderCommentField = value;
                    this.RaisePropertyChanged("FileHeaderComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAutomatedExport {
            get {
                return this.IsAutomatedExportField;
            }
            set {
                if ((this.IsAutomatedExportField.Equals(value) != true)) {
                    this.IsAutomatedExportField = value;
                    this.RaisePropertyChanged("IsAutomatedExport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeepEQIDConstant {
            get {
                return this.KeepEQIDConstantField;
            }
            set {
                if ((this.KeepEQIDConstantField.Equals(value) != true)) {
                    this.KeepEQIDConstantField = value;
                    this.RaisePropertyChanged("KeepEQIDConstant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExport {
            get {
                return this.ListOfMASForSVExportField;
            }
            set {
                if ((object.ReferenceEquals(this.ListOfMASForSVExportField, value) != true)) {
                    this.ListOfMASForSVExportField = value;
                    this.RaisePropertyChanged("ListOfMASForSVExport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MAS {
            get {
                return this.MASField;
            }
            set {
                if ((object.ReferenceEquals(this.MASField, value) != true)) {
                    this.MASField = value;
                    this.RaisePropertyChanged("MAS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScenarioDateTime {
            get {
                return this.ScenarioDateTimeField;
            }
            set {
                if ((this.ScenarioDateTimeField.Equals(value) != true)) {
                    this.ScenarioDateTimeField = value;
                    this.RaisePropertyChanged("ScenarioDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperDataTopologyData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Models.External.TechData")]
    [System.SerializableAttribute()]
    public partial class OperDataTopologyData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Switch1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Switch2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Switch3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Switch4Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementName {
            get {
                return this.ElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementNameField, value) != true)) {
                    this.ElementNameField = value;
                    this.RaisePropertyChanged("ElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementTypeField, value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Switch1 {
            get {
                return this.Switch1Field;
            }
            set {
                if ((this.Switch1Field.Equals(value) != true)) {
                    this.Switch1Field = value;
                    this.RaisePropertyChanged("Switch1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Switch2 {
            get {
                return this.Switch2Field;
            }
            set {
                if ((this.Switch2Field.Equals(value) != true)) {
                    this.Switch2Field = value;
                    this.RaisePropertyChanged("Switch2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Switch3 {
            get {
                return this.Switch3Field;
            }
            set {
                if ((this.Switch3Field.Equals(value) != true)) {
                    this.Switch3Field = value;
                    this.RaisePropertyChanged("Switch3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Switch4 {
            get {
                return this.Switch4Field;
            }
            set {
                if ((this.Switch4Field.Equals(value) != true)) {
                    this.Switch4Field = value;
                    this.RaisePropertyChanged("Switch4");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeDependentPointItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class TimeDependentPointItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.TimeDependentPoint[] AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.TimeDependentPoint[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeDependentPoint", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class TimeDependentPoint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string attributeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAbsoluteUnitValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime scenarioTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double valueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string attributeName {
            get {
                return this.attributeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.attributeNameField, value) != true)) {
                    this.attributeNameField = value;
                    this.RaisePropertyChanged("attributeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAbsoluteUnitValue {
            get {
                return this.isAbsoluteUnitValueField;
            }
            set {
                if ((this.isAbsoluteUnitValueField.Equals(value) != true)) {
                    this.isAbsoluteUnitValueField = value;
                    this.RaisePropertyChanged("isAbsoluteUnitValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime scenarioTime {
            get {
                return this.scenarioTimeField;
            }
            set {
                if ((this.scenarioTimeField.Equals(value) != true)) {
                    this.scenarioTimeField = value;
                    this.RaisePropertyChanged("scenarioTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField.Equals(value) != true)) {
                    this.valueField = value;
                    this.RaisePropertyChanged("value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TechDataCalcSetting", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class TechDataCalcSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.Limits ContingencyLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.Limits NTCLimitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.Limits ContingencyLimit {
            get {
                return this.ContingencyLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.ContingencyLimitField, value) != true)) {
                    this.ContingencyLimitField = value;
                    this.RaisePropertyChanged("ContingencyLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsSelected {
            get {
                return this.IsSelectedField;
            }
            set {
                if ((this.IsSelectedField.Equals(value) != true)) {
                    this.IsSelectedField = value;
                    this.RaisePropertyChanged("IsSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.Limits NTCLimit {
            get {
                return this.NTCLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.NTCLimitField, value) != true)) {
                    this.NTCLimitField = value;
                    this.RaisePropertyChanged("NTCLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Limits", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class Limits : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UmaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UminField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Umax {
            get {
                return this.UmaxField;
            }
            set {
                if ((this.UmaxField.Equals(value) != true)) {
                    this.UmaxField = value;
                    this.RaisePropertyChanged("Umax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Umin {
            get {
                return this.UminField;
            }
            set {
                if ((this.UminField.Equals(value) != true)) {
                    this.UminField = value;
                    this.RaisePropertyChanged("Umin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShortCircuitLocation", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShortCircuitLineLocation))]
    public partial class ShortCircuitLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.FaultType FaultTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFaultLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.TypeIEC TypeIECField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.FaultType FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((this.FaultTypeField.Equals(value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFaultLocation {
            get {
                return this.IsFaultLocationField;
            }
            set {
                if ((this.IsFaultLocationField.Equals(value) != true)) {
                    this.IsFaultLocationField = value;
                    this.RaisePropertyChanged("IsFaultLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.TypeIEC TypeIEC {
            get {
                return this.TypeIECField;
            }
            set {
                if ((this.TypeIECField.Equals(value) != true)) {
                    this.TypeIECField = value;
                    this.RaisePropertyChanged("TypeIEC");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShortCircuitLineLocation", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class ShortCircuitLineLocation : Neplan_coordinacion.NeplanService.ShortCircuitLocation {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistanceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultType", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    public enum FaultType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenNear = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenFar = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeIEC", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    public enum TypeIEC : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Meshed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonMeshed = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommonModeItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class CommonModeItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommonModeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SelectedElementsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommonModeName {
            get {
                return this.CommonModeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CommonModeNameField, value) != true)) {
                    this.CommonModeNameField = value;
                    this.RaisePropertyChanged("CommonModeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SelectedElements {
            get {
                return this.SelectedElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectedElementsField, value) != true)) {
                    this.SelectedElementsField = value;
                    this.RaisePropertyChanged("SelectedElements");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateLibraryElement", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class UpdateLibraryElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibrarySubNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibrarySubName {
            get {
                return this.LibrarySubNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibrarySubNameField, value) != true)) {
                    this.LibrarySubNameField = value;
                    this.RaisePropertyChanged("LibrarySubName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryType {
            get {
                return this.LibraryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryTypeField, value) != true)) {
                    this.LibraryTypeField = value;
                    this.RaisePropertyChanged("LibraryType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphicLayerPropertiesItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class GraphicLayerPropertiesItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowSelectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowSizeChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveForColoringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFreezedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHiddenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSelection {
            get {
                return this.AllowSelectionField;
            }
            set {
                if ((this.AllowSelectionField.Equals(value) != true)) {
                    this.AllowSelectionField = value;
                    this.RaisePropertyChanged("AllowSelection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSizeChange {
            get {
                return this.AllowSizeChangeField;
            }
            set {
                if ((this.AllowSizeChangeField.Equals(value) != true)) {
                    this.AllowSizeChangeField = value;
                    this.RaisePropertyChanged("AllowSizeChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActiveForColoring {
            get {
                return this.IsActiveForColoringField;
            }
            set {
                if ((this.IsActiveForColoringField.Equals(value) != true)) {
                    this.IsActiveForColoringField = value;
                    this.RaisePropertyChanged("IsActiveForColoring");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFreezed {
            get {
                return this.IsFreezedField;
            }
            set {
                if ((this.IsFreezedField.Equals(value) != true)) {
                    this.IsFreezedField = value;
                    this.RaisePropertyChanged("IsFreezed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHidden {
            get {
                return this.IsHiddenField;
            }
            set {
                if ((this.IsHiddenField.Equals(value) != true)) {
                    this.IsHiddenField = value;
                    this.RaisePropertyChanged("IsHidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerColor {
            get {
                return this.LayerColorField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerColorField, value) != true)) {
                    this.LayerColorField = value;
                    this.RaisePropertyChanged("LayerColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerName {
            get {
                return this.LayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerNameField, value) != true)) {
                    this.LayerNameField = value;
                    this.RaisePropertyChanged("LayerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AttributeItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.BoolAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.StringAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.IntegerAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DoubleAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DateTimeAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GuidAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DoubleListAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.IntegerListAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.StringListAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GuidListAttribute))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ComplexListAttribute))]
    public partial class AttributeItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeName {
            get {
                return this.AttributeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeNameField, value) != true)) {
                    this.AttributeNameField = value;
                    this.RaisePropertyChanged("AttributeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoolAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class BoolAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class StringAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntegerAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class IntegerAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoubleAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class DoubleAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimeAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class DateTimeAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuidAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class GuidAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoubleListAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class DoubleListAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntegerListAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class IntegerListAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringListAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class StringListAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuidListAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class GuidListAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexListAttribute", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class ComplexListAttribute : Neplan_coordinacion.NeplanService.AttributeItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.ListItem[] ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.ListItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class ListItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.AttributeItem[] AttributesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.AttributeItem[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectiveFunctionsEntry", Namespace="http://BCP.ch/Neplan/Web/Models/CalcParameterData")]
    [System.SerializableAttribute()]
    public partial class ObjectiveFunctionsEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid NetworkGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ObjectTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinMax {
            get {
                return this.MinMaxField;
            }
            set {
                if ((this.MinMaxField.Equals(value) != true)) {
                    this.MinMaxField = value;
                    this.RaisePropertyChanged("MinMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NetworkGroupID {
            get {
                return this.NetworkGroupIDField;
            }
            set {
                if ((this.NetworkGroupIDField.Equals(value) != true)) {
                    this.NetworkGroupIDField = value;
                    this.RaisePropertyChanged("NetworkGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ObjectType {
            get {
                return this.ObjectTypeField;
            }
            set {
                if ((this.ObjectTypeField.Equals(value) != true)) {
                    this.ObjectTypeField = value;
                    this.RaisePropertyChanged("ObjectType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterfaceOPFSetting", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class InterfaceOPFSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.InterfaceConnectionItem[] InterfaceConnectionListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InterfaceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.InterfaceConnectionItem[] InterfaceConnectionList {
            get {
                return this.InterfaceConnectionListField;
            }
            set {
                if ((object.ReferenceEquals(this.InterfaceConnectionListField, value) != true)) {
                    this.InterfaceConnectionListField = value;
                    this.RaisePropertyChanged("InterfaceConnectionList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterfaceName {
            get {
                return this.InterfaceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InterfaceNameField, value) != true)) {
                    this.InterfaceNameField = value;
                    this.RaisePropertyChanged("InterfaceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalElement", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.External")]
    [System.SerializableAttribute()]
    public partial class ExternalElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementName {
            get {
                return this.ElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementNameField, value) != true)) {
                    this.ElementNameField = value;
                    this.RaisePropertyChanged("ElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementTypeField, value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TechItem", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.Services.ServiceManager")]
    [System.SerializableAttribute()]
    public partial class TechItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Neplan_coordinacion.NeplanService.AttributeItem[] AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ElementIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Neplan_coordinacion.NeplanService.AttributeItem[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerLoadData", Namespace="http://schemas.datacontract.org/2004/07/BCP.Neplan.Web.ImportExport.XMLList")]
    [System.SerializableAttribute()]
    public partial class PowerLoadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CosPhiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short DomesticUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LfTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScalingFactorElementPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScalingFactorElementQField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScalingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VelanderK1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VelanderK2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((this.ConnectionTypeField.Equals(value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CosPhi {
            get {
                return this.CosPhiField;
            }
            set {
                if ((this.CosPhiField.Equals(value) != true)) {
                    this.CosPhiField = value;
                    this.RaisePropertyChanged("CosPhi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short DomesticUnits {
            get {
                return this.DomesticUnitsField;
            }
            set {
                if ((this.DomesticUnitsField.Equals(value) != true)) {
                    this.DomesticUnitsField = value;
                    this.RaisePropertyChanged("DomesticUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double E {
            get {
                return this.EField;
            }
            set {
                if ((this.EField.Equals(value) != true)) {
                    this.EField = value;
                    this.RaisePropertyChanged("E");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double I {
            get {
                return this.IField;
            }
            set {
                if ((this.IField.Equals(value) != true)) {
                    this.IField = value;
                    this.RaisePropertyChanged("I");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LfType {
            get {
                return this.LfTypeField;
            }
            set {
                if ((this.LfTypeField.Equals(value) != true)) {
                    this.LfTypeField = value;
                    this.RaisePropertyChanged("LfType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double P {
            get {
                return this.PField;
            }
            set {
                if ((this.PField.Equals(value) != true)) {
                    this.PField = value;
                    this.RaisePropertyChanged("P");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Phase {
            get {
                return this.PhaseField;
            }
            set {
                if ((this.PhaseField.Equals(value) != true)) {
                    this.PhaseField = value;
                    this.RaisePropertyChanged("Phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Q {
            get {
                return this.QField;
            }
            set {
                if ((this.QField.Equals(value) != true)) {
                    this.QField = value;
                    this.RaisePropertyChanged("Q");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double S {
            get {
                return this.SField;
            }
            set {
                if ((this.SField.Equals(value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScalingFactorElementP {
            get {
                return this.ScalingFactorElementPField;
            }
            set {
                if ((this.ScalingFactorElementPField.Equals(value) != true)) {
                    this.ScalingFactorElementPField = value;
                    this.RaisePropertyChanged("ScalingFactorElementP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScalingFactorElementQ {
            get {
                return this.ScalingFactorElementQField;
            }
            set {
                if ((this.ScalingFactorElementQField.Equals(value) != true)) {
                    this.ScalingFactorElementQField = value;
                    this.RaisePropertyChanged("ScalingFactorElementQ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScalingType {
            get {
                return this.ScalingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScalingTypeField, value) != true)) {
                    this.ScalingTypeField = value;
                    this.RaisePropertyChanged("ScalingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double VelanderK1 {
            get {
                return this.VelanderK1Field;
            }
            set {
                if ((this.VelanderK1Field.Equals(value) != true)) {
                    this.VelanderK1Field = value;
                    this.RaisePropertyChanged("VelanderK1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double VelanderK2 {
            get {
                return this.VelanderK2Field;
            }
            set {
                if ((this.VelanderK2Field.Equals(value) != true)) {
                    this.VelanderK2Field = value;
                    this.RaisePropertyChanged("VelanderK2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.neplan.ch/Web/External", ConfigurationName="NeplanService.NeplanService")]
    public interface NeplanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        string GetResultElementByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByIDResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetResultsElementsByID(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsElementsByIDResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        string GetResultElementByName(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultElementByNameResponse")]
        System.Threading.Tasks.Task<string> GetResultElementByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeasibilityResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeasibilityResultsResponse")]
        string GetFeasibilityResults(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeasibilityResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeasibilityResultsResponse")]
        System.Threading.Tasks.Task<string> GetFeasibilityResultsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultOfElementsResponse")]
        Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetResultOfElements(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementIds, string[] variables, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultOfElementsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetResultOfElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementIds, string[] variables, string analysisType, System.Nullable<System.DateTime> simulationDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsResponse")]
        System.IO.Stream GetResults(string analysisID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultsResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetResultsAsync(string analysisID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantWithAnalysisSetting" +
            "sResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo AnalyseVariant(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariant", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AnalyseVariantResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> AnalyseVariantAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        bool IsAnalysisDone(string analysisReferenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/IsAnalysisDoneResponse")]
        System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisReferenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DoAnalysisFromFilesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/EnergyCalculationFromFilesRespons" +
            "e")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromDBResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileA" +
            "ndProjectNameResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadAllocationFromMeasurmentFileR" +
            "esponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationResponse ImportFromListFileAndDoLoadAllocation(Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileAndDoLoadAlloca" +
            "tionResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AreCalculationResultsValid", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AreCalculationResultsValidRespons" +
            "e")]
        short AreCalculationResultsValid(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisModule, string calcNameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AreCalculationResultsValid", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AreCalculationResultsValidRespons" +
            "e")]
        System.Threading.Tasks.Task<short> AreCalculationResultsValidAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisModule, string calcNameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/StartAnalysis", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/StartAnalysisResponse")]
        Neplan_coordinacion.NeplanService.AnalysisReturnInfo StartAnalysis(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/StartAnalysis", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/StartAnalysisResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> StartAnalysisAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/StopAnalysis", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/StopAnalysisResponse")]
        void StopAnalysis(string analysisReferenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/StopAnalysis", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/StopAnalysisResponse")]
        System.Threading.Tasks.Task StopAnalysisAsync(string analysisReferenceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        bool DeleteAnaylsisLogFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        bool DeleteAnalysisResultFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        bool DeleteProject(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        bool MarkedProjectAsDeleted(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeleted", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MarkedProjectAsDeletedResponse")]
        System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        string removeAllExpiredProjects(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/removeAllExpiredProjectsResponse")]
        System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        string createDailyBackup(bool isAzure, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/createDailyBackup", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/createDailyBackupResponse")]
        System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        bool AddFeederFromList(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportFeederItem[] feederList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddFeederFromListResponse")]
        System.Threading.Tasks.Task<bool> AddFeederFromListAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportFeederItem[] feederList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromList(Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromListAsync(Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromListFileResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/MergeProjectFromListFileResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDE", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEFilesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromCDEZipFileResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFiles", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEFilesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromPSSEZipFileResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        int ImportFromShapeFile(string path, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromShapeFileResponse")]
        System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        bool ImportFromNDB(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDB", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportFromNDBResponse")]
        System.Threading.Tasks.Task<bool> ImportFromNDBAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        bool ImportMeasuredDataFromXMlFile(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string definitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportMeasuredDataFromXMlFileResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string definitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportNepOper", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportNepOperResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode ImportNepOper(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportNepOper", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportNepOperResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> ImportNepOperAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElevationToAllNodes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElevationToAllNodesResponse")]
        int SetElevationToAllNodes(Neplan_coordinacion.NeplanService.ExternalProject project, string urlStub);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElevationToAllNodes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElevationToAllNodesResponse")]
        System.Threading.Tasks.Task<int> SetElevationToAllNodesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string urlStub);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.IO.Stream ExportProjectToNEP360(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ExportProjectToNEP360Response")]
        System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        void WriteMessageToLogFile(Neplan_coordinacion.NeplanService.ExternalProject project, string text, string logLvl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/WriteMessageToLogFileResponse")]
        System.Threading.Tasks.Task WriteMessageToLogFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string text, string logLvl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        bool DeleteUserLogFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteUserLogFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        string GetLogFileAsString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsString", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsStringResponse")]
        System.Threading.Tasks.Task<string> GetLogFileAsStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        string[] GetLogFileAsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogFileAsListResponse")]
        System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/TextUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/TextUploadResponse")]
        string TextUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/TextUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/TextUploadResponse")]
        System.Threading.Tasks.Task<string> TextUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        string XMLUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/XMLUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/XMLUploadResponse")]
        System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        string CDEUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CDEUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CDEUploadResponse")]
        System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        string NDBUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NDBUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NDBUploadResponse")]
        System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepOperUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepOperUploadResponse")]
        string NepOperUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepOperUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepOperUploadResponse")]
        System.Threading.Tasks.Task<string> NepOperUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        string Nep360Upload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Nep360Upload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Nep360UploadResponse")]
        System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        string ZipUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ZipUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ZipUploadResponse")]
        System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UCTUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UCTUploadResponse")]
        string UCTUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UCTUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UCTUploadResponse")]
        System.Threading.Tasks.Task<string> UCTUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        string NepMeasUpload(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/NepMeasUpload", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/NepMeasUploadResponse")]
        System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.IO.Stream GetUserLogFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetUserLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.IO.Stream GetAnaylsisLogFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnaylsisLogFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.IO.Stream GetAnalysisResultFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFile", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAnalysisResultFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNamesOfElementsByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/FindSwitchStatusOfElementsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse Find_Voltage_Level_of_One_Port_Element(Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Find_Voltage_Level_of_One_Port_El" +
            "ementResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByIDRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDResponse GetBusBarOf1PortElementByID(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDResponse> GetBusBarOf1PortElementByIDAsync(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByNameResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameResponse GetBusBarOf1PortElementByName(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetBusBarOf1PortElementByNameResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameResponse> GetBusBarOf1PortElementByNameAsync(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementsRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsm", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetPQValuesLdSmAsmResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        bool SetPowerofLoadsGenerators(string projectname, Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] loadgens);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGenerators", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetPowerofLoadsGeneratorsResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] loadgens);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ChangeSwitchStatusOfElementListRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS, string processType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ImportIEC_62325_451_2FilesAndDoCI" +
            "MExportResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS, string processType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RunEMFProcess", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RunEMFProcessResponse")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo RunEMFProcess(string[] filesList, string localFolder, System.DateTime scenarioTime, string username, System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExport, string processType, string newProjectName, string MAS, string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RunEMFProcess", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RunEMFProcessResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> RunEMFProcessAsync(string[] filesList, string localFolder, System.DateTime scenarioTime, string username, System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExport, string processType, string newProjectName, string MAS, string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RunCIMExportTranselectrica", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RunCIMExportTranselectricaRespons" +
            "e")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo RunCIMExportTranselectrica(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RunCIMExportTranselectrica", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RunCIMExportTranselectricaRespons" +
            "e")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> RunCIMExportTranselectricaAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNamesResponse")]
        System.Guid[] GetFeederIDByNames(string ProjectName, string VariantName, string[] FeederNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNamesResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNamesAsync(string ProjectName, string VariantName, string[] FeederNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetIDByFeederNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetIDByFeederNamesResponse")]
        System.Guid[] GetIDByFeederNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] FeederNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetIDByFeederNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetIDByFeederNamesResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetIDByFeederNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] FeederNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllFeeders", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllFeedersResponse")]
        string[] GetAllFeeders(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllFeeders", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllFeedersResponse")]
        System.Threading.Tasks.Task<string[]> GetAllFeedersAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederNameByIDResponse")]
        string GetFeederNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederNameByIDResponse")]
        System.Threading.Tasks.Task<string> GetFeederNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Guid GetFeederIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederIDByNameResponse")]
        System.Threading.Tasks.Task<System.Guid> GetFeederIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByNameResponse")]
        Neplan_coordinacion.NeplanService.ExternalFeeder GetFeederDataByName(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByNameResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalFeeder> GetFeederDataByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByIDResponse")]
        Neplan_coordinacion.NeplanService.ExternalFeeder GetFeederDataByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetFeederDataByIDResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalFeeder> GetFeederDataByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetFeederData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetFeederDataResponse")]
        bool SetFeederData(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalFeeder[] feederData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetFeederData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetFeederDataResponse")]
        System.Threading.Tasks.Task<bool> SetFeederDataAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalFeeder[] feederData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteFeeders", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteFeedersResponse")]
        bool DeleteFeeders(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] feeders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteFeeders", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteFeedersResponse")]
        System.Threading.Tasks.Task<bool> DeleteFeedersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] feeders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetTopologyInformationOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetTopologyInformationOfElementsR" +
            "esponse")]
        System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.ExternalTopologyInfo> GetTopologyInformationOfElements(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetTopologyInformationOfElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetTopologyInformationOfElementsR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.ExternalTopologyInfo>> GetTopologyInformationOfElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllAreas", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllAreasResponse")]
        System.Collections.Generic.Dictionary<System.Guid, string> GetAllAreas(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllAreas", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllAreasResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllAreasAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllAreaEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllAreaEICsResponse")]
        System.Collections.Generic.Dictionary<System.Guid, string> GetAllAreaEICs(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllAreaEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllAreaEICsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllAreaEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetAreasEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetAreasEICsResponse")]
        bool SetAreasEICs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string> areaNameToEIC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetAreasEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetAreasEICsResponse")]
        System.Threading.Tasks.Task<bool> SetAreasEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string> areaNameToEIC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllSubAreas", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllSubAreasResponse")]
        string[] GetAllSubAreas(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllSubAreas", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllSubAreasResponse")]
        System.Threading.Tasks.Task<string[]> GetAllSubAreasAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaNameByIDResponse")]
        string GetSubAreaNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaNameByIDResponse")]
        System.Threading.Tasks.Task<string> GetSubAreaNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaIDByNameResponse")]
        System.Guid GetSubAreaIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string subAreaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubAreaIDByNameResponse")]
        System.Threading.Tasks.Task<System.Guid> GetSubAreaIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string subAreaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllZones", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllZonesResponse")]
        string[] GetAllZones(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllZones", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllZonesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllZonesAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllZoneEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllZoneEICsResponse")]
        System.Collections.Generic.Dictionary<System.Guid, string> GetAllZoneEICs(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllZoneEICs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllZoneEICsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllZoneEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneNameByIDResponse")]
        string GetZoneNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid zoneID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneNameByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneNameByIDResponse")]
        System.Threading.Tasks.Task<string> GetZoneNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid zoneID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneIDByNameResponse")]
        System.Guid GetZoneIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneIDByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneIDByNameResponse")]
        System.Threading.Tasks.Task<System.Guid> GetZoneIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneFactorsByPropertyNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneFactorsByPropertyNamesResp" +
            "onse")]
        double[] GetZoneFactorsByPropertyNames(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetZoneFactorsByPropertyNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetZoneFactorsByPropertyNamesResp" +
            "onse")]
        System.Threading.Tasks.Task<double[]> GetZoneFactorsByPropertyNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetZoneFactorsByPropertyNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetZoneFactorsByPropertyNamesResp" +
            "onse")]
        bool SetZoneFactorsByPropertyNames(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames, double[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetZoneFactorsByPropertyNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetZoneFactorsByPropertyNamesResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> SetZoneFactorsByPropertyNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames, double[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMImport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMImportResponse")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo CIMImport(string[] inputFiles, bool isLocalPath, string projectName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMImport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMImportResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> CIMImportAsync(string[] inputFiles, bool isLocalPath, string projectName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMUpdateSSHData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMUpdateSSHDataResponse")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo CIMUpdateSSHData(Neplan_coordinacion.NeplanService.ExternalProject extProject, string[] inputFiles, bool isLocalPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMUpdateSSHData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMUpdateSSHDataResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> CIMUpdateSSHDataAsync(Neplan_coordinacion.NeplanService.ExternalProject extProject, string[] inputFiles, bool isLocalPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ValidateCGMESModel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ValidateCGMESModelResponse")]
        Neplan_coordinacion.NeplanService.ValidateCGMESModelResponse ValidateCGMESModel(Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/ValidateCGMESModel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/ValidateCGMESModelResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ValidateCGMESModelResponse> ValidateCGMESModelAsync(Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMExportResponse")]
        byte[] CIMExport(Neplan_coordinacion.NeplanService.ExternalProject externalProject, Neplan_coordinacion.NeplanService.CimExportOptions CIMOptions, string operationalState, bool runPowerFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CIMExport", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CIMExportResponse")]
        System.Threading.Tasks.Task<byte[]> CIMExportAsync(Neplan_coordinacion.NeplanService.ExternalProject externalProject, Neplan_coordinacion.NeplanService.CimExportOptions CIMOptions, string operationalState, bool runPowerFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoCimIDDictionary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoCimIDDictionaryRespo" +
            "nse")]
        System.Collections.Generic.Dictionary<string, string> GetNeplanIDtoCimIDDictionary(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoCimIDDictionary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoCimIDDictionaryRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetNeplanIDtoCimIDDictionaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddDataToTimeDependentCurves", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddDataToTimeDependentCurvesRespo" +
            "nse")]
        Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo AddDataToTimeDependentCurves(System.Collections.Generic.Dictionary<System.DateTime, string[]> timepointToSSHFiles, Neplan_coordinacion.NeplanService.ExternalProject project, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddDataToTimeDependentCurves", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddDataToTimeDependentCurvesRespo" +
            "nse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> AddDataToTimeDependentCurvesAsync(System.Collections.Generic.Dictionary<System.DateTime, string[]> timepointToSSHFiles, Neplan_coordinacion.NeplanService.ExternalProject project, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoEICodeDictionary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoEICodeDictionaryResp" +
            "onse")]
        System.Collections.Generic.Dictionary<string, string> GetNeplanIDtoEICodeDictionary(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoEICodeDictionary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetNeplanIDtoEICodeDictionaryResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetNeplanIDtoEICodeDictionaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddUpdateTopologyOperStateForElem" +
            "ent", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddUpdateTopologyOperStateForElem" +
            "entResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode AddUpdateTopologyOperStateForElement(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperDataTopologyData[] operTopoData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddUpdateTopologyOperStateForElem" +
            "ent", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddUpdateTopologyOperStateForElem" +
            "entResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddUpdateTopologyOperStateForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperDataTopologyData[] operTopoData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteTopologyOperStateForElement" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteTopologyOperStateForElement" +
            "sResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteTopologyOperStateForElements(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteTopologyOperStateForElement" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteTopologyOperStateForElement" +
            "sResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteTopologyOperStateForElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddUpdateOperStateForElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddUpdateOperStateForElementRespo" +
            "nse")]
        Neplan_coordinacion.NeplanService.ReturnCode AddUpdateOperStateForElement(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperData[] operData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddUpdateOperStateForElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddUpdateOperStateForElementRespo" +
            "nse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddUpdateOperStateForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperData[] operData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOperationalStat" +
            "es", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOperationalStat" +
            "esResponse")]
        string[] GetAllElementsWithOperationalStates(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOperationalStat" +
            "es", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOperationalStat" +
            "esResponse")]
        System.Threading.Tasks.Task<string[]> GetAllElementsWithOperationalStatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalState", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteOperationalState(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalState", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOperationalStateAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateForItems", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateForItemsRes" +
            "ponse")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteOperationalStateForItems(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames, string[] nodeNames, string[] zones, string[] feeders, bool removeNetworkState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateForItems", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOperationalStateForItemsRes" +
            "ponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOperationalStateForItemsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames, string[] nodeNames, string[] zones, string[] feeders, bool removeNetworkState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetOperationalStateNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetOperationalStateNamesResponse")]
        string[] GetOperationalStateNames(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetOperationalStateNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetOperationalStateNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetOperationalStateNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAllOperationalStates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAllOperationalStatesRespons" +
            "e")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteAllOperationalStates(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteAllOperationalStates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteAllOperationalStatesRespons" +
            "e")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteAllOperationalStatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetOrUpdateElementTimeDependentCu" +
            "rvePoints", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetOrUpdateElementTimeDependentCu" +
            "rvePointsResponse")]
        bool SetOrUpdateElementTimeDependentCurvePoints(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TimeDependentPointItem[] elementsTimePointList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetOrUpdateElementTimeDependentCu" +
            "rvePoints", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetOrUpdateElementTimeDependentCu" +
            "rvePointsResponse")]
        System.Threading.Tasks.Task<bool> SetOrUpdateElementTimeDependentCurvePointsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TimeDependentPointItem[] elementsTimePointList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementCalcSettingForCalcParam" +
            "eter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementCalcSettingForCalcParam" +
            "eterResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetElementCalcSettingForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.TechDataCalcSetting[] elementSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementCalcSettingForCalcParam" +
            "eter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementCalcSettingForCalcParam" +
            "eterResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetElementCalcSettingForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.TechDataCalcSetting[] elementSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementCalcSettingForCalcParam" +
            "eter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementCalcSettingForCalcParam" +
            "eterResponse")]
        Neplan_coordinacion.NeplanService.TechDataCalcSetting[] GetElementCalcSettingForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementCalcSettingForCalcParam" +
            "eter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementCalcSettingForCalcParam" +
            "eterResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.TechDataCalcSetting[]> GetElementCalcSettingForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetShortCircuitLocations", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetShortCircuitLocationsResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetShortCircuitLocations(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ShortCircuitLocation[] shortCircuitLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetShortCircuitLocations", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetShortCircuitLocationsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetShortCircuitLocationsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ShortCircuitLocation[] shortCircuitLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetShortCircuitLocations", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetShortCircuitLocationsResponse")]
        Neplan_coordinacion.NeplanService.ShortCircuitLocation[] GetShortCircuitLocations(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetShortCircuitLocations", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetShortCircuitLocationsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ShortCircuitLocation[]> GetShortCircuitLocationsAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCommonModesForAnalysisTypeResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.CommonModeItem[] commonModes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCommonModesForAnalysisTypeResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.CommonModeItem[] commonModes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCommonModesForAnalysisTypeResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.CommonModeItem[] GetCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCommonModesForAnalysisTypeResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.CommonModeItem[]> GetCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteCommonModesForAnalysisTypeR" +
            "esponse")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string[] commonModeNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteCommonModesForAnalysisType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteCommonModesForAnalysisTypeR" +
            "esponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string[] commonModeNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateElementLibrary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateElementLibraryResponse")]
        bool UpdateElementLibrary(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement libraryElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateElementLibrary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateElementLibraryResponse")]
        System.Threading.Tasks.Task<bool> UpdateElementLibraryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement libraryElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateElementsLibrary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateElementsLibraryResponse")]
        bool UpdateElementsLibrary(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement[] libraryElements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateElementsLibrary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateElementsLibraryResponse")]
        System.Threading.Tasks.Task<bool> UpdateElementsLibraryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement[] libraryElements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/CreateProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/CreateProjectResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SaveProjectAs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SaveProjectAsResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject SaveProjectAs(string projectName, string newProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SaveProjectAs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SaveProjectAsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> SaveProjectAsAsync(string projectName, string newProjectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectsResponse")]
        Neplan_coordinacion.NeplanService.ExternalProject[] GetProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetProjects", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetProjectsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject[]> GetProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetScenarios", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetScenariosResponse")]
        string[] GetScenarios(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetScenarios", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetScenariosResponse")]
        System.Threading.Tasks.Task<string[]> GetScenariosAsync(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        string GetLogOnUrlWithProject(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlWithProjectResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        string GetLogOnUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrl", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnUrlResponse")]
        System.Threading.Tasks.Task<string> GetLogOnUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        string GetLogOnSessionID(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLogOnSessionIDResponse")]
        System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddCustomerTypeDefinition", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddCustomerTypeDefinitionResponse" +
            "")]
        bool AddCustomerTypeDefinition(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName, double factorP, double factorQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddCustomerTypeDefinition", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddCustomerTypeDefinitionResponse" +
            "")]
        System.Threading.Tasks.Task<bool> AddCustomerTypeDefinitionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName, double factorP, double factorQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RemoveCustomerTypeDefinition", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RemoveCustomerTypeDefinitionRespo" +
            "nse")]
        bool RemoveCustomerTypeDefinition(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/RemoveCustomerTypeDefinition", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/RemoveCustomerTypeDefinitionRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> RemoveCustomerTypeDefinitionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCustomerTypeDefinitions", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCustomerTypeDefinitionsRespons" +
            "e")]
        Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsResponse GetCustomerTypeDefinitions(Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCustomerTypeDefinitions", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCustomerTypeDefinitionsRespons" +
            "e")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsResponse> GetCustomerTypeDefinitionsAsync(Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGasNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGasNodeResponse")]
        Neplan_coordinacion.NeplanService.InsertGasNodeResponse InsertGasNode(Neplan_coordinacion.NeplanService.InsertGasNodeRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGasNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGasNodeResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertGasNodeResponse> InsertGasNodeAsync(Neplan_coordinacion.NeplanService.InsertGasNodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        Neplan_coordinacion.NeplanService.InsertNodeResponse InsertNode(Neplan_coordinacion.NeplanService.InsertNodeRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNode", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertNodeResponse> InsertNodeAsync(Neplan_coordinacion.NeplanService.InsertNodeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicResponse InsertNodeWithoutGraphic(Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphic", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertNodeWithoutGraphicResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        Neplan_coordinacion.NeplanService.InsertBusbarResponse InsertBusbar(Neplan_coordinacion.NeplanService.InsertBusbarRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertBusbar", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertBusbarResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertBusbarResponse> InsertBusbarAsync(Neplan_coordinacion.NeplanService.InsertBusbarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        string InsertLine(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLine", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        string InsertLineByNodeID(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineByNodeIDResponse")]
        System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        string InsertLineAsym(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsym", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertLineAsymResponse")]
        System.Threading.Tasks.Task<string> InsertLineAsymAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        string Insert2PortElement(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert2PortElementResponse")]
        System.Threading.Tasks.Task<string> Insert2PortElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        Neplan_coordinacion.NeplanService.Insert1PortElementResponse Insert1PortElement(Neplan_coordinacion.NeplanService.Insert1PortElementRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/Insert1PortElementResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.Insert1PortElementResponse> Insert1PortElementAsync(Neplan_coordinacion.NeplanService.Insert1PortElementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        string InsertProtectionElement(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertProtectionElementResponse")]
        System.Threading.Tasks.Task<string> InsertProtectionElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        string InsertFeeder(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertFeederResponse")]
        System.Threading.Tasks.Task<string> InsertFeederAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        string InsertArea(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertAreaResponse")]
        System.Threading.Tasks.Task<string> InsertAreaAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        string InsertZone(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string colorString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertZoneResponse")]
        System.Threading.Tasks.Task<string> InsertZoneAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string colorString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        string InsertMeasurement(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementResponse")]
        System.Threading.Tasks.Task<string> InsertMeasurementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertMeasurementByElementIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementForElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementForElementRespon" +
            "se")]
        bool DeleteMeasurementForElement(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementForElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementForElementRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> DeleteMeasurementForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementDefinitionForPro" +
            "ject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementDefinitionForPro" +
            "jectResponse")]
        bool DeleteMeasurementDefinitionForProject(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementDefinitionForPro" +
            "ject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteMeasurementDefinitionForPro" +
            "jectResponse")]
        System.Threading.Tasks.Task<bool> DeleteMeasurementDefinitionForProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetMeasurementDefinitionForProjec" +
            "t", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetMeasurementDefinitionForProjec" +
            "tResponse")]
        System.Guid GetMeasurementDefinitionForProject(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetMeasurementDefinitionForProjec" +
            "t", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetMeasurementDefinitionForProjec" +
            "tResponse")]
        System.Threading.Tasks.Task<System.Guid> GetMeasurementDefinitionForProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        string InsertDiagram(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertDiagram", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertDiagramResponse")]
        System.Threading.Tasks.Task<string> InsertDiagramAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        Neplan_coordinacion.NeplanService.InsertGraphicLayerResponse InsertGraphicLayer(Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayer", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayerResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertGraphicLayerResponse> InsertGraphicLayerAsync(Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayers", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayersResponse")]
        System.Guid[] InsertGraphicLayers(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayers", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/InsertGraphicLayersResponse")]
        System.Threading.Tasks.Task<System.Guid[]> InsertGraphicLayersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateGraphicLayers", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateGraphicLayersResponse")]
        bool UpdateGraphicLayers(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateGraphicLayers", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateGraphicLayersResponse")]
        System.Threading.Tasks.Task<bool> UpdateGraphicLayersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        bool SetCalcParameterAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetCalcParameterAttributeResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetAttributeForCalcParameter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetAttributeForCalcParameterRespo" +
            "nse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetAttributeForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.AttributeItem[] attributes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetAttributeForCalcParameter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetAttributeForCalcParameterRespo" +
            "nse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetAttributeForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.AttributeItem[] attributes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesRespons" +
            "e")]
        Neplan_coordinacion.NeplanService.AttributeItem[] GetCalcParameterAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesRespons" +
            "e")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AttributeItem[]> GetCalcParameterAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesDescrip" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesDescrip" +
            "tionResponse")]
        Neplan_coordinacion.NeplanService.AttributeItem[] GetCalcParameterAttributesDescription(string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesDescrip" +
            "tion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCalcParameterAttributesDescrip" +
            "tionResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AttributeItem[]> GetCalcParameterAttributesDescriptionAsync(string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetOptimalPowerFlowObjectiveFunct" +
            "ion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetOptimalPowerFlowObjectiveFunct" +
            "ionResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetOptimalPowerFlowObjectiveFunction(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry[] objectiveFunctionList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetOptimalPowerFlowObjectiveFunct" +
            "ion", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetOptimalPowerFlowObjectiveFunct" +
            "ionResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetOptimalPowerFlowObjectiveFunctionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry[] objectiveFunctionList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadOutagesForContigency", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadOutagesForContigencyResponse")]
        Neplan_coordinacion.NeplanService.ReturnCode LoadOutagesForContigency(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/LoadOutagesForContigency", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/LoadOutagesForContigencyResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> LoadOutagesForContigencyAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddOptimalPowerFlowInterfacesResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.ReturnCode AddOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] interfaces);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddOptimalPowerFlowInterfacesResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] interfaces);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetOptimalPowerFlowInterfacesResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] GetOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetOptimalPowerFlowInterfacesResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InterfaceOPFSetting[]> GetOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOptimalPowerFlowInterfacesR" +
            "esponse")]
        Neplan_coordinacion.NeplanService.ReturnCode DeleteOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] interfaceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteOptimalPowerFlowInterfaces", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteOptimalPowerFlowInterfacesR" +
            "esponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] interfaceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllDiagramNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllDiagramNamesResponse")]
        Neplan_coordinacion.NeplanService.GetAllDiagramNamesResponse GetAllDiagramNames(Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllDiagramNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllDiagramNamesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllDiagramNamesResponse> GetAllDiagramNamesAsync(Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementResponse")]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfElementResponse GetCoordinatesOfElement(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfElementResponse> GetCoordinatesOfElementAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementByNameResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameResponse GetCoordinatesOfElementByName(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfElementByNameResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameResponse> GetCoordinatesOfElementByNameAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfAllElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfAllElementsRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsResponse GetCoordinatesOfAllElements(Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfAllElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetCoordinatesOfAllElementsRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsResponse> GetCoordinatesOfAllElementsAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortResponse")]
        System.Nullable<System.Guid> GetElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortByIDResponse")]
        System.Nullable<System.Guid> GetElementAtPortByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortByIDResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetElementAtPortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortIDsResponse")]
        System.Nullable<System.Guid>[] GetElementAtPortIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs, short[] portNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAtPortIDsResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>[]> GetElementAtPortIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs, short[] portNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetGraphicLayersForElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetGraphicLayersForElementByIDRes" +
            "ponse")]
        string[] GetGraphicLayersForElementByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetGraphicLayersForElementByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetGraphicLayersForElementByIDRes" +
            "ponse")]
        System.Threading.Tasks.Task<string[]> GetGraphicLayersForElementByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProjectResponse")]
        Neplan_coordinacion.NeplanService.GetAllElementsOfProjectResponse GetAllElementsOfProject(Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfProjectResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfProjectResponse> GetAllElementsOfProjectAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementTypeRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeResponse GetAllElementsOfElementType(Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfElementTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeResponse> GetAllElementsOfElementTypeAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfAreaResponse")]
        Neplan_coordinacion.NeplanService.GetAllElementsOfAreaResponse GetAllElementsOfArea(Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfArea", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfAreaResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfAreaResponse> GetAllElementsOfAreaAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfFeederResponse")]
        Neplan_coordinacion.NeplanService.GetAllElementsOfFeederResponse GetAllElementsOfFeeder(Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfFeeder", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfFeederResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfFeederResponse> GetAllElementsOfFeederAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfZoneResponse")]
        Neplan_coordinacion.NeplanService.GetAllElementsOfZoneResponse GetAllElementsOfZone(Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfZone", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsOfZoneResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfZoneResponse> GetAllElementsOfZoneAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        bool AddSubLoad(Neplan_coordinacion.NeplanService.ExternalProject project, string loadID, Neplan_coordinacion.NeplanService.LoadData loadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoad", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadResponse")]
        System.Threading.Tasks.Task<bool> AddSubLoadAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string loadID, Neplan_coordinacion.NeplanService.LoadData loadData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        bool AssignPowerTo1Port(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1Port", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        bool AssignPowerTo1PortByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AssignPowerTo1PortByIDResponse")]
        System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        bool SetElementData(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementData", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataResponse")]
        System.Threading.Tasks.Task<bool> SetElementDataAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        bool SetElementDataByID(System.Guid elementID, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementDataByIDResponse")]
        System.Threading.Tasks.Task<bool> SetElementDataByIDAsync(System.Guid elementID, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeResponse GetElementDataByNameandType(Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameandTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameResponse")]
        Neplan_coordinacion.NeplanService.GetElementDataByNameResponse GetElementDataByName(Neplan_coordinacion.NeplanService.GetElementDataByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByNameResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByNameResponse> GetElementDataByNameAsync(Neplan_coordinacion.NeplanService.GetElementDataByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeResponse GetElementDataByIDandType(Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandType", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementDataByIDandTypeResponse" +
            "")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetConnectedElementsByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetConnectedElementsByElementIDRe" +
            "sponse")]
        string[] GetConnectedElementsByElementID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetConnectedElementsByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetConnectedElementsByElementIDRe" +
            "sponse")]
        System.Threading.Tasks.Task<string[]> GetConnectedElementsByElementIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        bool SetElementAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        bool SetElementAttributeByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributesResponse")]
        bool SetElementAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementAttributeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementAttributesResponse")]
        System.Threading.Tasks.Task<bool> SetElementAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementAttributeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementListAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementListAttributeByIDRespon" +
            "se")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ConnectionCheckSummaryResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FaultScanningResult[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FaultScanningResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrippedRelaysResult[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrippedRelaysResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLoadData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLoadData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalProject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisParameterSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisReturnInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisReturnInfo.CableSizingLineData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisReturnInfo.CableSizingLineData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisReturnInfo.RelayResultData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AnalysisReturnInfo.RelayResultData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LoadData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLoadData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LineSectionData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LineSectionData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LoadData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalProject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ImportFeederItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ImportFeederItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ImportElementItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ImportElementItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Consumer[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Consumer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PipeFittingEntry[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PipeFittingEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.UserDataValue[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.UserDataValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Nullable<System.Guid>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NotifyBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanServiceElementResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanServiceConnection_info))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalFeeder))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalFeeder[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalTopologyInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Guid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(double[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.ExternalTopologyInfo>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.DateTime, string[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Neplan_coordinacion.NeplanService.ExternalElement, double[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(short[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, string[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.phases_connect))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TimeDependentPointItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TimeDependentPointItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TimeDependentPoint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TimeDependentPoint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechDataCalcSetting[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechDataCalcSetting))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Limits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShortCircuitLocation[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShortCircuitLocation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FaultType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TypeIEC))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShortCircuitLineLocation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CommonModeItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CommonModeItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.UpdateLibraryElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.UpdateLibraryElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AttributeItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AttributeItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.BoolAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.StringAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.IntegerAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DoubleAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DateTimeAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GuidAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DoubleListAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.IntegerListAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.StringListAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GuidListAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ComplexListAttribute))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ListItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ListItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.InterfaceOPFSetting[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.InterfaceOPFSetting))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.InterfaceConnectionItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.InterfaceConnectionItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechItem[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TechItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CimExportOptions))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.OperDataTopologyData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.OperDataTopologyData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.OperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.OperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.EarthingTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo3WindingOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.Trafo2WindingAsymmetricalOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.TrafoRegulatorOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ACDisperseGenerationOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesACDisperseGen))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.UnitTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.AsynchronousMachineOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DfigTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesASM))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CompositeLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SubLoadOperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SubLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ConnectionTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesLoad))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.DCConverterOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ConverterFunctionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ConverterControlTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.EnergyStorageOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesEnergyStorage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ExternalGridOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesExternalGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LineOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PWMOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PWMControlTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShuntOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ShuntRegulationTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.SynchronousMachineOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.LfTypesSM))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.PowerLineLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfGFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GFlowRateUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPipeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterPipeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfWFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WFlowRateUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPipeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandOperDataOfHFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HFlowRateUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfGFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasNodeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GPressureUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasConsumerOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasSpecialLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasLineLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterNodeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfWFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterSpecialLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterLineLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingNodeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHDemandExtendedOperDataOfHFlowRateUnitswfbWOzol))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingSpecialLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLineLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingLoadOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatExchangerModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingConsumerOperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfGPressureUnitsGFlowRateUnitsQVqQsqH_P))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasValveOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasRegulationTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasPressureRegulatorOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GasCirculationPumpOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.RegulationTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterValveOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfWPressureUnitsWFlowRateUnitsQVqQsqH_P))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WPressureUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterReservoirOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterCirculationPumpOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingValveOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.GWHRegulatorOperDataOfHPressureUnitsHFlowRateUnitsQVqQsqH_P))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HPressureUnits))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPressureRegulatorOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingCirculationPumpOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterHydrantOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterHydrantType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingPlantOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatPlantPressureRegulation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatPlantProduction))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkGroupOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkGroupTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NetworkOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CustomerTypeOperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.CustomerTypeOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.FeederOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ZoneOperData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.HeatingRegulationTypes))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.WaterConsumerOperData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, string>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.NeplanDomainServiceFileAsByte))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Neplan_coordinacion.NeplanService.ReturnCode))]
        bool SetElementListAttributeByID(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, object attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetElementListAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetElementListAttributeByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> SetElementListAttributeByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, object attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        Neplan_coordinacion.NeplanService.GetElementAttributeByIDResponse GetElementAttributeByID(Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByIDResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementIDResponse")]
        Neplan_coordinacion.NeplanService.GetAttributeByElementIDResponse GetAttributeByElementID(Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementIDResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeByElementIDResponse> GetAttributeByElementIDAsync(Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementListAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementListAttributeByIDRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetElementListAttributeByIDResponse GetElementListAttributeByID(Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementListAttributeByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementListAttributeByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementListAttributeByIDResponse> GetElementListAttributeByIDAsync(Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByIDRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetElementAttributeListByIDResponse GetElementAttributeListByID(Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeListByIDResponse> GetElementAttributeListByIDAsync(Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementIDRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetAttributeListByElementIDResponse GetAttributeListByElementID(Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementIDRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeListByElementIDResponse> GetAttributeListByElementIDAsync(Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        Neplan_coordinacion.NeplanService.GetElementAttributeByNameResponse GetElementAttributeByName(Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeByNameResponse" +
            "")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementNameResponse" +
            "")]
        Neplan_coordinacion.NeplanService.GetAttributeByElementNameResponse GetAttributeByElementName(Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeByElementNameResponse" +
            "")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeByElementNameResponse> GetAttributeByElementNameAsync(Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByNameResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.GetElementAttributeListByNameResponse GetElementAttributeListByName(Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributeListByNameResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeListByNameResponse> GetElementAttributeListByNameAsync(Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementNameResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.GetAttributeListByElementNameResponse GetAttributeListByElementName(Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAttributeListByElementNameResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeListByElementNameResponse> GetAttributeListByElementNameAsync(Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributesResponse")]
        Neplan_coordinacion.NeplanService.TechItem[] GetElementAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementInfoList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributes", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetElementAttributesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.TechItem[]> GetElementAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementInfoList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetShuntSwitchedAdmittanceBlocks", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetShuntSwitchedAdmittanceBlocksR" +
            "esponse")]
        System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> GetShuntSwitchedAdmittanceBlocks(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] shuntIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetShuntSwitchedAdmittanceBlocks", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetShuntSwitchedAdmittanceBlocksR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]>> GetShuntSwitchedAdmittanceBlocksAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] shuntIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetShuntSwitchedAdmittanceBlocks", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetShuntSwitchedAdmittanceBlocksR" +
            "esponse")]
        Neplan_coordinacion.NeplanService.ReturnCode SetShuntSwitchedAdmittanceBlocks(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> shuntIdsToBlocks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetShuntSwitchedAdmittanceBlocks", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetShuntSwitchedAdmittanceBlocksR" +
            "esponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetShuntSwitchedAdmittanceBlocksAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> shuntIdsToBlocks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterResponse")]
        bool SetRegulatorParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, string parameterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameter", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterResponse")]
        System.Threading.Tasks.Task<bool> SetRegulatorParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, string parameterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterByIDResponse" +
            "")]
        bool SetRegulatorParameterByID(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, string parameterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetRegulatorParameterByIDResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetRegulatorParameterByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, string parameterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByIDResponse" +
            "")]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDResponse GetRegulatorParameterByID(Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByIDResponse" +
            "")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDResponse> GetRegulatorParameterByIDAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByIDResp" +
            "onse")]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDResponse GetRegulatorParameterListByID(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByIDResp" +
            "onse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDResponse> GetRegulatorParameterListByIDAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByNameRespon" +
            "se")]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameResponse GetRegulatorParameterByName(Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterByNameRespon" +
            "se")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameResponse> GetRegulatorParameterByNameAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByNameRe" +
            "sponse")]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameResponse GetRegulatorParameterListByName(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetRegulatorParameterListByNameRe" +
            "sponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameResponse> GetRegulatorParameterListByNameAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        bool AddReadAllRoleToProject(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProject", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddReadAllRoleToProjectResponse")]
        System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        string AddVoltageLevel(Neplan_coordinacion.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevel", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddVoltageLevelResponse")]
        System.Threading.Tasks.Task<string> AddVoltageLevelAsync(Neplan_coordinacion.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        void SetDiagramMinValues(Neplan_coordinacion.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramMinValuesResponse")]
        System.Threading.Tasks.Task SetDiagramMinValuesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        bool SetLineStyle(Neplan_coordinacion.NeplanService.ExternalProject project, string lineType, short lineStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetLineStyle", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetLineStyleResponse")]
        System.Threading.Tasks.Task<bool> SetLineStyleAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineType, short lineStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        Neplan_coordinacion.NeplanService.SetDefaultValuesResponse SetDefaultValues(Neplan_coordinacion.NeplanService.SetDefaultValuesRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValues", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDefaultValuesResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.SetDefaultValuesResponse> SetDefaultValuesAsync(Neplan_coordinacion.NeplanService.SetDefaultValuesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        bool SetDiagramParameterAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttribute", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDiagramParameterAttributeRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        bool SetGraphicLayerWorldCoordinates(Neplan_coordinacion.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinates", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetGraphicLayerWorldCoordinatesRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        Neplan_coordinacion.NeplanService.AddNodesFromListResponse AddNodesFromList(Neplan_coordinacion.NeplanService.AddNodesFromListRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddNodesFromListResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddNodesFromListResponse> AddNodesFromListAsync(Neplan_coordinacion.NeplanService.AddNodesFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        Neplan_coordinacion.NeplanService.AddElementsFromListResponse AddElementsFromList(Neplan_coordinacion.NeplanService.AddElementsFromListRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddElementsFromListResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddElementsFromListResponse> AddElementsFromListAsync(Neplan_coordinacion.NeplanService.AddElementsFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        Neplan_coordinacion.NeplanService.AddSubLoadsFromListResponse AddSubLoadsFromList(Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromList", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsFromListResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoads", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsResponse")]
        bool AddSubLoads(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> loadIdToSubloads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddSubLoads", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddSubLoadsResponse")]
        System.Threading.Tasks.Task<bool> AddSubLoadsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> loadIdToSubloads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubLoadsFromMap", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubLoadsFromMapResponse")]
        System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> GetSubLoadsFromMap(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] loadIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSubLoadsFromMap", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSubLoadsFromMapResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]>> GetSubLoadsFromMapAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] loadIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteSubLoads", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteSubLoadsResponse")]
        bool DeleteSubLoads(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> loadIdToSubloadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteSubLoads", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteSubLoadsResponse")]
        System.Threading.Tasks.Task<bool> DeleteSubLoadsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> loadIdToSubloadNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        void SetDateTimeLastSave(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSave", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SetDateTimeLastSaveResponse")]
        System.Threading.Tasks.Task SetDateTimeLastSaveAsync(Neplan_coordinacion.NeplanService.ExternalProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteElementResponse")]
        bool DeleteElement(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement elementToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteElement", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteElementResponse")]
        System.Threading.Tasks.Task<bool> DeleteElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement elementToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteElementsResponse")]
        bool DeleteElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] elementsToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteElementsResponse")]
        System.Threading.Tasks.Task<bool> DeleteElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] elementsToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteNodeWithElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteNodeWithElementsResponse")]
        bool DeleteNodeWithElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement nodeToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteNodeWithElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteNodeWithElementsResponse")]
        System.Threading.Tasks.Task<bool> DeleteNodeWithElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement nodeToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteNodesWithElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteNodesWithElementsResponse")]
        bool DeleteNodesWithElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] nodesToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteNodesWithElements", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteNodesWithElementsResponse")]
        System.Threading.Tasks.Task<bool> DeleteNodesWithElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] nodesToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByNameRespon" +
            "se")]
        bool AddLineSectionsToLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByNameRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> AddLineSectionsToLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByNamesResp" +
            "onse")]
        bool AddLineSectionsToLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByNamesResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> AddLineSectionsToLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByIDResponse" +
            "")]
        bool AddLineSectionsToLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLineByIDResponse" +
            "")]
        System.Threading.Tasks.Task<bool> AddLineSectionsToLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByIDsRespon" +
            "se")]
        bool AddLineSectionsToLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/AddLineSectionsToLinesByIDsRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> AddLineSectionsToLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByNameR" +
            "esponse")]
        bool DeleteLineSectionsFromLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, string[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByNameR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, string[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByName" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByName" +
            "sResponse")]
        bool DeleteLineSectionsFromLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByName" +
            "s", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByName" +
            "sResponse")]
        System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByIDRes" +
            "ponse")]
        bool DeleteLineSectionsFromLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, string[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLineByIDRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, string[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByIDsR" +
            "esponse")]
        bool DeleteLineSectionsFromLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/DeleteLineSectionsFromLinesByIDsR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByNameRes" +
            "ponse")]
        bool UpdateLineSectionsOfLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByName", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByNameRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByNamesR" +
            "esponse")]
        bool UpdateLineSectionsOfLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByNamesR" +
            "esponse")]
        System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByIDRespo" +
            "nse")]
        bool UpdateLineSectionsOfLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLineByIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByIDsRes" +
            "ponse")]
        bool UpdateLineSectionsOfLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/UpdateLineSectionsOfLinesByIDsRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByNamesResp" +
            "onse")]
        System.Collections.Generic.Dictionary<string, string[]> GetLineSectionsOfLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByNamesResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string[]>> GetLineSectionsOfLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByIDsRespon" +
            "se")]
        System.Collections.Generic.Dictionary<System.Guid, string[]> GetLineSectionsOfLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetLineSectionsOfLinesByIDsRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string[]>> GetLineSectionsOfLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByNamesResponse")]
        System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> GetParameterOfLineSectionsFromLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByNames", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]>> GetParameterOfLineSectionsFromLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByIDsResponse")]
        System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> GetParameterOfLineSectionsFromLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByIDs", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetParameterOfLineSectionsFromLin" +
            "esByIDsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]>> GetParameterOfLineSectionsFromLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortByIDResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        void SwitchElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/SwitchElementAtPortResponse")]
        System.Threading.Tasks.Task SwitchElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortResponse")]
        System.Nullable<bool> GetSwitchOfElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPort", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> GetSwitchOfElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortByIDRespo" +
            "nse")]
        System.Nullable<bool> GetSwitchOfElementAtPortByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortByID", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetSwitchOfElementAtPortByIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> GetSwitchOfElementAtPortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOpenSwitch", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOpenSwitchRespo" +
            "nse")]
        Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchResponse GetAllElementsWithOpenSwitch(Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOpenSwitch", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementsWithOpenSwitchRespo" +
            "nse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchResponse> GetAllElementsWithOpenSwitchAsync(Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        string GetResultSummary(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetResultSummaryResponse")]
        System.Threading.Tasks.Task<string> GetResultSummaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        string[] GetListResultSummary(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummary", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetListResultSummaryResponse")]
        System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetAllElementResults(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResults", ReplyAction="http://www.neplan.ch/Web/External/NeplanService/GetAllElementResultsResponse")]
        System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetAllElementResultsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImportFromListFileAndDoLoadAllocation", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ImportFromListFileAndDoLoadAllocationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string uploadName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings;
        
        public ImportFromListFileAndDoLoadAllocationRequest() {
        }
        
        public ImportFromListFileAndDoLoadAllocationRequest(string uploadName, string projectName, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            this.uploadName = uploadName;
            this.projectName = projectName;
            this.settings = settings;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ImportFromListFileAndDoLoadAllocationResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ImportFromListFileAndDoLoadAllocationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo analysisReturnInfo;
        
        public ImportFromListFileAndDoLoadAllocationResponse() {
        }
        
        public ImportFromListFileAndDoLoadAllocationResponse(Neplan_coordinacion.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocationResult, Neplan_coordinacion.NeplanService.AnalysisReturnInfo analysisReturnInfo) {
            this.ImportFromListFileAndDoLoadAllocationResult = ImportFromListFileAndDoLoadAllocationResult;
            this.analysisReturnInfo = analysisReturnInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Find_Voltage_Level_of_One_Port_Element", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double Voltage;
        
        public Find_Voltage_Level_of_One_Port_ElementRequest() {
        }
        
        public Find_Voltage_Level_of_One_Port_ElementRequest(string projectName, string elementName, double Voltage) {
            this.projectName = projectName;
            this.elementName = elementName;
            this.Voltage = Voltage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Find_Voltage_Level_of_One_Port_ElementResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Find_Voltage_Level_of_One_Port_ElementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool Find_Voltage_Level_of_One_Port_ElementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public double Voltage;
        
        public Find_Voltage_Level_of_One_Port_ElementResponse() {
        }
        
        public Find_Voltage_Level_of_One_Port_ElementResponse(bool Find_Voltage_Level_of_One_Port_ElementResult, double Voltage) {
            this.Find_Voltage_Level_of_One_Port_ElementResult = Find_Voltage_Level_of_One_Port_ElementResult;
            this.Voltage = Voltage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBusBarOf1PortElementByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetBusBarOf1PortElementByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Nullable<System.Guid> elemGuid;
        
        public GetBusBarOf1PortElementByIDRequest() {
        }
        
        public GetBusBarOf1PortElementByIDRequest(string projectName, System.Nullable<System.Guid> elemGuid) {
            this.projectName = projectName;
            this.elemGuid = elemGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBusBarOf1PortElementByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetBusBarOf1PortElementByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetBusBarOf1PortElementByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string busbarName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Nullable<System.Guid> busbarGuid;
        
        public GetBusBarOf1PortElementByIDResponse() {
        }
        
        public GetBusBarOf1PortElementByIDResponse(bool GetBusBarOf1PortElementByIDResult, string busbarName, System.Nullable<System.Guid> busbarGuid) {
            this.GetBusBarOf1PortElementByIDResult = GetBusBarOf1PortElementByIDResult;
            this.busbarName = busbarName;
            this.busbarGuid = busbarGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBusBarOf1PortElementByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetBusBarOf1PortElementByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elemName;
        
        public GetBusBarOf1PortElementByNameRequest() {
        }
        
        public GetBusBarOf1PortElementByNameRequest(string projectName, string elemName) {
            this.projectName = projectName;
            this.elemName = elemName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBusBarOf1PortElementByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetBusBarOf1PortElementByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetBusBarOf1PortElementByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string busbarName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Nullable<System.Guid> busbarGuid;
        
        public GetBusBarOf1PortElementByNameResponse() {
        }
        
        public GetBusBarOf1PortElementByNameResponse(bool GetBusBarOf1PortElementByNameResult, string busbarName, System.Nullable<System.Guid> busbarGuid) {
            this.GetBusBarOf1PortElementByNameResult = GetBusBarOf1PortElementByNameResult;
            this.busbarName = busbarName;
            this.busbarGuid = busbarGuid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateCGMESModel", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ValidateCGMESModelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject externalProject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string tsoName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public bool validationSuccessful;
        
        public ValidateCGMESModelRequest() {
        }
        
        public ValidateCGMESModelRequest(Neplan_coordinacion.NeplanService.ExternalProject externalProject, string tsoName, bool validationSuccessful) {
            this.externalProject = externalProject;
            this.tsoName = tsoName;
            this.validationSuccessful = validationSuccessful;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateCGMESModelResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class ValidateCGMESModelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public byte[] ValidateCGMESModelResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public bool validationSuccessful;
        
        public ValidateCGMESModelResponse() {
        }
        
        public ValidateCGMESModelResponse(byte[] ValidateCGMESModelResult, bool validationSuccessful) {
            this.ValidateCGMESModelResult = ValidateCGMESModelResult;
            this.validationSuccessful = validationSuccessful;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomerTypeDefinitions", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCustomerTypeDefinitionsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public GetCustomerTypeDefinitionsRequest() {
        }
        
        public GetCustomerTypeDefinitionsRequest(Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomerTypeDefinitionsResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCustomerTypeDefinitionsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetCustomerTypeDefinitionsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string[] customerTypeNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double[] factorsP;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double[] factorsQ;
        
        public GetCustomerTypeDefinitionsResponse() {
        }
        
        public GetCustomerTypeDefinitionsResponse(bool GetCustomerTypeDefinitionsResult, string[] customerTypeNames, double[] factorsP, double[] factorsQ) {
            this.GetCustomerTypeDefinitionsResult = GetCustomerTypeDefinitionsResult;
            this.customerTypeNames = customerTypeNames;
            this.factorsP = factorsP;
            this.factorsQ = factorsQ;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGasNode", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGasNodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public double x;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public double y;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string symbolName;
        
        public InsertGasNodeRequest() {
        }
        
        public InsertGasNodeRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string libraryType, string xmlData, double x, double y, string symbolName) {
            this.project = project;
            this.name = name;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.x = x;
            this.y = y;
            this.symbolName = symbolName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGasNodeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGasNodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertGasNodeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public InsertGasNodeResponse() {
        }
        
        public InsertGasNodeResponse(string InsertGasNodeResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.InsertGasNodeResult = InsertGasNodeResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNode", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public double x;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public double y;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string symbolName;
        
        public InsertNodeRequest() {
        }
        
        public InsertNodeRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.x = x;
            this.y = y;
            this.symbolName = symbolName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertNodeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public InsertNodeResponse() {
        }
        
        public InsertNodeResponse(string InsertNodeResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.InsertNodeResult = InsertNodeResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeWithoutGraphic", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeWithoutGraphicRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        public InsertNodeWithoutGraphicRequest() {
        }
        
        public InsertNodeWithoutGraphicRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertNodeWithoutGraphicResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertNodeWithoutGraphicResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertNodeWithoutGraphicResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public InsertNodeWithoutGraphicResponse() {
        }
        
        public InsertNodeWithoutGraphicResponse(string InsertNodeWithoutGraphicResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.InsertNodeWithoutGraphicResult = InsertNodeWithoutGraphicResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertBusbar", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertBusbarRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double un;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double fn;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public double[] coordinates;
        
        public InsertBusbarRequest() {
        }
        
        public InsertBusbarRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates) {
            this.project = project;
            this.name = name;
            this.un = un;
            this.fn = fn;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.coordinates = coordinates;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertBusbarResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertBusbarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertBusbarResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public InsertBusbarResponse() {
        }
        
        public InsertBusbarResponse(string InsertBusbarResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.InsertBusbarResult = InsertBusbarResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Insert1PortElement", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Insert1PortElementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string fromNode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string libraryType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string xmlData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public int phase;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public double[] coordinatesLink;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string symbolName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public double symbolAngle;
        
        public Insert1PortElementRequest() {
        }
        
        public Insert1PortElementRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle) {
            this.project = project;
            this.name = name;
            this.fromNode = fromNode;
            this.elementTypeName = elementTypeName;
            this.libraryType = libraryType;
            this.xmlData = xmlData;
            this.phase = phase;
            this.coordinatesLink = coordinatesLink;
            this.symbolName = symbolName;
            this.symbolAngle = symbolAngle;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Insert1PortElementResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class Insert1PortElementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string Insert1PortElementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public Insert1PortElementResponse() {
        }
        
        public Insert1PortElementResponse(string Insert1PortElementResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.Insert1PortElementResult = Insert1PortElementResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGraphicLayer", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGraphicLayerRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string diagramID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string graphicLayerName;
        
        public InsertGraphicLayerRequest() {
        }
        
        public InsertGraphicLayerRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramID, string graphicLayerName) {
            this.project = project;
            this.diagramID = diagramID;
            this.graphicLayerName = graphicLayerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertGraphicLayerResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class InsertGraphicLayerResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string InsertGraphicLayerResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public InsertGraphicLayerResponse() {
        }
        
        public InsertGraphicLayerResponse(string InsertGraphicLayerResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.InsertGraphicLayerResult = InsertGraphicLayerResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllDiagramNames", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllDiagramNamesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public GetAllDiagramNamesRequest() {
        }
        
        public GetAllDiagramNamesRequest(Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllDiagramNamesResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllDiagramNamesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllDiagramNamesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<System.Guid, string> dictDiagram;
        
        public GetAllDiagramNamesResponse() {
        }
        
        public GetAllDiagramNamesResponse(bool GetAllDiagramNamesResult, System.Collections.Generic.Dictionary<System.Guid, string> dictDiagram) {
            this.GetAllDiagramNamesResult = GetAllDiagramNamesResult;
            this.dictDiagram = dictDiagram;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfElement", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfElementRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string diagramName;
        
        public GetCoordinatesOfElementRequest() {
        }
        
        public GetCoordinatesOfElementRequest(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string diagramName) {
            this.project = project;
            this.elementID = elementID;
            this.diagramName = diagramName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfElementResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfElementResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetCoordinatesOfElementResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public double xLeft;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double yBottom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double xRight;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public double yTop;
        
        public GetCoordinatesOfElementResponse() {
        }
        
        public GetCoordinatesOfElementResponse(bool GetCoordinatesOfElementResult, double xLeft, double yBottom, double xRight, double yTop) {
            this.GetCoordinatesOfElementResult = GetCoordinatesOfElementResult;
            this.xLeft = xLeft;
            this.yBottom = yBottom;
            this.xRight = xRight;
            this.yTop = yTop;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfElementByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfElementByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string diagramName;
        
        public GetCoordinatesOfElementByNameRequest() {
        }
        
        public GetCoordinatesOfElementByNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string diagramName) {
            this.project = project;
            this.elementName = elementName;
            this.elementType = elementType;
            this.diagramName = diagramName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfElementByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfElementByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetCoordinatesOfElementByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public double xLeft;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public double yBottom;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public double xRight;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public double yTop;
        
        public GetCoordinatesOfElementByNameResponse() {
        }
        
        public GetCoordinatesOfElementByNameResponse(bool GetCoordinatesOfElementByNameResult, double xLeft, double yBottom, double xRight, double yTop) {
            this.GetCoordinatesOfElementByNameResult = GetCoordinatesOfElementByNameResult;
            this.xLeft = xLeft;
            this.yBottom = yBottom;
            this.xRight = xRight;
            this.yTop = yTop;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfAllElements", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfAllElementsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string diagramName;
        
        public GetCoordinatesOfAllElementsRequest() {
        }
        
        public GetCoordinatesOfAllElementsRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName) {
            this.project = project;
            this.diagramName = diagramName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCoordinatesOfAllElementsResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetCoordinatesOfAllElementsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetCoordinatesOfAllElementsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<Neplan_coordinacion.NeplanService.ExternalElement, double[]> elementCoordinates;
        
        public GetCoordinatesOfAllElementsResponse() {
        }
        
        public GetCoordinatesOfAllElementsResponse(bool GetCoordinatesOfAllElementsResult, System.Collections.Generic.Dictionary<Neplan_coordinacion.NeplanService.ExternalElement, double[]> elementCoordinates) {
            this.GetCoordinatesOfAllElementsResult = GetCoordinatesOfAllElementsResult;
            this.elementCoordinates = elementCoordinates;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfProject", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfProjectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfProjectRequest() {
        }
        
        public GetAllElementsOfProjectRequest(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.project = project;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfProjectResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfProjectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsOfProjectResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfProjectResponse() {
        }
        
        public GetAllElementsOfProjectResponse(bool GetAllElementsOfProjectResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.GetAllElementsOfProjectResult = GetAllElementsOfProjectResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfElementType", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfElementTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfElementTypeRequest() {
        }
        
        public GetAllElementsOfElementTypeRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementType, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.project = project;
            this.elementType = elementType;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfElementTypeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfElementTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsOfElementTypeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfElementTypeResponse() {
        }
        
        public GetAllElementsOfElementTypeResponse(bool GetAllElementsOfElementTypeResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.GetAllElementsOfElementTypeResult = GetAllElementsOfElementTypeResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfArea", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfAreaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string areaName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfAreaRequest() {
        }
        
        public GetAllElementsOfAreaRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.project = project;
            this.areaName = areaName;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfAreaResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfAreaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsOfAreaResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfAreaResponse() {
        }
        
        public GetAllElementsOfAreaResponse(bool GetAllElementsOfAreaResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.GetAllElementsOfAreaResult = GetAllElementsOfAreaResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfFeeder", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfFeederRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string feederName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfFeederRequest() {
        }
        
        public GetAllElementsOfFeederRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.project = project;
            this.feederName = feederName;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfFeederResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfFeederResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsOfFeederResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfFeederResponse() {
        }
        
        public GetAllElementsOfFeederResponse(bool GetAllElementsOfFeederResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.GetAllElementsOfFeederResult = GetAllElementsOfFeederResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfZone", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfZoneRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string zoneName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfZoneRequest() {
        }
        
        public GetAllElementsOfZoneRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.project = project;
            this.zoneName = zoneName;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsOfZoneResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsOfZoneResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsOfZoneResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> elementNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> elementTypes;
        
        public GetAllElementsOfZoneResponse() {
        }
        
        public GetAllElementsOfZoneResponse(bool GetAllElementsOfZoneResult, System.Collections.Generic.Dictionary<string, string> elementNames, System.Collections.Generic.Dictionary<string, string> elementTypes) {
            this.GetAllElementsOfZoneResult = GetAllElementsOfZoneResult;
            this.elementNames = elementNames;
            this.elementTypes = elementTypes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByNameandType", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameandTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=11)]
        public string staticFeederID;
        
        public GetElementDataByNameandTypeRequest() {
        }
        
        public GetElementDataByNameandTypeRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.project = project;
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByNameandTypeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameandTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string staticFeederID;
        
        public GetElementDataByNameandTypeResponse() {
        }
        
        public GetElementDataByNameandTypeResponse(System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=11)]
        public string staticFeederID;
        
        public GetElementDataByNameRequest() {
        }
        
        public GetElementDataByNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.project = project;
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementTypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string staticFeederID;
        
        public GetElementDataByNameResponse() {
        }
        
        public GetElementDataByNameResponse(string elementName, string elementTypeName, System.Guid elementID, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.elementName = elementName;
            this.elementTypeName = elementTypeName;
            this.elementID = elementID;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByIDandType", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByIDandTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Guid elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=9)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=10)]
        public string staticFeederID;
        
        public GetElementDataByIDandTypeRequest() {
        }
        
        public GetElementDataByIDandTypeRequest(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.project = project;
            this.elementID = elementID;
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementDataByIDandTypeResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementDataByIDandTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string aliasName1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string aliasName2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public bool isInMaintenance;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=5)]
        public bool IsProjected;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=6)]
        public string zoneID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=7)]
        public string subAreaID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=8)]
        public string staticFeederID;
        
        public GetElementDataByIDandTypeResponse() {
        }
        
        public GetElementDataByIDandTypeResponse(string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID, string staticFeederID) {
            this.elementName = elementName;
            this.aliasName1 = aliasName1;
            this.aliasName2 = aliasName2;
            this.description = description;
            this.isInMaintenance = isInMaintenance;
            this.IsProjected = IsProjected;
            this.zoneID = zoneID;
            this.subAreaID = subAreaID;
            this.staticFeederID = staticFeederID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeValue;
        
        public GetElementAttributeByIDRequest() {
        }
        
        public GetElementAttributeByIDRequest(string projectName, string elementID, string attributeName, string attributeValue) {
            this.projectName = projectName;
            this.elementID = elementID;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetElementAttributeByIDResponse() {
        }
        
        public GetElementAttributeByIDResponse(bool GetElementAttributeByIDResult, string attributeValue) {
            this.GetElementAttributeByIDResult = GetElementAttributeByIDResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeByElementID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeByElementIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeValue;
        
        public GetAttributeByElementIDRequest() {
        }
        
        public GetAttributeByElementIDRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue) {
            this.project = project;
            this.elementID = elementID;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeByElementIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeByElementIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAttributeByElementIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetAttributeByElementIDResponse() {
        }
        
        public GetAttributeByElementIDResponse(bool GetAttributeByElementIDResult, string attributeValue) {
            this.GetAttributeByElementIDResult = GetAttributeByElementIDResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementListAttributeByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementListAttributeByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string[] listElementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> attributeValueList;
        
        public GetElementListAttributeByIDRequest() {
        }
        
        public GetElementListAttributeByIDRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, System.Collections.Generic.Dictionary<string, string> attributeValueList) {
            this.project = project;
            this.listElementID = listElementID;
            this.attributeName = attributeName;
            this.attributeValueList = attributeValueList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementListAttributeByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementListAttributeByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementListAttributeByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> attributeValueList;
        
        public GetElementListAttributeByIDResponse() {
        }
        
        public GetElementListAttributeByIDResponse(bool GetElementListAttributeByIDResult, System.Collections.Generic.Dictionary<string, string> attributeValueList) {
            this.GetElementListAttributeByIDResult = GetElementListAttributeByIDResult;
            this.attributeValueList = attributeValueList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeListByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeListByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetElementAttributeListByIDRequest() {
        }
        
        public GetElementAttributeListByIDRequest(string projectName, string elementID, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.projectName = projectName;
            this.elementID = elementID;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeListByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeListByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeListByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetElementAttributeListByIDResponse() {
        }
        
        public GetElementAttributeListByIDResponse(bool GetElementAttributeListByIDResult, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.GetElementAttributeListByIDResult = GetElementAttributeListByIDResult;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeListByElementID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeListByElementIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetAttributeListByElementIDRequest() {
        }
        
        public GetAttributeListByElementIDRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.project = project;
            this.elementID = elementID;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeListByElementIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeListByElementIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAttributeListByElementIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetAttributeListByElementIDResponse() {
        }
        
        public GetAttributeListByElementIDResponse(bool GetAttributeListByElementIDResult, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.GetAttributeListByElementIDResult = GetAttributeListByElementIDResult;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string attributeValue;
        
        public GetElementAttributeByNameRequest() {
        }
        
        public GetElementAttributeByNameRequest(string projectName, string elementName, string elementType, string attributeName, string attributeValue) {
            this.projectName = projectName;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetElementAttributeByNameResponse() {
        }
        
        public GetElementAttributeByNameResponse(bool GetElementAttributeByNameResult, string attributeValue) {
            this.GetElementAttributeByNameResult = GetElementAttributeByNameResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeByElementName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeByElementNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string attributeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=4)]
        public string attributeValue;
        
        public GetAttributeByElementNameRequest() {
        }
        
        public GetAttributeByElementNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            this.project = project;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName = attributeName;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeByElementNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeByElementNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAttributeByElementNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string attributeValue;
        
        public GetAttributeByElementNameResponse() {
        }
        
        public GetAttributeByElementNameResponse(bool GetAttributeByElementNameResult, string attributeValue) {
            this.GetAttributeByElementNameResult = GetAttributeByElementNameResult;
            this.attributeValue = attributeValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeListByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeListByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public string projectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetElementAttributeListByNameRequest() {
        }
        
        public GetElementAttributeListByNameRequest(string projectName, string elementName, string elementType, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.projectName = projectName;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetElementAttributeListByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetElementAttributeListByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetElementAttributeListByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetElementAttributeListByNameResponse() {
        }
        
        public GetElementAttributeListByNameResponse(bool GetElementAttributeListByNameResult, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.GetElementAttributeListByNameResult = GetElementAttributeListByNameResult;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeListByElementName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeListByElementNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string elementName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetAttributeListByElementNameRequest() {
        }
        
        public GetAttributeListByElementNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.project = project;
            this.elementName = elementName;
            this.elementType = elementType;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAttributeListByElementNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAttributeListByElementNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAttributeListByElementNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> attributeName2Value;
        
        public GetAttributeListByElementNameResponse() {
        }
        
        public GetAttributeListByElementNameResponse(bool GetAttributeListByElementNameResult, System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            this.GetAttributeListByElementNameResult = GetAttributeListByElementNameResult;
            this.attributeName2Value = attributeName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string regulatorID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string parameterName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string parameterValue;
        
        public GetRegulatorParameterByIDRequest() {
        }
        
        public GetRegulatorParameterByIDRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, string parameterValue) {
            this.project = project;
            this.regulatorID = regulatorID;
            this.parameterName = parameterName;
            this.parameterValue = parameterValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetRegulatorParameterByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string parameterValue;
        
        public GetRegulatorParameterByIDResponse() {
        }
        
        public GetRegulatorParameterByIDResponse(bool GetRegulatorParameterByIDResult, string parameterValue) {
            this.GetRegulatorParameterByIDResult = GetRegulatorParameterByIDResult;
            this.parameterValue = parameterValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterListByID", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterListByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string regulatorID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> parameterName2Value;
        
        public GetRegulatorParameterListByIDRequest() {
        }
        
        public GetRegulatorParameterListByIDRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            this.project = project;
            this.regulatorID = regulatorID;
            this.parameterName2Value = parameterName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterListByIDResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterListByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetRegulatorParameterListByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> parameterName2Value;
        
        public GetRegulatorParameterListByIDResponse() {
        }
        
        public GetRegulatorParameterListByIDResponse(bool GetRegulatorParameterListByIDResult, System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            this.GetRegulatorParameterListByIDResult = GetRegulatorParameterListByIDResult;
            this.parameterName2Value = parameterName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string regulatorName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string parameterName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public string parameterValue;
        
        public GetRegulatorParameterByNameRequest() {
        }
        
        public GetRegulatorParameterByNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, string parameterValue) {
            this.project = project;
            this.regulatorName = regulatorName;
            this.parameterName = parameterName;
            this.parameterValue = parameterValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetRegulatorParameterByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string parameterValue;
        
        public GetRegulatorParameterByNameResponse() {
        }
        
        public GetRegulatorParameterByNameResponse(bool GetRegulatorParameterByNameResult, string parameterValue) {
            this.GetRegulatorParameterByNameResult = GetRegulatorParameterByNameResult;
            this.parameterValue = parameterValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterListByName", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterListByNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public string regulatorName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public System.Collections.Generic.Dictionary<string, string> parameterName2Value;
        
        public GetRegulatorParameterListByNameRequest() {
        }
        
        public GetRegulatorParameterListByNameRequest(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            this.project = project;
            this.regulatorName = regulatorName;
            this.parameterName2Value = parameterName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegulatorParameterListByNameResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetRegulatorParameterListByNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetRegulatorParameterListByNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Collections.Generic.Dictionary<string, string> parameterName2Value;
        
        public GetRegulatorParameterListByNameResponse() {
        }
        
        public GetRegulatorParameterListByNameResponse(bool GetRegulatorParameterListByNameResult, System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            this.GetRegulatorParameterListByNameResult = GetRegulatorParameterListByNameResult;
            this.parameterName2Value = parameterName2Value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultValues", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class SetDefaultValuesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public short defaultType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public short phaseDomination;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=3)]
        public bool isAnsi;
        
        public SetDefaultValuesRequest() {
        }
        
        public SetDefaultValuesRequest(Neplan_coordinacion.NeplanService.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi) {
            this.project = project;
            this.defaultType = defaultType;
            this.phaseDomination = phaseDomination;
            this.isAnsi = isAnsi;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultValuesResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class SetDefaultValuesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool SetDefaultValuesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public SetDefaultValuesResponse() {
        }
        
        public SetDefaultValuesResponse(bool SetDefaultValuesResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.SetDefaultValuesResult = SetDefaultValuesResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddNodesFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddNodesFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ImportElementItem[] listElements;
        
        public AddNodesFromListRequest() {
        }
        
        public AddNodesFromListRequest(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportElementItem[] listElements) {
            this.project = project;
            this.listElements = listElements;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddNodesFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddNodesFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddNodesFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public AddNodesFromListResponse() {
        }
        
        public AddNodesFromListResponse(bool AddNodesFromListResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.AddNodesFromListResult = AddNodesFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddElementsFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddElementsFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ImportElementItem[] listElements;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string elementTypeName;
        
        public AddElementsFromListRequest() {
        }
        
        public AddElementsFromListRequest(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string elementTypeName) {
            this.project = project;
            this.listElements = listElements;
            this.elementTypeName = elementTypeName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddElementsFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddElementsFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddElementsFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public AddElementsFromListResponse() {
        }
        
        public AddElementsFromListResponse(bool AddElementsFromListResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.AddElementsFromListResult = AddElementsFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSubLoadsFromList", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddSubLoadsFromListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.LoadData[] listLoadData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=2)]
        public string loadID;
        
        public AddSubLoadsFromListRequest() {
        }
        
        public AddSubLoadsFromListRequest(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.LoadData[] listLoadData, string loadID) {
            this.project = project;
            this.listLoadData = listLoadData;
            this.loadID = loadID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddSubLoadsFromListResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class AddSubLoadsFromListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool AddSubLoadsFromListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        public AddSubLoadsFromListResponse() {
        }
        
        public AddSubLoadsFromListResponse(bool AddSubLoadsFromListResult, Neplan_coordinacion.NeplanService.ExternalProject project) {
            this.AddSubLoadsFromListResult = AddSubLoadsFromListResult;
            this.project = project;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsWithOpenSwitch", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsWithOpenSwitchRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public Neplan_coordinacion.NeplanService.ExternalProject project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Guid[] elementIDs;
        
        public GetAllElementsWithOpenSwitchRequest() {
        }
        
        public GetAllElementsWithOpenSwitchRequest(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs) {
            this.project = project;
            this.elementIDs = elementIDs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllElementsWithOpenSwitchResponse", WrapperNamespace="http://www.neplan.ch/Web/External", IsWrapped=true)]
    public partial class GetAllElementsWithOpenSwitchResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=0)]
        public bool GetAllElementsWithOpenSwitchResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.neplan.ch/Web/External", Order=1)]
        public System.Guid[] elementIDs;
        
        public GetAllElementsWithOpenSwitchResponse() {
        }
        
        public GetAllElementsWithOpenSwitchResponse(bool GetAllElementsWithOpenSwitchResult, System.Guid[] elementIDs) {
            this.GetAllElementsWithOpenSwitchResult = GetAllElementsWithOpenSwitchResult;
            this.elementIDs = elementIDs;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NeplanServiceChannel : Neplan_coordinacion.NeplanService.NeplanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NeplanServiceClient : System.ServiceModel.ClientBase<Neplan_coordinacion.NeplanService.NeplanService>, Neplan_coordinacion.NeplanService.NeplanService {
        
        public NeplanServiceClient() {
        }
        
        public NeplanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NeplanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NeplanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NeplanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetResultElementByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultElementByID(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<string> GetResultElementByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultElementByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetResultsElementsByID(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultsElementsByID(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetResultsElementsByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementID, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultsElementsByIDAsync(project, elementID, portNr, analysisType, simulationDateTime);
        }
        
        public string GetResultElementByName(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultElementByName(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<string> GetResultElementByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, int portNr, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultElementByNameAsync(project, elementName, elementTypeName, portNr, analysisType, simulationDateTime);
        }
        
        public string GetFeasibilityResults(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetFeasibilityResults(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<string> GetFeasibilityResultsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetFeasibilityResultsAsync(project, analysisType);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetResultOfElements(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementIds, string[] variables, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultOfElements(project, elementIds, variables, analysisType, simulationDateTime);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetResultOfElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] elementIds, string[] variables, string analysisType, System.Nullable<System.DateTime> simulationDateTime) {
            return base.Channel.GetResultOfElementsAsync(project, elementIds, variables, analysisType, simulationDateTime);
        }
        
        public System.IO.Stream GetResults(string analysisID) {
            return base.Channel.GetResults(analysisID);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetResultsAsync(string analysisID) {
            return base.Channel.GetResultsAsync(analysisID);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo AnalyseVariantWithAnalysisSettings(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.AnalyseVariantWithAnalysisSettings(project, analysisReferenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> AnalyseVariantWithAnalysisSettingsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.AnalyseVariantWithAnalysisSettingsAsync(project, analysisReferenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML, settings);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo AnalyseVariant(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML) {
            return base.Channel.AnalyseVariant(project, analysisReferenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> AnalyseVariantAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisReferenceID, string analysisModule, string calcNameID, string analysisMethode, string conditions, string analysisLoadOptionXML) {
            return base.Channel.AnalyseVariantAsync(project, analysisReferenceID, analysisModule, calcNameID, analysisMethode, conditions, analysisLoadOptionXML);
        }
        
        public bool IsAnalysisDone(string analysisReferenceID) {
            return base.Channel.IsAnalysisDone(analysisReferenceID);
        }
        
        public System.Threading.Tasks.Task<bool> IsAnalysisDoneAsync(string analysisReferenceID) {
            return base.Channel.IsAnalysisDoneAsync(analysisReferenceID);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo DoAnalysisFromFiles(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.DoAnalysisFromFiles(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> DoAnalysisFromFilesAsync(string uploadName, string analysisModule, string copySettingsFromProjectName, string fromTime, string toTime, int timeIncrement) {
            return base.Channel.DoAnalysisFromFilesAsync(uploadName, analysisModule, copySettingsFromProjectName, fromTime, toTime, timeIncrement);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo EnergyCalculationFromFiles(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName) {
            return base.Channel.EnergyCalculationFromFiles(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> EnergyCalculationFromFilesAsync(string uploadName, string fromTime, string toTime, int timeIncrement, string copySettingsFromProjectName) {
            return base.Channel.EnergyCalculationFromFilesAsync(uploadName, fromTime, toTime, timeIncrement, copySettingsFromProjectName);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromDB(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromDB(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromDBAsync(string projectName, string measurementDefinitionName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromDBAsync(projectName, measurementDefinitionName, fromTime, toTime, timeIncrement, settings);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFileAndProjectName(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectName(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAndProjectNameAsync(string uploadedMeasurementFileName, string projectName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAndProjectNameAsync(uploadedMeasurementFileName, projectName, fromTime, toTime, timeIncrement, settings);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo LoadAllocationFromMeasurmentFile(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFile(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> LoadAllocationFromMeasurmentFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadedMeasurementFileName, string fromTime, string toTime, int timeIncrement, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings) {
            return base.Channel.LoadAllocationFromMeasurmentFileAsync(project, uploadedMeasurementFileName, fromTime, toTime, timeIncrement, settings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationResponse Neplan_coordinacion.NeplanService.NeplanService.ImportFromListFileAndDoLoadAllocation(Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request) {
            return base.Channel.ImportFromListFileAndDoLoadAllocation(request);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromListFileAndDoLoadAllocation(string uploadName, string projectName, Neplan_coordinacion.NeplanService.AnalysisParameterSettings settings, out Neplan_coordinacion.NeplanService.AnalysisReturnInfo analysisReturnInfo) {
            Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest inValue = new Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest();
            inValue.uploadName = uploadName;
            inValue.projectName = projectName;
            inValue.settings = settings;
            Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).ImportFromListFileAndDoLoadAllocation(inValue);
            analysisReturnInfo = retVal.analysisReturnInfo;
            return retVal.ImportFromListFileAndDoLoadAllocationResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationResponse> ImportFromListFileAndDoLoadAllocationAsync(Neplan_coordinacion.NeplanService.ImportFromListFileAndDoLoadAllocationRequest request) {
            return base.Channel.ImportFromListFileAndDoLoadAllocationAsync(request);
        }
        
        public short AreCalculationResultsValid(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisModule, string calcNameID) {
            return base.Channel.AreCalculationResultsValid(project, analysisModule, calcNameID);
        }
        
        public System.Threading.Tasks.Task<short> AreCalculationResultsValidAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisModule, string calcNameID) {
            return base.Channel.AreCalculationResultsValidAsync(project, analysisModule, calcNameID);
        }
        
        public Neplan_coordinacion.NeplanService.AnalysisReturnInfo StartAnalysis(System.IO.Stream stream) {
            return base.Channel.StartAnalysis(stream);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AnalysisReturnInfo> StartAnalysisAsync(System.IO.Stream stream) {
            return base.Channel.StartAnalysisAsync(stream);
        }
        
        public void StopAnalysis(string analysisReferenceID) {
            base.Channel.StopAnalysis(analysisReferenceID);
        }
        
        public System.Threading.Tasks.Task StopAnalysisAsync(string analysisReferenceID) {
            return base.Channel.StopAnalysisAsync(analysisReferenceID);
        }
        
        public bool DeleteAnaylsisLogFile(string fileName) {
            return base.Channel.DeleteAnaylsisLogFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnaylsisLogFileAsync(string fileName) {
            return base.Channel.DeleteAnaylsisLogFileAsync(fileName);
        }
        
        public bool DeleteAnalysisResultFile(string fileName) {
            return base.Channel.DeleteAnalysisResultFile(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnalysisResultFileAsync(string fileName) {
            return base.Channel.DeleteAnalysisResultFileAsync(fileName);
        }
        
        public bool DeleteProject(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.DeleteProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.DeleteProjectAsync(project);
        }
        
        public bool MarkedProjectAsDeleted(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.MarkedProjectAsDeleted(project);
        }
        
        public System.Threading.Tasks.Task<bool> MarkedProjectAsDeletedAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.MarkedProjectAsDeletedAsync(project);
        }
        
        public string removeAllExpiredProjects(string code) {
            return base.Channel.removeAllExpiredProjects(code);
        }
        
        public System.Threading.Tasks.Task<string> removeAllExpiredProjectsAsync(string code) {
            return base.Channel.removeAllExpiredProjectsAsync(code);
        }
        
        public string createDailyBackup(bool isAzure, string code) {
            return base.Channel.createDailyBackup(isAzure, code);
        }
        
        public System.Threading.Tasks.Task<string> createDailyBackupAsync(bool isAzure, string code) {
            return base.Channel.createDailyBackupAsync(isAzure, code);
        }
        
        public int ImportFromFile(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram) {
            return base.Channel.ImportFromFile(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }
        
        public System.Threading.Tasks.Task<int> ImportFromFileAsync(string uploadName, string projectName, bool withGraphic, string copySettingsFromProjectName, bool merge, bool mergeOnNewDiagram) {
            return base.Channel.ImportFromFileAsync(uploadName, projectName, withGraphic, copySettingsFromProjectName, merge, mergeOnNewDiagram);
        }
        
        public bool AddFeederFromList(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportFeederItem[] feederList) {
            return base.Channel.AddFeederFromList(project, feederList);
        }
        
        public System.Threading.Tasks.Task<bool> AddFeederFromListAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportFeederItem[] feederList) {
            return base.Channel.AddFeederFromListAsync(project, feederList);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromList(Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromList(listElements, projectName, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromListAsync(Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListAsync(listElements, projectName, copySettingsFromProjectName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromListFile(string uploadName, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListFile(uploadName, projectName, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromListFileAsync(string uploadName, string projectName, string copySettingsFromProjectName) {
            return base.Channel.ImportFromListFileAsync(uploadName, projectName, copySettingsFromProjectName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject MergeProjectFromListFile(string uploadName, string projectToMerge, bool mergeOnNewDiagram) {
            return base.Channel.MergeProjectFromListFile(uploadName, projectToMerge, mergeOnNewDiagram);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> MergeProjectFromListFileAsync(string uploadName, string projectToMerge, bool mergeOnNewDiagram) {
            return base.Channel.MergeProjectFromListFileAsync(uploadName, projectToMerge, mergeOnNewDiagram);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDE(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDE(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEAsync(string path1, string path2, string path3, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEAsync(path1, path2, path3, copySettingsFromProjectName, withGraphic);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDEFiles(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEFiles(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEFilesAsync(string cdeFilename, string ndbFilename, string xmlFilename, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEFilesAsync(cdeFilename, ndbFilename, xmlFilename, copySettingsFromProjectName, withGraphic);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromCDEZipFile(string zipFile, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEZipFile(zipFile, copySettingsFromProjectName, withGraphic);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromCDEZipFileAsync(string zipFile, string copySettingsFromProjectName, bool withGraphic) {
            return base.Channel.ImportFromCDEZipFileAsync(zipFile, copySettingsFromProjectName, withGraphic);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromPSSEFiles(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor) {
            return base.Channel.ImportFromPSSEFiles(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName, scalingFactor);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromPSSEFilesAsync(string rawFilename, string seqFilename, string dyrFilename, string drwFilename, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor) {
            return base.Channel.ImportFromPSSEFilesAsync(rawFilename, seqFilename, dyrFilename, drwFilename, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName, scalingFactor);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject ImportFromPSSEZipFile(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor) {
            return base.Channel.ImportFromPSSEZipFile(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName, scalingFactor);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> ImportFromPSSEZipFileAsync(string zipFile, int psseVersion, bool ukr, bool withStations, bool withBreakers, int charNumStations, int nameRule, int lineQuant, string copySettingsFromProjectName, double scalingFactor) {
            return base.Channel.ImportFromPSSEZipFileAsync(zipFile, psseVersion, ukr, withStations, withBreakers, charNumStations, nameRule, lineQuant, copySettingsFromProjectName, scalingFactor);
        }
        
        public int ImportFromShapeFile(string path, string projectName) {
            return base.Channel.ImportFromShapeFile(path, projectName);
        }
        
        public System.Threading.Tasks.Task<int> ImportFromShapeFileAsync(string path, string projectName) {
            return base.Channel.ImportFromShapeFileAsync(path, projectName);
        }
        
        public bool ImportFromNDB(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType) {
            return base.Channel.ImportFromNDB(project, uploadName, origFileName, mediumType);
        }
        
        public System.Threading.Tasks.Task<bool> ImportFromNDBAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string origFileName, string mediumType) {
            return base.Channel.ImportFromNDBAsync(project, uploadName, origFileName, mediumType);
        }
        
        public bool ImportMeasuredDataFromXMlFile(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string definitionName) {
            return base.Channel.ImportMeasuredDataFromXMlFile(project, uploadName, definitionName);
        }
        
        public System.Threading.Tasks.Task<bool> ImportMeasuredDataFromXMlFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName, string definitionName) {
            return base.Channel.ImportMeasuredDataFromXMlFileAsync(project, uploadName, definitionName);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode ImportNepOper(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName) {
            return base.Channel.ImportNepOper(project, uploadName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> ImportNepOperAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName) {
            return base.Channel.ImportNepOperAsync(project, uploadName);
        }
        
        public int SetElevationToAllNodes(Neplan_coordinacion.NeplanService.ExternalProject project, string urlStub) {
            return base.Channel.SetElevationToAllNodes(project, urlStub);
        }
        
        public System.Threading.Tasks.Task<int> SetElevationToAllNodesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string urlStub) {
            return base.Channel.SetElevationToAllNodesAsync(project, urlStub);
        }
        
        public System.IO.Stream ExportProjectToNEP360(string projectName) {
            return base.Channel.ExportProjectToNEP360(projectName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> ExportProjectToNEP360Async(string projectName) {
            return base.Channel.ExportProjectToNEP360Async(projectName);
        }
        
        public void WriteMessageToLogFile(Neplan_coordinacion.NeplanService.ExternalProject project, string text, string logLvl) {
            base.Channel.WriteMessageToLogFile(project, text, logLvl);
        }
        
        public System.Threading.Tasks.Task WriteMessageToLogFileAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string text, string logLvl) {
            return base.Channel.WriteMessageToLogFileAsync(project, text, logLvl);
        }
        
        public bool DeleteUserLogFile() {
            return base.Channel.DeleteUserLogFile();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserLogFileAsync() {
            return base.Channel.DeleteUserLogFileAsync();
        }
        
        public string GetLogFileAsString() {
            return base.Channel.GetLogFileAsString();
        }
        
        public System.Threading.Tasks.Task<string> GetLogFileAsStringAsync() {
            return base.Channel.GetLogFileAsStringAsync();
        }
        
        public string[] GetLogFileAsList() {
            return base.Channel.GetLogFileAsList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetLogFileAsListAsync() {
            return base.Channel.GetLogFileAsListAsync();
        }
        
        public string TextUpload(System.IO.Stream stream) {
            return base.Channel.TextUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> TextUploadAsync(System.IO.Stream stream) {
            return base.Channel.TextUploadAsync(stream);
        }
        
        public string XMLUpload(System.IO.Stream stream) {
            return base.Channel.XMLUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> XMLUploadAsync(System.IO.Stream stream) {
            return base.Channel.XMLUploadAsync(stream);
        }
        
        public string CDEUpload(System.IO.Stream stream) {
            return base.Channel.CDEUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> CDEUploadAsync(System.IO.Stream stream) {
            return base.Channel.CDEUploadAsync(stream);
        }
        
        public string NDBUpload(System.IO.Stream stream) {
            return base.Channel.NDBUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> NDBUploadAsync(System.IO.Stream stream) {
            return base.Channel.NDBUploadAsync(stream);
        }
        
        public string NepOperUpload(System.IO.Stream stream) {
            return base.Channel.NepOperUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> NepOperUploadAsync(System.IO.Stream stream) {
            return base.Channel.NepOperUploadAsync(stream);
        }
        
        public string Nep360Upload(System.IO.Stream stream) {
            return base.Channel.Nep360Upload(stream);
        }
        
        public System.Threading.Tasks.Task<string> Nep360UploadAsync(System.IO.Stream stream) {
            return base.Channel.Nep360UploadAsync(stream);
        }
        
        public string ZipUpload(System.IO.Stream stream) {
            return base.Channel.ZipUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> ZipUploadAsync(System.IO.Stream stream) {
            return base.Channel.ZipUploadAsync(stream);
        }
        
        public string UCTUpload(System.IO.Stream stream) {
            return base.Channel.UCTUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> UCTUploadAsync(System.IO.Stream stream) {
            return base.Channel.UCTUploadAsync(stream);
        }
        
        public string NepMeasUpload(System.IO.Stream stream) {
            return base.Channel.NepMeasUpload(stream);
        }
        
        public System.Threading.Tasks.Task<string> NepMeasUploadAsync(System.IO.Stream stream) {
            return base.Channel.NepMeasUploadAsync(stream);
        }
        
        public System.IO.Stream GetUserLogFile() {
            return base.Channel.GetUserLogFile();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetUserLogFileAsync() {
            return base.Channel.GetUserLogFileAsync();
        }
        
        public System.IO.Stream GetAnaylsisLogFile(string fileName) {
            return base.Channel.GetAnaylsisLogFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetAnaylsisLogFileAsync(string fileName) {
            return base.Channel.GetAnaylsisLogFileAsync(fileName);
        }
        
        public System.IO.Stream GetAnalysisResultFile(string fileName) {
            return base.Channel.GetAnalysisResultFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetAnalysisResultFileAsync(string fileName) {
            return base.Channel.GetAnalysisResultFileAsync(fileName);
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] GetNamesOfElementsByType(string projectName, string elementType) {
            return base.Channel.GetNamesOfElementsByType(projectName, elementType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetNamesOfElementsByTypeAsync(string projectName, string elementType) {
            return base.Channel.GetNamesOfElementsByTypeAsync(projectName, elementType);
        }
        
        public System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>[] FindSwitchStatusOfElements(string projectName, string[] GenLoadNames) {
            return base.Channel.FindSwitchStatusOfElements(projectName, GenLoadNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, Neplan_coordinacion.NeplanService.NeplanServiceConnection_info>[]> FindSwitchStatusOfElementsAsync(string projectName, string[] GenLoadNames) {
            return base.Channel.FindSwitchStatusOfElementsAsync(projectName, GenLoadNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse Neplan_coordinacion.NeplanService.NeplanService.Find_Voltage_Level_of_One_Port_Element(Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request) {
            return base.Channel.Find_Voltage_Level_of_One_Port_Element(request);
        }
        
        public bool Find_Voltage_Level_of_One_Port_Element(string projectName, string elementName, ref double Voltage) {
            Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest inValue = new Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.Voltage = Voltage;
            Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).Find_Voltage_Level_of_One_Port_Element(inValue);
            Voltage = retVal.Voltage;
            return retVal.Find_Voltage_Level_of_One_Port_ElementResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementResponse> Find_Voltage_Level_of_One_Port_ElementAsync(Neplan_coordinacion.NeplanService.Find_Voltage_Level_of_One_Port_ElementRequest request) {
            return base.Channel.Find_Voltage_Level_of_One_Port_ElementAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetBusBarOf1PortElementByID(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest request) {
            return base.Channel.GetBusBarOf1PortElementByID(request);
        }
        
        public bool GetBusBarOf1PortElementByID(string projectName, System.Nullable<System.Guid> elemGuid, out string busbarName, out System.Nullable<System.Guid> busbarGuid) {
            Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest();
            inValue.projectName = projectName;
            inValue.elemGuid = elemGuid;
            Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetBusBarOf1PortElementByID(inValue);
            busbarName = retVal.busbarName;
            busbarGuid = retVal.busbarGuid;
            return retVal.GetBusBarOf1PortElementByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDResponse> GetBusBarOf1PortElementByIDAsync(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByIDRequest request) {
            return base.Channel.GetBusBarOf1PortElementByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetBusBarOf1PortElementByName(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest request) {
            return base.Channel.GetBusBarOf1PortElementByName(request);
        }
        
        public bool GetBusBarOf1PortElementByName(string projectName, string elemName, out string busbarName, out System.Nullable<System.Guid> busbarGuid) {
            Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest();
            inValue.projectName = projectName;
            inValue.elemName = elemName;
            Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetBusBarOf1PortElementByName(inValue);
            busbarName = retVal.busbarName;
            busbarGuid = retVal.busbarGuid;
            return retVal.GetBusBarOf1PortElementByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameResponse> GetBusBarOf1PortElementByNameAsync(Neplan_coordinacion.NeplanService.GetBusBarOf1PortElementByNameRequest request) {
            return base.Channel.GetBusBarOf1PortElementByNameAsync(request);
        }
        
        public bool ChangeSwitchStatusOfElements(string projectName, string GenLoadName, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElements(projectName, GenLoadName, connectionstatus);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementsAsync(string projectName, string GenLoadName, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementsAsync(projectName, GenLoadName, connectionstatus);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] GetPQValuesLdSmAsm(string projectName) {
            return base.Channel.GetPQValuesLdSmAsm(projectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[]> GetPQValuesLdSmAsmAsync(string projectName) {
            return base.Channel.GetPQValuesLdSmAsmAsync(projectName);
        }
        
        public bool SetPowerofLoadsGenerators(string projectname, Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] loadgens) {
            return base.Channel.SetPowerofLoadsGenerators(projectname, loadgens);
        }
        
        public System.Threading.Tasks.Task<bool> SetPowerofLoadsGeneratorsAsync(string projectname, Neplan_coordinacion.NeplanService.NeplanServiceLoadGeneration_info[] loadgens) {
            return base.Channel.SetPowerofLoadsGeneratorsAsync(projectname, loadgens);
        }
        
        public bool ChangeSwitchStatusOfElementList(string projectName, System.Guid[] elemids, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementList(projectName, elemids, connectionstatus);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeSwitchStatusOfElementListAsync(string projectName, System.Guid[] elemids, bool connectionstatus) {
            return base.Channel.ChangeSwitchStatusOfElementListAsync(projectName, elemids, connectionstatus);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo ImportIEC_62325_451_2FilesAndDoCIMExport(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS, string processType) {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExport(folderpath, variantID, username, onlyOneEQ, mAS, processType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> ImportIEC_62325_451_2FilesAndDoCIMExportAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS, string processType) {
            return base.Channel.ImportIEC_62325_451_2FilesAndDoCIMExportAsync(folderpath, variantID, username, onlyOneEQ, mAS, processType);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo RunEMFProcess(string[] filesList, string localFolder, System.DateTime scenarioTime, string username, System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExport, string processType, string newProjectName, string MAS, string version) {
            return base.Channel.RunEMFProcess(filesList, localFolder, scenarioTime, username, ListOfMASForSVExport, processType, newProjectName, MAS, version);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> RunEMFProcessAsync(string[] filesList, string localFolder, System.DateTime scenarioTime, string username, System.Collections.Generic.Dictionary<string, string[]> ListOfMASForSVExport, string processType, string newProjectName, string MAS, string version) {
            return base.Channel.RunEMFProcessAsync(filesList, localFolder, scenarioTime, username, ListOfMASForSVExport, processType, newProjectName, MAS, version);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo RunCIMExportTranselectrica(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS) {
            return base.Channel.RunCIMExportTranselectrica(folderpath, variantID, username, onlyOneEQ, mAS);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> RunCIMExportTranselectricaAsync(string folderpath, System.Guid variantID, string username, bool onlyOneEQ, string mAS) {
            return base.Channel.RunCIMExportTranselectricaAsync(folderpath, variantID, username, onlyOneEQ, mAS);
        }
        
        public System.Guid[] GetFeederIDByNames(string ProjectName, string VariantName, string[] FeederNames) {
            return base.Channel.GetFeederIDByNames(ProjectName, VariantName, FeederNames);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetFeederIDByNamesAsync(string ProjectName, string VariantName, string[] FeederNames) {
            return base.Channel.GetFeederIDByNamesAsync(ProjectName, VariantName, FeederNames);
        }
        
        public System.Guid[] GetIDByFeederNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] FeederNames) {
            return base.Channel.GetIDByFeederNames(project, FeederNames);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetIDByFeederNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] FeederNames) {
            return base.Channel.GetIDByFeederNamesAsync(project, FeederNames);
        }
        
        public string[] GetAllFeeders(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllFeeders(project);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllFeedersAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllFeedersAsync(project);
        }
        
        public string GetFeederNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID) {
            return base.Channel.GetFeederNameByID(project, feederID);
        }
        
        public System.Threading.Tasks.Task<string> GetFeederNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID) {
            return base.Channel.GetFeederNameByIDAsync(project, feederID);
        }
        
        public System.Guid GetFeederIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName) {
            return base.Channel.GetFeederIDByName(project, feederName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetFeederIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName) {
            return base.Channel.GetFeederIDByNameAsync(project, feederName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalFeeder GetFeederDataByName(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName) {
            return base.Channel.GetFeederDataByName(project, feederName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalFeeder> GetFeederDataByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName) {
            return base.Channel.GetFeederDataByNameAsync(project, feederName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalFeeder GetFeederDataByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID) {
            return base.Channel.GetFeederDataByID(project, feederID);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalFeeder> GetFeederDataByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid feederID) {
            return base.Channel.GetFeederDataByIDAsync(project, feederID);
        }
        
        public bool SetFeederData(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalFeeder[] feederData) {
            return base.Channel.SetFeederData(project, feederData);
        }
        
        public System.Threading.Tasks.Task<bool> SetFeederDataAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalFeeder[] feederData) {
            return base.Channel.SetFeederDataAsync(project, feederData);
        }
        
        public bool DeleteFeeders(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] feeders) {
            return base.Channel.DeleteFeeders(project, feeders);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFeedersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] feeders) {
            return base.Channel.DeleteFeedersAsync(project, feeders);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.ExternalTopologyInfo> GetTopologyInformationOfElements(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs) {
            return base.Channel.GetTopologyInformationOfElements(project, elementIDs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.ExternalTopologyInfo>> GetTopologyInformationOfElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs) {
            return base.Channel.GetTopologyInformationOfElementsAsync(project, elementIDs);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> GetAllAreas(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllAreas(project);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllAreasAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllAreasAsync(project);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> GetAllAreaEICs(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllAreaEICs(project);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllAreaEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllAreaEICsAsync(project);
        }
        
        public bool SetAreasEICs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string> areaNameToEIC) {
            return base.Channel.SetAreasEICs(project, areaNameToEIC);
        }
        
        public System.Threading.Tasks.Task<bool> SetAreasEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string> areaNameToEIC) {
            return base.Channel.SetAreasEICsAsync(project, areaNameToEIC);
        }
        
        public string[] GetAllSubAreas(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllSubAreas(project);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllSubAreasAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllSubAreasAsync(project);
        }
        
        public string GetSubAreaNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid subAreaID) {
            return base.Channel.GetSubAreaNameByID(project, subAreaID);
        }
        
        public System.Threading.Tasks.Task<string> GetSubAreaNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid subAreaID) {
            return base.Channel.GetSubAreaNameByIDAsync(project, subAreaID);
        }
        
        public System.Guid GetSubAreaIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string subAreaName) {
            return base.Channel.GetSubAreaIDByName(project, subAreaName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetSubAreaIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string subAreaName) {
            return base.Channel.GetSubAreaIDByNameAsync(project, subAreaName);
        }
        
        public string[] GetAllZones(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllZones(project);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllZonesAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllZonesAsync(project);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> GetAllZoneEICs(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllZoneEICs(project);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetAllZoneEICsAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetAllZoneEICsAsync(project);
        }
        
        public string GetZoneNameByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid zoneID) {
            return base.Channel.GetZoneNameByID(project, zoneID);
        }
        
        public System.Threading.Tasks.Task<string> GetZoneNameByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid zoneID) {
            return base.Channel.GetZoneNameByIDAsync(project, zoneID);
        }
        
        public System.Guid GetZoneIDByName(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName) {
            return base.Channel.GetZoneIDByName(project, zoneName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetZoneIDByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName) {
            return base.Channel.GetZoneIDByNameAsync(project, zoneName);
        }
        
        public double[] GetZoneFactorsByPropertyNames(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames) {
            return base.Channel.GetZoneFactorsByPropertyNames(project, zoneName, propertyNames);
        }
        
        public System.Threading.Tasks.Task<double[]> GetZoneFactorsByPropertyNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames) {
            return base.Channel.GetZoneFactorsByPropertyNamesAsync(project, zoneName, propertyNames);
        }
        
        public bool SetZoneFactorsByPropertyNames(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames, double[] values) {
            return base.Channel.SetZoneFactorsByPropertyNames(project, zoneName, propertyNames, values);
        }
        
        public System.Threading.Tasks.Task<bool> SetZoneFactorsByPropertyNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, string[] propertyNames, double[] values) {
            return base.Channel.SetZoneFactorsByPropertyNamesAsync(project, zoneName, propertyNames, values);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo CIMImport(string[] inputFiles, bool isLocalPath, string projectName, string userName) {
            return base.Channel.CIMImport(inputFiles, isLocalPath, projectName, userName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> CIMImportAsync(string[] inputFiles, bool isLocalPath, string projectName, string userName) {
            return base.Channel.CIMImportAsync(inputFiles, isLocalPath, projectName, userName);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo CIMUpdateSSHData(Neplan_coordinacion.NeplanService.ExternalProject extProject, string[] inputFiles, bool isLocalPath) {
            return base.Channel.CIMUpdateSSHData(extProject, inputFiles, isLocalPath);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> CIMUpdateSSHDataAsync(Neplan_coordinacion.NeplanService.ExternalProject extProject, string[] inputFiles, bool isLocalPath) {
            return base.Channel.CIMUpdateSSHDataAsync(extProject, inputFiles, isLocalPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.ValidateCGMESModelResponse Neplan_coordinacion.NeplanService.NeplanService.ValidateCGMESModel(Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest request) {
            return base.Channel.ValidateCGMESModel(request);
        }
        
        public byte[] ValidateCGMESModel(Neplan_coordinacion.NeplanService.ExternalProject externalProject, string tsoName, ref bool validationSuccessful) {
            Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest inValue = new Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest();
            inValue.externalProject = externalProject;
            inValue.tsoName = tsoName;
            inValue.validationSuccessful = validationSuccessful;
            Neplan_coordinacion.NeplanService.ValidateCGMESModelResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).ValidateCGMESModel(inValue);
            validationSuccessful = retVal.validationSuccessful;
            return retVal.ValidateCGMESModelResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ValidateCGMESModelResponse> ValidateCGMESModelAsync(Neplan_coordinacion.NeplanService.ValidateCGMESModelRequest request) {
            return base.Channel.ValidateCGMESModelAsync(request);
        }
        
        public byte[] CIMExport(Neplan_coordinacion.NeplanService.ExternalProject externalProject, Neplan_coordinacion.NeplanService.CimExportOptions CIMOptions, string operationalState, bool runPowerFlow) {
            return base.Channel.CIMExport(externalProject, CIMOptions, operationalState, runPowerFlow);
        }
        
        public System.Threading.Tasks.Task<byte[]> CIMExportAsync(Neplan_coordinacion.NeplanService.ExternalProject externalProject, Neplan_coordinacion.NeplanService.CimExportOptions CIMOptions, string operationalState, bool runPowerFlow) {
            return base.Channel.CIMExportAsync(externalProject, CIMOptions, operationalState, runPowerFlow);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetNeplanIDtoCimIDDictionary(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetNeplanIDtoCimIDDictionary(project);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetNeplanIDtoCimIDDictionaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetNeplanIDtoCimIDDictionaryAsync(project);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo AddDataToTimeDependentCurves(System.Collections.Generic.Dictionary<System.DateTime, string[]> timepointToSSHFiles, Neplan_coordinacion.NeplanService.ExternalProject project, string username) {
            return base.Channel.AddDataToTimeDependentCurves(timepointToSSHFiles, project, username);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanDomainServiceImportReturnInfo> AddDataToTimeDependentCurvesAsync(System.Collections.Generic.Dictionary<System.DateTime, string[]> timepointToSSHFiles, Neplan_coordinacion.NeplanService.ExternalProject project, string username) {
            return base.Channel.AddDataToTimeDependentCurvesAsync(timepointToSSHFiles, project, username);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetNeplanIDtoEICodeDictionary(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetNeplanIDtoEICodeDictionary(project);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetNeplanIDtoEICodeDictionaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetNeplanIDtoEICodeDictionaryAsync(project);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode AddUpdateTopologyOperStateForElement(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperDataTopologyData[] operTopoData) {
            return base.Channel.AddUpdateTopologyOperStateForElement(project, operStateName, operTopoData);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddUpdateTopologyOperStateForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperDataTopologyData[] operTopoData) {
            return base.Channel.AddUpdateTopologyOperStateForElementAsync(project, operStateName, operTopoData);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteTopologyOperStateForElements(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames) {
            return base.Channel.DeleteTopologyOperStateForElements(project, operStateName, elementNames);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteTopologyOperStateForElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames) {
            return base.Channel.DeleteTopologyOperStateForElementsAsync(project, operStateName, elementNames);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode AddUpdateOperStateForElement(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperData[] operData) {
            return base.Channel.AddUpdateOperStateForElement(project, operStateName, operData);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddUpdateOperStateForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, Neplan_coordinacion.NeplanService.OperData[] operData) {
            return base.Channel.AddUpdateOperStateForElementAsync(project, operStateName, operData);
        }
        
        public string[] GetAllElementsWithOperationalStates(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName) {
            return base.Channel.GetAllElementsWithOperationalStates(project, operStateName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllElementsWithOperationalStatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName) {
            return base.Channel.GetAllElementsWithOperationalStatesAsync(project, operStateName);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteOperationalState(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName) {
            return base.Channel.DeleteOperationalState(project, operStateName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOperationalStateAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName) {
            return base.Channel.DeleteOperationalStateAsync(project, operStateName);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteOperationalStateForItems(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames, string[] nodeNames, string[] zones, string[] feeders, bool removeNetworkState) {
            return base.Channel.DeleteOperationalStateForItems(project, operStateName, elementNames, nodeNames, zones, feeders, removeNetworkState);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOperationalStateForItemsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string operStateName, string[] elementNames, string[] nodeNames, string[] zones, string[] feeders, bool removeNetworkState) {
            return base.Channel.DeleteOperationalStateForItemsAsync(project, operStateName, elementNames, nodeNames, zones, feeders, removeNetworkState);
        }
        
        public string[] GetOperationalStateNames(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetOperationalStateNames(project);
        }
        
        public System.Threading.Tasks.Task<string[]> GetOperationalStateNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetOperationalStateNamesAsync(project);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteAllOperationalStates(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.DeleteAllOperationalStates(project);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteAllOperationalStatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.DeleteAllOperationalStatesAsync(project);
        }
        
        public bool SetOrUpdateElementTimeDependentCurvePoints(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TimeDependentPointItem[] elementsTimePointList) {
            return base.Channel.SetOrUpdateElementTimeDependentCurvePoints(project, elementsTimePointList);
        }
        
        public System.Threading.Tasks.Task<bool> SetOrUpdateElementTimeDependentCurvePointsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TimeDependentPointItem[] elementsTimePointList) {
            return base.Channel.SetOrUpdateElementTimeDependentCurvePointsAsync(project, elementsTimePointList);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetElementCalcSettingForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.TechDataCalcSetting[] elementSettings) {
            return base.Channel.SetElementCalcSettingForCalcParameter(project, analysisType, elementSettings);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetElementCalcSettingForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.TechDataCalcSetting[] elementSettings) {
            return base.Channel.SetElementCalcSettingForCalcParameterAsync(project, analysisType, elementSettings);
        }
        
        public Neplan_coordinacion.NeplanService.TechDataCalcSetting[] GetElementCalcSettingForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetElementCalcSettingForCalcParameter(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.TechDataCalcSetting[]> GetElementCalcSettingForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetElementCalcSettingForCalcParameterAsync(project, analysisType);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetShortCircuitLocations(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ShortCircuitLocation[] shortCircuitLocations) {
            return base.Channel.SetShortCircuitLocations(project, shortCircuitLocations);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetShortCircuitLocationsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ShortCircuitLocation[] shortCircuitLocations) {
            return base.Channel.SetShortCircuitLocationsAsync(project, shortCircuitLocations);
        }
        
        public Neplan_coordinacion.NeplanService.ShortCircuitLocation[] GetShortCircuitLocations(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetShortCircuitLocations(project);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ShortCircuitLocation[]> GetShortCircuitLocationsAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetShortCircuitLocationsAsync(project);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.CommonModeItem[] commonModes) {
            return base.Channel.SetCommonModesForAnalysisType(project, analysisType, commonModes);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.CommonModeItem[] commonModes) {
            return base.Channel.SetCommonModesForAnalysisTypeAsync(project, analysisType, commonModes);
        }
        
        public Neplan_coordinacion.NeplanService.CommonModeItem[] GetCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCommonModesForAnalysisType(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.CommonModeItem[]> GetCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCommonModesForAnalysisTypeAsync(project, analysisType);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteCommonModesForAnalysisType(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string[] commonModeNames) {
            return base.Channel.DeleteCommonModesForAnalysisType(project, analysisType, commonModeNames);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteCommonModesForAnalysisTypeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string[] commonModeNames) {
            return base.Channel.DeleteCommonModesForAnalysisTypeAsync(project, analysisType, commonModeNames);
        }
        
        public bool UpdateElementLibrary(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement libraryElement) {
            return base.Channel.UpdateElementLibrary(project, libraryElement);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateElementLibraryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement libraryElement) {
            return base.Channel.UpdateElementLibraryAsync(project, libraryElement);
        }
        
        public bool UpdateElementsLibrary(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement[] libraryElements) {
            return base.Channel.UpdateElementsLibrary(project, libraryElements);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateElementsLibraryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.UpdateLibraryElement[] libraryElements) {
            return base.Channel.UpdateElementsLibraryAsync(project, libraryElements);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject CreateProject(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName) {
            return base.Channel.CreateProject(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> CreateProjectAsync(string projectName, string variantName, string diagram, string layerName, string mediumType, int srid, string copySettingsFromProjectName) {
            return base.Channel.CreateProjectAsync(projectName, variantName, diagram, layerName, mediumType, srid, copySettingsFromProjectName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject GetProject(string projectName, string variantName, string diagramName, string layerName) {
            return base.Channel.GetProject(projectName, variantName, diagramName, layerName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> GetProjectAsync(string projectName, string variantName, string diagramName, string layerName) {
            return base.Channel.GetProjectAsync(projectName, variantName, diagramName, layerName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject SaveProjectAs(string projectName, string newProjectName) {
            return base.Channel.SaveProjectAs(projectName, newProjectName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject> SaveProjectAsAsync(string projectName, string newProjectName) {
            return base.Channel.SaveProjectAsAsync(projectName, newProjectName);
        }
        
        public Neplan_coordinacion.NeplanService.ExternalProject[] GetProjects() {
            return base.Channel.GetProjects();
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ExternalProject[]> GetProjectsAsync() {
            return base.Channel.GetProjectsAsync();
        }
        
        public string[] GetScenarios(string projectName) {
            return base.Channel.GetScenarios(projectName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetScenariosAsync(string projectName) {
            return base.Channel.GetScenariosAsync(projectName);
        }
        
        public string GetLogOnUrlWithProject(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnUrlWithProject(project);
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnUrlWithProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnUrlWithProjectAsync(project);
        }
        
        public string GetLogOnUrl() {
            return base.Channel.GetLogOnUrl();
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnUrlAsync() {
            return base.Channel.GetLogOnUrlAsync();
        }
        
        public string GetLogOnSessionID(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnSessionID(project);
        }
        
        public System.Threading.Tasks.Task<string> GetLogOnSessionIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetLogOnSessionIDAsync(project);
        }
        
        public bool AddCustomerTypeDefinition(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName, double factorP, double factorQ) {
            return base.Channel.AddCustomerTypeDefinition(project, customerTypeName, factorP, factorQ);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerTypeDefinitionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName, double factorP, double factorQ) {
            return base.Channel.AddCustomerTypeDefinitionAsync(project, customerTypeName, factorP, factorQ);
        }
        
        public bool RemoveCustomerTypeDefinition(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName) {
            return base.Channel.RemoveCustomerTypeDefinition(project, customerTypeName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCustomerTypeDefinitionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string customerTypeName) {
            return base.Channel.RemoveCustomerTypeDefinitionAsync(project, customerTypeName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsResponse Neplan_coordinacion.NeplanService.NeplanService.GetCustomerTypeDefinitions(Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest request) {
            return base.Channel.GetCustomerTypeDefinitions(request);
        }
        
        public bool GetCustomerTypeDefinitions(Neplan_coordinacion.NeplanService.ExternalProject project, out string[] customerTypeNames, out double[] factorsP, out double[] factorsQ) {
            Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest inValue = new Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest();
            inValue.project = project;
            Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetCustomerTypeDefinitions(inValue);
            customerTypeNames = retVal.customerTypeNames;
            factorsP = retVal.factorsP;
            factorsQ = retVal.factorsQ;
            return retVal.GetCustomerTypeDefinitionsResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsResponse> GetCustomerTypeDefinitionsAsync(Neplan_coordinacion.NeplanService.GetCustomerTypeDefinitionsRequest request) {
            return base.Channel.GetCustomerTypeDefinitionsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.InsertGasNodeResponse Neplan_coordinacion.NeplanService.NeplanService.InsertGasNode(Neplan_coordinacion.NeplanService.InsertGasNodeRequest request) {
            return base.Channel.InsertGasNode(request);
        }
        
        public string InsertGasNode(ref Neplan_coordinacion.NeplanService.ExternalProject project, string name, string libraryType, string xmlData, double x, double y, string symbolName) {
            Neplan_coordinacion.NeplanService.InsertGasNodeRequest inValue = new Neplan_coordinacion.NeplanService.InsertGasNodeRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.x = x;
            inValue.y = y;
            inValue.symbolName = symbolName;
            Neplan_coordinacion.NeplanService.InsertGasNodeResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).InsertGasNode(inValue);
            project = retVal.project;
            return retVal.InsertGasNodeResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertGasNodeResponse> InsertGasNodeAsync(Neplan_coordinacion.NeplanService.InsertGasNodeRequest request) {
            return base.Channel.InsertGasNodeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.InsertNodeResponse Neplan_coordinacion.NeplanService.NeplanService.InsertNode(Neplan_coordinacion.NeplanService.InsertNodeRequest request) {
            return base.Channel.InsertNode(request);
        }
        
        public string InsertNode(ref Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double x, double y, string symbolName) {
            Neplan_coordinacion.NeplanService.InsertNodeRequest inValue = new Neplan_coordinacion.NeplanService.InsertNodeRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.x = x;
            inValue.y = y;
            inValue.symbolName = symbolName;
            Neplan_coordinacion.NeplanService.InsertNodeResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).InsertNode(inValue);
            project = retVal.project;
            return retVal.InsertNodeResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertNodeResponse> InsertNodeAsync(Neplan_coordinacion.NeplanService.InsertNodeRequest request) {
            return base.Channel.InsertNodeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicResponse Neplan_coordinacion.NeplanService.NeplanService.InsertNodeWithoutGraphic(Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest request) {
            return base.Channel.InsertNodeWithoutGraphic(request);
        }
        
        public string InsertNodeWithoutGraphic(ref Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData) {
            Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest inValue = new Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).InsertNodeWithoutGraphic(inValue);
            project = retVal.project;
            return retVal.InsertNodeWithoutGraphicResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicResponse> InsertNodeWithoutGraphicAsync(Neplan_coordinacion.NeplanService.InsertNodeWithoutGraphicRequest request) {
            return base.Channel.InsertNodeWithoutGraphicAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.InsertBusbarResponse Neplan_coordinacion.NeplanService.NeplanService.InsertBusbar(Neplan_coordinacion.NeplanService.InsertBusbarRequest request) {
            return base.Channel.InsertBusbar(request);
        }
        
        public string InsertBusbar(ref Neplan_coordinacion.NeplanService.ExternalProject project, string name, double un, double fn, string libraryType, string xmlData, double[] coordinates) {
            Neplan_coordinacion.NeplanService.InsertBusbarRequest inValue = new Neplan_coordinacion.NeplanService.InsertBusbarRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.un = un;
            inValue.fn = fn;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.coordinates = coordinates;
            Neplan_coordinacion.NeplanService.InsertBusbarResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).InsertBusbar(inValue);
            project = retVal.project;
            return retVal.InsertBusbarResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertBusbarResponse> InsertBusbarAsync(Neplan_coordinacion.NeplanService.InsertBusbarRequest request) {
            return base.Channel.InsertBusbarAsync(request);
        }
        
        public string InsertLine(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLine(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsync(project, name, fromNode, toNode, length, libraryType, xmlData, coordinates);
        }
        
        public string InsertLineByNodeID(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineByNodeID(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineByNodeIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNodeID, string toNodeID, double length, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineByNodeIDAsync(project, name, fromNodeID, toNodeID, length, libraryType, xmlData, coordinates);
        }
        
        public string InsertLineAsym(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsym(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }
        
        public System.Threading.Tasks.Task<string> InsertLineAsymAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, double length, short phase, string libraryType, string xmlData, double[] coordinates) {
            return base.Channel.InsertLineAsymAsync(project, name, fromNode, toNode, length, phase, libraryType, xmlData, coordinates);
        }
        
        public string Insert2PortElement(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle) {
            return base.Channel.Insert2PortElement(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }
        
        public System.Threading.Tasks.Task<string> Insert2PortElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string toNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink1, double[] coordinatesLink2, string symbolName, double symbolAngle) {
            return base.Channel.Insert2PortElementAsync(project, name, fromNode, toNode, elementTypeName, libraryType, xmlData, phase, coordinatesLink1, coordinatesLink2, symbolName, symbolAngle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.Insert1PortElementResponse Neplan_coordinacion.NeplanService.NeplanService.Insert1PortElement(Neplan_coordinacion.NeplanService.Insert1PortElementRequest request) {
            return base.Channel.Insert1PortElement(request);
        }
        
        public string Insert1PortElement(ref Neplan_coordinacion.NeplanService.ExternalProject project, string name, string fromNode, string elementTypeName, string libraryType, string xmlData, int phase, double[] coordinatesLink, string symbolName, double symbolAngle) {
            Neplan_coordinacion.NeplanService.Insert1PortElementRequest inValue = new Neplan_coordinacion.NeplanService.Insert1PortElementRequest();
            inValue.project = project;
            inValue.name = name;
            inValue.fromNode = fromNode;
            inValue.elementTypeName = elementTypeName;
            inValue.libraryType = libraryType;
            inValue.xmlData = xmlData;
            inValue.phase = phase;
            inValue.coordinatesLink = coordinatesLink;
            inValue.symbolName = symbolName;
            inValue.symbolAngle = symbolAngle;
            Neplan_coordinacion.NeplanService.Insert1PortElementResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).Insert1PortElement(inValue);
            project = retVal.project;
            return retVal.Insert1PortElementResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.Insert1PortElementResponse> Insert1PortElementAsync(Neplan_coordinacion.NeplanService.Insert1PortElementRequest request) {
            return base.Channel.Insert1PortElementAsync(request);
        }
        
        public string InsertProtectionElement(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName) {
            return base.Channel.InsertProtectionElement(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }
        
        public System.Threading.Tasks.Task<string> InsertProtectionElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string onElementID, short atPort, string elementTypeName, string libraryType, string xmlData, int phase, string symbolName) {
            return base.Channel.InsertProtectionElementAsync(project, name, onElementID, atPort, elementTypeName, libraryType, xmlData, phase, symbolName);
        }
        
        public string InsertFeeder(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName) {
            return base.Channel.InsertFeeder(project, feederName, nodeName, elementName);
        }
        
        public System.Threading.Tasks.Task<string> InsertFeederAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, string nodeName, string elementName) {
            return base.Channel.InsertFeederAsync(project, feederName, nodeName, elementName);
        }
        
        public string InsertArea(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea) {
            return base.Channel.InsertArea(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }
        
        public System.Threading.Tasks.Task<string> InsertAreaAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, string firstSubArea, string colorStringArea, string colorStringSubArea) {
            return base.Channel.InsertAreaAsync(project, areaName, firstSubArea, colorStringArea, colorStringSubArea);
        }
        
        public string InsertZone(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string colorString) {
            return base.Channel.InsertZone(project, name, colorString);
        }
        
        public System.Threading.Tasks.Task<string> InsertZoneAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string colorString) {
            return base.Channel.InsertZoneAsync(project, name, colorString);
        }
        
        public string InsertMeasurement(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2) {
            return base.Channel.InsertMeasurement(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }
        
        public System.Threading.Tasks.Task<string> InsertMeasurementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName, string elementName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measuremens, short nameAliasName1AliasName2) {
            return base.Channel.InsertMeasurementAsync(project, measurementDefinitionName, elementName, portNr, dateTime, inputDataDefinition, measuremens, nameAliasName1AliasName2);
        }
        
        public string InsertMeasurementByElementID(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements) {
            return base.Channel.InsertMeasurementByElementID(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }
        
        public System.Threading.Tasks.Task<string> InsertMeasurementByElementIDAsync(string elementID, string measurementDefinitionName, short portNr, System.DateTime dateTime, int inputDataDefinition, double[] measurements) {
            return base.Channel.InsertMeasurementByElementIDAsync(elementID, measurementDefinitionName, portNr, dateTime, inputDataDefinition, measurements);
        }
        
        public bool DeleteMeasurementForElement(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string measurementDefinitionName) {
            return base.Channel.DeleteMeasurementForElement(project, elementID, measurementDefinitionName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMeasurementForElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string measurementDefinitionName) {
            return base.Channel.DeleteMeasurementForElementAsync(project, elementID, measurementDefinitionName);
        }
        
        public bool DeleteMeasurementDefinitionForProject(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName) {
            return base.Channel.DeleteMeasurementDefinitionForProject(project, measurementDefinitionName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMeasurementDefinitionForProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName) {
            return base.Channel.DeleteMeasurementDefinitionForProjectAsync(project, measurementDefinitionName);
        }
        
        public System.Guid GetMeasurementDefinitionForProject(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName) {
            return base.Channel.GetMeasurementDefinitionForProject(project, measurementDefinitionName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetMeasurementDefinitionForProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string measurementDefinitionName) {
            return base.Channel.GetMeasurementDefinitionForProjectAsync(project, measurementDefinitionName);
        }
        
        public string InsertDiagram(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName) {
            return base.Channel.InsertDiagram(project, diagramName, firstGraphicLayerName);
        }
        
        public System.Threading.Tasks.Task<string> InsertDiagramAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName, string firstGraphicLayerName) {
            return base.Channel.InsertDiagramAsync(project, diagramName, firstGraphicLayerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.InsertGraphicLayerResponse Neplan_coordinacion.NeplanService.NeplanService.InsertGraphicLayer(Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest request) {
            return base.Channel.InsertGraphicLayer(request);
        }
        
        public string InsertGraphicLayer(ref Neplan_coordinacion.NeplanService.ExternalProject project, string diagramID, string graphicLayerName) {
            Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest inValue = new Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest();
            inValue.project = project;
            inValue.diagramID = diagramID;
            inValue.graphicLayerName = graphicLayerName;
            Neplan_coordinacion.NeplanService.InsertGraphicLayerResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).InsertGraphicLayer(inValue);
            project = retVal.project;
            return retVal.InsertGraphicLayerResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InsertGraphicLayerResponse> InsertGraphicLayerAsync(Neplan_coordinacion.NeplanService.InsertGraphicLayerRequest request) {
            return base.Channel.InsertGraphicLayerAsync(request);
        }
        
        public System.Guid[] InsertGraphicLayers(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers) {
            return base.Channel.InsertGraphicLayers(project, diagramID, layers);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> InsertGraphicLayersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers) {
            return base.Channel.InsertGraphicLayersAsync(project, diagramID, layers);
        }
        
        public bool UpdateGraphicLayers(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers) {
            return base.Channel.UpdateGraphicLayers(project, diagramID, layers);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGraphicLayersAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid diagramID, Neplan_coordinacion.NeplanService.GraphicLayerPropertiesItem[] layers) {
            return base.Channel.UpdateGraphicLayersAsync(project, diagramID, layers);
        }
        
        public bool SetCalcParameterAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string attributeName, string attributeValue) {
            return base.Channel.SetCalcParameterAttribute(project, analysisType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetCalcParameterAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, string attributeName, string attributeValue) {
            return base.Channel.SetCalcParameterAttributeAsync(project, analysisType, attributeName, attributeValue);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetAttributeForCalcParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.AttributeItem[] attributes) {
            return base.Channel.SetAttributeForCalcParameter(project, analysisType, attributes);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetAttributeForCalcParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, Neplan_coordinacion.NeplanService.AttributeItem[] attributes) {
            return base.Channel.SetAttributeForCalcParameterAsync(project, analysisType, attributes);
        }
        
        public Neplan_coordinacion.NeplanService.AttributeItem[] GetCalcParameterAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCalcParameterAttributes(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AttributeItem[]> GetCalcParameterAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetCalcParameterAttributesAsync(project, analysisType);
        }
        
        public Neplan_coordinacion.NeplanService.AttributeItem[] GetCalcParameterAttributesDescription(string analysisType) {
            return base.Channel.GetCalcParameterAttributesDescription(analysisType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AttributeItem[]> GetCalcParameterAttributesDescriptionAsync(string analysisType) {
            return base.Channel.GetCalcParameterAttributesDescriptionAsync(analysisType);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetOptimalPowerFlowObjectiveFunction(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry[] objectiveFunctionList) {
            return base.Channel.SetOptimalPowerFlowObjectiveFunction(project, objectiveFunctionList);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetOptimalPowerFlowObjectiveFunctionAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ObjectiveFunctionsEntry[] objectiveFunctionList) {
            return base.Channel.SetOptimalPowerFlowObjectiveFunctionAsync(project, objectiveFunctionList);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode LoadOutagesForContigency(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName) {
            return base.Channel.LoadOutagesForContigency(project, uploadName);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> LoadOutagesForContigencyAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string uploadName) {
            return base.Channel.LoadOutagesForContigencyAsync(project, uploadName);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode AddOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] interfaces) {
            return base.Channel.AddOptimalPowerFlowInterfaces(project, interfaces);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> AddOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] interfaces) {
            return base.Channel.AddOptimalPowerFlowInterfacesAsync(project, interfaces);
        }
        
        public Neplan_coordinacion.NeplanService.InterfaceOPFSetting[] GetOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetOptimalPowerFlowInterfaces(project);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.InterfaceOPFSetting[]> GetOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.GetOptimalPowerFlowInterfacesAsync(project);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode DeleteOptimalPowerFlowInterfaces(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] interfaceIds) {
            return base.Channel.DeleteOptimalPowerFlowInterfaces(project, interfaceIds);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> DeleteOptimalPowerFlowInterfacesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] interfaceIds) {
            return base.Channel.DeleteOptimalPowerFlowInterfacesAsync(project, interfaceIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllDiagramNamesResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllDiagramNames(Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest request) {
            return base.Channel.GetAllDiagramNames(request);
        }
        
        public bool GetAllDiagramNames(Neplan_coordinacion.NeplanService.ExternalProject project, out System.Collections.Generic.Dictionary<System.Guid, string> dictDiagram) {
            Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest inValue = new Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest();
            inValue.project = project;
            Neplan_coordinacion.NeplanService.GetAllDiagramNamesResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllDiagramNames(inValue);
            dictDiagram = retVal.dictDiagram;
            return retVal.GetAllDiagramNamesResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllDiagramNamesResponse> GetAllDiagramNamesAsync(Neplan_coordinacion.NeplanService.GetAllDiagramNamesRequest request) {
            return base.Channel.GetAllDiagramNamesAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfElementResponse Neplan_coordinacion.NeplanService.NeplanService.GetCoordinatesOfElement(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest request) {
            return base.Channel.GetCoordinatesOfElement(request);
        }
        
        public bool GetCoordinatesOfElement(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, string diagramName, out double xLeft, out double yBottom, out double xRight, out double yTop) {
            Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest inValue = new Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.diagramName = diagramName;
            Neplan_coordinacion.NeplanService.GetCoordinatesOfElementResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetCoordinatesOfElement(inValue);
            xLeft = retVal.xLeft;
            yBottom = retVal.yBottom;
            xRight = retVal.xRight;
            yTop = retVal.yTop;
            return retVal.GetCoordinatesOfElementResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfElementResponse> GetCoordinatesOfElementAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementRequest request) {
            return base.Channel.GetCoordinatesOfElementAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetCoordinatesOfElementByName(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest request) {
            return base.Channel.GetCoordinatesOfElementByName(request);
        }
        
        public bool GetCoordinatesOfElementByName(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string diagramName, out double xLeft, out double yBottom, out double xRight, out double yTop) {
            Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.diagramName = diagramName;
            Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetCoordinatesOfElementByName(inValue);
            xLeft = retVal.xLeft;
            yBottom = retVal.yBottom;
            xRight = retVal.xRight;
            yTop = retVal.yTop;
            return retVal.GetCoordinatesOfElementByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameResponse> GetCoordinatesOfElementByNameAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfElementByNameRequest request) {
            return base.Channel.GetCoordinatesOfElementByNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsResponse Neplan_coordinacion.NeplanService.NeplanService.GetCoordinatesOfAllElements(Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest request) {
            return base.Channel.GetCoordinatesOfAllElements(request);
        }
        
        public bool GetCoordinatesOfAllElements(Neplan_coordinacion.NeplanService.ExternalProject project, string diagramName, out System.Collections.Generic.Dictionary<Neplan_coordinacion.NeplanService.ExternalElement, double[]> elementCoordinates) {
            Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest inValue = new Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest();
            inValue.project = project;
            inValue.diagramName = diagramName;
            Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetCoordinatesOfAllElements(inValue);
            elementCoordinates = retVal.elementCoordinates;
            return retVal.GetCoordinatesOfAllElementsResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsResponse> GetCoordinatesOfAllElementsAsync(Neplan_coordinacion.NeplanService.GetCoordinatesOfAllElementsRequest request) {
            return base.Channel.GetCoordinatesOfAllElementsAsync(request);
        }
        
        public System.Nullable<System.Guid> GetElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr) {
            return base.Channel.GetElementAtPort(project, elementName, elementTypeName, portNr);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr) {
            return base.Channel.GetElementAtPortAsync(project, elementName, elementTypeName, portNr);
        }
        
        public System.Nullable<System.Guid> GetElementAtPortByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr) {
            return base.Channel.GetElementAtPortByID(project, elementID, portNr);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetElementAtPortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr) {
            return base.Channel.GetElementAtPortByIDAsync(project, elementID, portNr);
        }
        
        public System.Nullable<System.Guid>[] GetElementAtPortIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs, short[] portNumbers) {
            return base.Channel.GetElementAtPortIDs(project, elementIDs, portNumbers);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>[]> GetElementAtPortIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] elementIDs, short[] portNumbers) {
            return base.Channel.GetElementAtPortIDsAsync(project, elementIDs, portNumbers);
        }
        
        public string[] GetGraphicLayersForElementByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID) {
            return base.Channel.GetGraphicLayersForElementByID(project, elementID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGraphicLayersForElementByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID) {
            return base.Channel.GetGraphicLayersForElementByIDAsync(project, elementID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsOfProjectResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsOfProject(Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest request) {
            return base.Channel.GetAllElementsOfProject(request);
        }
        
        public bool GetAllElementsOfProject(Neplan_coordinacion.NeplanService.ExternalProject project, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes) {
            Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest();
            inValue.project = project;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            Neplan_coordinacion.NeplanService.GetAllElementsOfProjectResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsOfProject(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfProjectResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfProjectResponse> GetAllElementsOfProjectAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfProjectRequest request) {
            return base.Channel.GetAllElementsOfProjectAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsOfElementType(Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest request) {
            return base.Channel.GetAllElementsOfElementType(request);
        }
        
        public bool GetAllElementsOfElementType(Neplan_coordinacion.NeplanService.ExternalProject project, string elementType, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes) {
            Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest();
            inValue.project = project;
            inValue.elementType = elementType;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsOfElementType(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfElementTypeResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeResponse> GetAllElementsOfElementTypeAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfElementTypeRequest request) {
            return base.Channel.GetAllElementsOfElementTypeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsOfAreaResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsOfArea(Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest request) {
            return base.Channel.GetAllElementsOfArea(request);
        }
        
        public bool GetAllElementsOfArea(Neplan_coordinacion.NeplanService.ExternalProject project, string areaName, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes) {
            Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest();
            inValue.project = project;
            inValue.areaName = areaName;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            Neplan_coordinacion.NeplanService.GetAllElementsOfAreaResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsOfArea(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfAreaResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfAreaResponse> GetAllElementsOfAreaAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfAreaRequest request) {
            return base.Channel.GetAllElementsOfAreaAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsOfFeederResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsOfFeeder(Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest request) {
            return base.Channel.GetAllElementsOfFeeder(request);
        }
        
        public bool GetAllElementsOfFeeder(Neplan_coordinacion.NeplanService.ExternalProject project, string feederName, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes) {
            Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest();
            inValue.project = project;
            inValue.feederName = feederName;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            Neplan_coordinacion.NeplanService.GetAllElementsOfFeederResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsOfFeeder(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfFeederResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfFeederResponse> GetAllElementsOfFeederAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfFeederRequest request) {
            return base.Channel.GetAllElementsOfFeederAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsOfZoneResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsOfZone(Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest request) {
            return base.Channel.GetAllElementsOfZone(request);
        }
        
        public bool GetAllElementsOfZone(Neplan_coordinacion.NeplanService.ExternalProject project, string zoneName, ref System.Collections.Generic.Dictionary<string, string> elementNames, ref System.Collections.Generic.Dictionary<string, string> elementTypes) {
            Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest();
            inValue.project = project;
            inValue.zoneName = zoneName;
            inValue.elementNames = elementNames;
            inValue.elementTypes = elementTypes;
            Neplan_coordinacion.NeplanService.GetAllElementsOfZoneResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsOfZone(inValue);
            elementNames = retVal.elementNames;
            elementTypes = retVal.elementTypes;
            return retVal.GetAllElementsOfZoneResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsOfZoneResponse> GetAllElementsOfZoneAsync(Neplan_coordinacion.NeplanService.GetAllElementsOfZoneRequest request) {
            return base.Channel.GetAllElementsOfZoneAsync(request);
        }
        
        public bool AddSubLoad(Neplan_coordinacion.NeplanService.ExternalProject project, string loadID, Neplan_coordinacion.NeplanService.LoadData loadData) {
            return base.Channel.AddSubLoad(project, loadID, loadData);
        }
        
        public System.Threading.Tasks.Task<bool> AddSubLoadAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string loadID, Neplan_coordinacion.NeplanService.LoadData loadData) {
            return base.Channel.AddSubLoadAsync(project, loadID, loadData);
        }
        
        public bool AssignPowerTo1Port(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1Port(project, name, elementTypeName, powerType, value1, value2);
        }
        
        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string name, string elementTypeName, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortAsync(project, name, elementTypeName, powerType, value1, value2);
        }
        
        public bool AssignPowerTo1PortByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortByID(project, elementID, powerType, value1, value2);
        }
        
        public System.Threading.Tasks.Task<bool> AssignPowerTo1PortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, short powerType, double value1, double value2) {
            return base.Channel.AssignPowerTo1PortByIDAsync(project, elementID, powerType, value1, value2);
        }
        
        public bool SetElementData(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID) {
            return base.Channel.SetElementData(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneID, subAreaID);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementDataAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID) {
            return base.Channel.SetElementDataAsync(project, elementName, elementTypeName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneID, subAreaID);
        }
        
        public bool SetElementDataByID(System.Guid elementID, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID) {
            return base.Channel.SetElementDataByID(elementID, elementName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneID, subAreaID);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementDataByIDAsync(System.Guid elementID, string elementName, string aliasName1, string aliasName2, string description, bool isInMaintenance, bool IsProjected, string zoneID, string subAreaID) {
            return base.Channel.SetElementDataByIDAsync(elementID, elementName, aliasName1, aliasName2, description, isInMaintenance, IsProjected, zoneID, subAreaID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementDataByNameandType(Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest request) {
            return base.Channel.GetElementDataByNameandType(request);
        }
        
        public void GetElementDataByNameandType(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, ref System.Guid elementID, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneID, ref string subAreaID, ref string staticFeederID) {
            Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest inValue = new Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementTypeName = elementTypeName;
            inValue.elementID = elementID;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneID = zoneID;
            inValue.subAreaID = subAreaID;
            inValue.staticFeederID = staticFeederID;
            Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementDataByNameandType(inValue);
            elementID = retVal.elementID;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneID = retVal.zoneID;
            subAreaID = retVal.subAreaID;
            staticFeederID = retVal.staticFeederID;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeResponse> GetElementDataByNameandTypeAsync(Neplan_coordinacion.NeplanService.GetElementDataByNameandTypeRequest request) {
            return base.Channel.GetElementDataByNameandTypeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementDataByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementDataByName(Neplan_coordinacion.NeplanService.GetElementDataByNameRequest request) {
            return base.Channel.GetElementDataByName(request);
        }
        
        public void GetElementDataByName(Neplan_coordinacion.NeplanService.ExternalProject project, ref string elementName, ref string elementTypeName, ref System.Guid elementID, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneID, ref string subAreaID, ref string staticFeederID) {
            Neplan_coordinacion.NeplanService.GetElementDataByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetElementDataByNameRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementTypeName = elementTypeName;
            inValue.elementID = elementID;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneID = zoneID;
            inValue.subAreaID = subAreaID;
            inValue.staticFeederID = staticFeederID;
            Neplan_coordinacion.NeplanService.GetElementDataByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementDataByName(inValue);
            elementName = retVal.elementName;
            elementTypeName = retVal.elementTypeName;
            elementID = retVal.elementID;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneID = retVal.zoneID;
            subAreaID = retVal.subAreaID;
            staticFeederID = retVal.staticFeederID;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByNameResponse> GetElementDataByNameAsync(Neplan_coordinacion.NeplanService.GetElementDataByNameRequest request) {
            return base.Channel.GetElementDataByNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementDataByIDandType(Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest request) {
            return base.Channel.GetElementDataByIDandType(request);
        }
        
        public void GetElementDataByIDandType(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, ref string elementName, ref string aliasName1, ref string aliasName2, ref string description, ref bool isInMaintenance, ref bool IsProjected, ref string zoneID, ref string subAreaID, ref string staticFeederID) {
            Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest inValue = new Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.elementName = elementName;
            inValue.aliasName1 = aliasName1;
            inValue.aliasName2 = aliasName2;
            inValue.description = description;
            inValue.isInMaintenance = isInMaintenance;
            inValue.IsProjected = IsProjected;
            inValue.zoneID = zoneID;
            inValue.subAreaID = subAreaID;
            inValue.staticFeederID = staticFeederID;
            Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementDataByIDandType(inValue);
            elementName = retVal.elementName;
            aliasName1 = retVal.aliasName1;
            aliasName2 = retVal.aliasName2;
            description = retVal.description;
            isInMaintenance = retVal.isInMaintenance;
            IsProjected = retVal.IsProjected;
            zoneID = retVal.zoneID;
            subAreaID = retVal.subAreaID;
            staticFeederID = retVal.staticFeederID;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeResponse> GetElementDataByIDandTypeAsync(Neplan_coordinacion.NeplanService.GetElementDataByIDandTypeRequest request) {
            return base.Channel.GetElementDataByIDandTypeAsync(request);
        }
        
        public string[] GetConnectedElementsByElementID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID) {
            return base.Channel.GetConnectedElementsByElementID(project, elementID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectedElementsByElementIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID) {
            return base.Channel.GetConnectedElementsByElementIDAsync(project, elementID);
        }
        
        public bool SetElementAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttribute(project, elementName, elementType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeAsync(project, elementName, elementType, attributeName, attributeValue);
        }
        
        public bool SetElementAttributeByID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeByID(project, elementID, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementAttributeByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, string attributeValue) {
            return base.Channel.SetElementAttributeByIDAsync(project, elementID, attributeName, attributeValue);
        }
        
        public bool SetElementAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementAttributeList) {
            return base.Channel.SetElementAttributes(project, elementAttributeList);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementAttributeList) {
            return base.Channel.SetElementAttributesAsync(project, elementAttributeList);
        }
        
        public bool SetElementListAttributeByID(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, object attributeValue) {
            return base.Channel.SetElementListAttributeByID(project, listElementID, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetElementListAttributeByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, object attributeValue) {
            return base.Channel.SetElementListAttributeByIDAsync(project, listElementID, attributeName, attributeValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementAttributeByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementAttributeByID(Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest request) {
            return base.Channel.GetElementAttributeByID(request);
        }
        
        public bool GetElementAttributeByID(string projectName, string elementID, string attributeName, ref string attributeValue) {
            Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest();
            inValue.projectName = projectName;
            inValue.elementID = elementID;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            Neplan_coordinacion.NeplanService.GetElementAttributeByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementAttributeByID(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeByIDResponse> GetElementAttributeByIDAsync(Neplan_coordinacion.NeplanService.GetElementAttributeByIDRequest request) {
            return base.Channel.GetElementAttributeByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAttributeByElementIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetAttributeByElementID(Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest request) {
            return base.Channel.GetAttributeByElementID(request);
        }
        
        public bool GetAttributeByElementID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, string attributeName, ref string attributeValue) {
            Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest inValue = new Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            Neplan_coordinacion.NeplanService.GetAttributeByElementIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAttributeByElementID(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetAttributeByElementIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeByElementIDResponse> GetAttributeByElementIDAsync(Neplan_coordinacion.NeplanService.GetAttributeByElementIDRequest request) {
            return base.Channel.GetAttributeByElementIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementListAttributeByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementListAttributeByID(Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest request) {
            return base.Channel.GetElementListAttributeByID(request);
        }
        
        public bool GetElementListAttributeByID(Neplan_coordinacion.NeplanService.ExternalProject project, string[] listElementID, string attributeName, ref System.Collections.Generic.Dictionary<string, string> attributeValueList) {
            Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest();
            inValue.project = project;
            inValue.listElementID = listElementID;
            inValue.attributeName = attributeName;
            inValue.attributeValueList = attributeValueList;
            Neplan_coordinacion.NeplanService.GetElementListAttributeByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementListAttributeByID(inValue);
            attributeValueList = retVal.attributeValueList;
            return retVal.GetElementListAttributeByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementListAttributeByIDResponse> GetElementListAttributeByIDAsync(Neplan_coordinacion.NeplanService.GetElementListAttributeByIDRequest request) {
            return base.Channel.GetElementListAttributeByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementAttributeListByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementAttributeListByID(Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest request) {
            return base.Channel.GetElementAttributeListByID(request);
        }
        
        public bool GetElementAttributeListByID(string projectName, string elementID, ref System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest();
            inValue.projectName = projectName;
            inValue.elementID = elementID;
            inValue.attributeName2Value = attributeName2Value;
            Neplan_coordinacion.NeplanService.GetElementAttributeListByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementAttributeListByID(inValue);
            attributeName2Value = retVal.attributeName2Value;
            return retVal.GetElementAttributeListByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeListByIDResponse> GetElementAttributeListByIDAsync(Neplan_coordinacion.NeplanService.GetElementAttributeListByIDRequest request) {
            return base.Channel.GetElementAttributeListByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAttributeListByElementIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetAttributeListByElementID(Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest request) {
            return base.Channel.GetAttributeListByElementID(request);
        }
        
        public bool GetAttributeListByElementID(Neplan_coordinacion.NeplanService.ExternalProject project, string elementID, ref System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest inValue = new Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest();
            inValue.project = project;
            inValue.elementID = elementID;
            inValue.attributeName2Value = attributeName2Value;
            Neplan_coordinacion.NeplanService.GetAttributeListByElementIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAttributeListByElementID(inValue);
            attributeName2Value = retVal.attributeName2Value;
            return retVal.GetAttributeListByElementIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeListByElementIDResponse> GetAttributeListByElementIDAsync(Neplan_coordinacion.NeplanService.GetAttributeListByElementIDRequest request) {
            return base.Channel.GetAttributeListByElementIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementAttributeByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementAttributeByName(Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest request) {
            return base.Channel.GetElementAttributeByName(request);
        }
        
        public bool GetElementAttributeByName(string projectName, string elementName, string elementType, string attributeName, ref string attributeValue) {
            Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            Neplan_coordinacion.NeplanService.GetElementAttributeByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementAttributeByName(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetElementAttributeByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeByNameResponse> GetElementAttributeByNameAsync(Neplan_coordinacion.NeplanService.GetElementAttributeByNameRequest request) {
            return base.Channel.GetElementAttributeByNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAttributeByElementNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetAttributeByElementName(Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest request) {
            return base.Channel.GetAttributeByElementName(request);
        }
        
        public bool GetAttributeByElementName(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, string attributeName, ref string attributeValue) {
            Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest inValue = new Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName = attributeName;
            inValue.attributeValue = attributeValue;
            Neplan_coordinacion.NeplanService.GetAttributeByElementNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAttributeByElementName(inValue);
            attributeValue = retVal.attributeValue;
            return retVal.GetAttributeByElementNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeByElementNameResponse> GetAttributeByElementNameAsync(Neplan_coordinacion.NeplanService.GetAttributeByElementNameRequest request) {
            return base.Channel.GetAttributeByElementNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetElementAttributeListByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetElementAttributeListByName(Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest request) {
            return base.Channel.GetElementAttributeListByName(request);
        }
        
        public bool GetElementAttributeListByName(string projectName, string elementName, string elementType, ref System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest();
            inValue.projectName = projectName;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName2Value = attributeName2Value;
            Neplan_coordinacion.NeplanService.GetElementAttributeListByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetElementAttributeListByName(inValue);
            attributeName2Value = retVal.attributeName2Value;
            return retVal.GetElementAttributeListByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetElementAttributeListByNameResponse> GetElementAttributeListByNameAsync(Neplan_coordinacion.NeplanService.GetElementAttributeListByNameRequest request) {
            return base.Channel.GetElementAttributeListByNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAttributeListByElementNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetAttributeListByElementName(Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest request) {
            return base.Channel.GetAttributeListByElementName(request);
        }
        
        public bool GetAttributeListByElementName(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementType, ref System.Collections.Generic.Dictionary<string, string> attributeName2Value) {
            Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest inValue = new Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest();
            inValue.project = project;
            inValue.elementName = elementName;
            inValue.elementType = elementType;
            inValue.attributeName2Value = attributeName2Value;
            Neplan_coordinacion.NeplanService.GetAttributeListByElementNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAttributeListByElementName(inValue);
            attributeName2Value = retVal.attributeName2Value;
            return retVal.GetAttributeListByElementNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAttributeListByElementNameResponse> GetAttributeListByElementNameAsync(Neplan_coordinacion.NeplanService.GetAttributeListByElementNameRequest request) {
            return base.Channel.GetAttributeListByElementNameAsync(request);
        }
        
        public Neplan_coordinacion.NeplanService.TechItem[] GetElementAttributes(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementInfoList) {
            return base.Channel.GetElementAttributes(project, elementInfoList);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.TechItem[]> GetElementAttributesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.TechItem[] elementInfoList) {
            return base.Channel.GetElementAttributesAsync(project, elementInfoList);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> GetShuntSwitchedAdmittanceBlocks(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] shuntIds) {
            return base.Channel.GetShuntSwitchedAdmittanceBlocks(project, shuntIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]>> GetShuntSwitchedAdmittanceBlocksAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] shuntIds) {
            return base.Channel.GetShuntSwitchedAdmittanceBlocksAsync(project, shuntIds);
        }
        
        public Neplan_coordinacion.NeplanService.ReturnCode SetShuntSwitchedAdmittanceBlocks(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> shuntIdsToBlocks) {
            return base.Channel.SetShuntSwitchedAdmittanceBlocks(project, shuntIdsToBlocks);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.ReturnCode> SetShuntSwitchedAdmittanceBlocksAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.SwitchedAdmittanceBlock[]> shuntIdsToBlocks) {
            return base.Channel.SetShuntSwitchedAdmittanceBlocksAsync(project, shuntIdsToBlocks);
        }
        
        public bool SetRegulatorParameter(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, string parameterValue) {
            return base.Channel.SetRegulatorParameter(project, regulatorName, parameterName, parameterValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetRegulatorParameterAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, string parameterValue) {
            return base.Channel.SetRegulatorParameterAsync(project, regulatorName, parameterName, parameterValue);
        }
        
        public bool SetRegulatorParameterByID(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, string parameterValue) {
            return base.Channel.SetRegulatorParameterByID(project, regulatorID, parameterName, parameterValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetRegulatorParameterByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, string parameterValue) {
            return base.Channel.SetRegulatorParameterByIDAsync(project, regulatorID, parameterName, parameterValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetRegulatorParameterByID(Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest request) {
            return base.Channel.GetRegulatorParameterByID(request);
        }
        
        public bool GetRegulatorParameterByID(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, string parameterName, ref string parameterValue) {
            Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest();
            inValue.project = project;
            inValue.regulatorID = regulatorID;
            inValue.parameterName = parameterName;
            inValue.parameterValue = parameterValue;
            Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetRegulatorParameterByID(inValue);
            parameterValue = retVal.parameterValue;
            return retVal.GetRegulatorParameterByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDResponse> GetRegulatorParameterByIDAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterByIDRequest request) {
            return base.Channel.GetRegulatorParameterByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDResponse Neplan_coordinacion.NeplanService.NeplanService.GetRegulatorParameterListByID(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest request) {
            return base.Channel.GetRegulatorParameterListByID(request);
        }
        
        public bool GetRegulatorParameterListByID(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorID, ref System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest inValue = new Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest();
            inValue.project = project;
            inValue.regulatorID = regulatorID;
            inValue.parameterName2Value = parameterName2Value;
            Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetRegulatorParameterListByID(inValue);
            parameterName2Value = retVal.parameterName2Value;
            return retVal.GetRegulatorParameterListByIDResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDResponse> GetRegulatorParameterListByIDAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByIDRequest request) {
            return base.Channel.GetRegulatorParameterListByIDAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetRegulatorParameterByName(Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest request) {
            return base.Channel.GetRegulatorParameterByName(request);
        }
        
        public bool GetRegulatorParameterByName(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, string parameterName, ref string parameterValue) {
            Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest();
            inValue.project = project;
            inValue.regulatorName = regulatorName;
            inValue.parameterName = parameterName;
            inValue.parameterValue = parameterValue;
            Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetRegulatorParameterByName(inValue);
            parameterValue = retVal.parameterValue;
            return retVal.GetRegulatorParameterByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameResponse> GetRegulatorParameterByNameAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterByNameRequest request) {
            return base.Channel.GetRegulatorParameterByNameAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameResponse Neplan_coordinacion.NeplanService.NeplanService.GetRegulatorParameterListByName(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest request) {
            return base.Channel.GetRegulatorParameterListByName(request);
        }
        
        public bool GetRegulatorParameterListByName(Neplan_coordinacion.NeplanService.ExternalProject project, string regulatorName, ref System.Collections.Generic.Dictionary<string, string> parameterName2Value) {
            Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest inValue = new Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest();
            inValue.project = project;
            inValue.regulatorName = regulatorName;
            inValue.parameterName2Value = parameterName2Value;
            Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetRegulatorParameterListByName(inValue);
            parameterName2Value = retVal.parameterName2Value;
            return retVal.GetRegulatorParameterListByNameResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameResponse> GetRegulatorParameterListByNameAsync(Neplan_coordinacion.NeplanService.GetRegulatorParameterListByNameRequest request) {
            return base.Channel.GetRegulatorParameterListByNameAsync(request);
        }
        
        public bool AddReadAllRoleToProject(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.AddReadAllRoleToProject(project);
        }
        
        public System.Threading.Tasks.Task<bool> AddReadAllRoleToProjectAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.AddReadAllRoleToProjectAsync(project);
        }
        
        public string AddVoltageLevel(Neplan_coordinacion.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB) {
            return base.Channel.AddVoltageLevel(project, un, colorR, colorG, colorB);
        }
        
        public System.Threading.Tasks.Task<string> AddVoltageLevelAsync(Neplan_coordinacion.NeplanService.ExternalProject project, double un, int colorR, int colorG, int colorB) {
            return base.Channel.AddVoltageLevelAsync(project, un, colorR, colorG, colorB);
        }
        
        public void SetDiagramMinValues(Neplan_coordinacion.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle) {
            base.Channel.SetDiagramMinValues(project, xMin, yMin, units, factorXY, angle);
        }
        
        public System.Threading.Tasks.Task SetDiagramMinValuesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, double xMin, double yMin, short units, double factorXY, double angle) {
            return base.Channel.SetDiagramMinValuesAsync(project, xMin, yMin, units, factorXY, angle);
        }
        
        public bool SetLineStyle(Neplan_coordinacion.NeplanService.ExternalProject project, string lineType, short lineStyle) {
            return base.Channel.SetLineStyle(project, lineType, lineStyle);
        }
        
        public System.Threading.Tasks.Task<bool> SetLineStyleAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineType, short lineStyle) {
            return base.Channel.SetLineStyleAsync(project, lineType, lineStyle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.SetDefaultValuesResponse Neplan_coordinacion.NeplanService.NeplanService.SetDefaultValues(Neplan_coordinacion.NeplanService.SetDefaultValuesRequest request) {
            return base.Channel.SetDefaultValues(request);
        }
        
        public bool SetDefaultValues(ref Neplan_coordinacion.NeplanService.ExternalProject project, short defaultType, short phaseDomination, bool isAnsi) {
            Neplan_coordinacion.NeplanService.SetDefaultValuesRequest inValue = new Neplan_coordinacion.NeplanService.SetDefaultValuesRequest();
            inValue.project = project;
            inValue.defaultType = defaultType;
            inValue.phaseDomination = phaseDomination;
            inValue.isAnsi = isAnsi;
            Neplan_coordinacion.NeplanService.SetDefaultValuesResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).SetDefaultValues(inValue);
            project = retVal.project;
            return retVal.SetDefaultValuesResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.SetDefaultValuesResponse> SetDefaultValuesAsync(Neplan_coordinacion.NeplanService.SetDefaultValuesRequest request) {
            return base.Channel.SetDefaultValuesAsync(request);
        }
        
        public bool SetDiagramParameterAttribute(Neplan_coordinacion.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetDiagramParameterAttribute(project, parameterType, attributeName, attributeValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetDiagramParameterAttributeAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string parameterType, string attributeName, string attributeValue) {
            return base.Channel.SetDiagramParameterAttributeAsync(project, parameterType, attributeName, attributeValue);
        }
        
        public bool SetGraphicLayerWorldCoordinates(Neplan_coordinacion.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint) {
            return base.Channel.SetGraphicLayerWorldCoordinates(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }
        
        public System.Threading.Tasks.Task<bool> SetGraphicLayerWorldCoordinatesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, bool isDirectionUpY, double factor, double angle, double offsetZeroPoint) {
            return base.Channel.SetGraphicLayerWorldCoordinatesAsync(project, isDirectionUpY, factor, angle, offsetZeroPoint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.AddNodesFromListResponse Neplan_coordinacion.NeplanService.NeplanService.AddNodesFromList(Neplan_coordinacion.NeplanService.AddNodesFromListRequest request) {
            return base.Channel.AddNodesFromList(request);
        }
        
        public bool AddNodesFromList(ref Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportElementItem[] listElements) {
            Neplan_coordinacion.NeplanService.AddNodesFromListRequest inValue = new Neplan_coordinacion.NeplanService.AddNodesFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            Neplan_coordinacion.NeplanService.AddNodesFromListResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).AddNodesFromList(inValue);
            project = retVal.project;
            return retVal.AddNodesFromListResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddNodesFromListResponse> AddNodesFromListAsync(Neplan_coordinacion.NeplanService.AddNodesFromListRequest request) {
            return base.Channel.AddNodesFromListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.AddElementsFromListResponse Neplan_coordinacion.NeplanService.NeplanService.AddElementsFromList(Neplan_coordinacion.NeplanService.AddElementsFromListRequest request) {
            return base.Channel.AddElementsFromList(request);
        }
        
        public bool AddElementsFromList(ref Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ImportElementItem[] listElements, string elementTypeName) {
            Neplan_coordinacion.NeplanService.AddElementsFromListRequest inValue = new Neplan_coordinacion.NeplanService.AddElementsFromListRequest();
            inValue.project = project;
            inValue.listElements = listElements;
            inValue.elementTypeName = elementTypeName;
            Neplan_coordinacion.NeplanService.AddElementsFromListResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).AddElementsFromList(inValue);
            project = retVal.project;
            return retVal.AddElementsFromListResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddElementsFromListResponse> AddElementsFromListAsync(Neplan_coordinacion.NeplanService.AddElementsFromListRequest request) {
            return base.Channel.AddElementsFromListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.AddSubLoadsFromListResponse Neplan_coordinacion.NeplanService.NeplanService.AddSubLoadsFromList(Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest request) {
            return base.Channel.AddSubLoadsFromList(request);
        }
        
        public bool AddSubLoadsFromList(ref Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.LoadData[] listLoadData, string loadID) {
            Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest inValue = new Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest();
            inValue.project = project;
            inValue.listLoadData = listLoadData;
            inValue.loadID = loadID;
            Neplan_coordinacion.NeplanService.AddSubLoadsFromListResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).AddSubLoadsFromList(inValue);
            project = retVal.project;
            return retVal.AddSubLoadsFromListResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.AddSubLoadsFromListResponse> AddSubLoadsFromListAsync(Neplan_coordinacion.NeplanService.AddSubLoadsFromListRequest request) {
            return base.Channel.AddSubLoadsFromListAsync(request);
        }
        
        public bool AddSubLoads(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> loadIdToSubloads) {
            return base.Channel.AddSubLoads(project, loadIdToSubloads);
        }
        
        public System.Threading.Tasks.Task<bool> AddSubLoadsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> loadIdToSubloads) {
            return base.Channel.AddSubLoadsAsync(project, loadIdToSubloads);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]> GetSubLoadsFromMap(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] loadIds) {
            return base.Channel.GetSubLoadsFromMap(project, loadIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.PowerLoadData[]>> GetSubLoadsFromMapAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] loadIds) {
            return base.Channel.GetSubLoadsFromMapAsync(project, loadIds);
        }
        
        public bool DeleteSubLoads(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> loadIdToSubloadNames) {
            return base.Channel.DeleteSubLoads(project, loadIdToSubloadNames);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSubLoadsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> loadIdToSubloadNames) {
            return base.Channel.DeleteSubLoadsAsync(project, loadIdToSubloadNames);
        }
        
        public void SetDateTimeLastSave(Neplan_coordinacion.NeplanService.ExternalProject project) {
            base.Channel.SetDateTimeLastSave(project);
        }
        
        public System.Threading.Tasks.Task SetDateTimeLastSaveAsync(Neplan_coordinacion.NeplanService.ExternalProject project) {
            return base.Channel.SetDateTimeLastSaveAsync(project);
        }
        
        public bool DeleteElement(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement elementToDelete) {
            return base.Channel.DeleteElement(project, elementToDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteElementAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement elementToDelete) {
            return base.Channel.DeleteElementAsync(project, elementToDelete);
        }
        
        public bool DeleteElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] elementsToDelete) {
            return base.Channel.DeleteElements(project, elementsToDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] elementsToDelete) {
            return base.Channel.DeleteElementsAsync(project, elementsToDelete);
        }
        
        public bool DeleteNodeWithElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement nodeToDelete) {
            return base.Channel.DeleteNodeWithElements(project, nodeToDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNodeWithElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement nodeToDelete) {
            return base.Channel.DeleteNodeWithElementsAsync(project, nodeToDelete);
        }
        
        public bool DeleteNodesWithElements(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] nodesToDelete) {
            return base.Channel.DeleteNodesWithElements(project, nodesToDelete);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNodesWithElementsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, Neplan_coordinacion.NeplanService.ExternalElement[] nodesToDelete) {
            return base.Channel.DeleteNodesWithElementsAsync(project, nodesToDelete);
        }
        
        public bool AddLineSectionsToLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.AddLineSectionsToLineByName(project, lineName, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> AddLineSectionsToLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.AddLineSectionsToLineByNameAsync(project, lineName, lineSections);
        }
        
        public bool AddLineSectionsToLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.AddLineSectionsToLinesByNames(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> AddLineSectionsToLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.AddLineSectionsToLinesByNamesAsync(project, lineToLineSections);
        }
        
        public bool AddLineSectionsToLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.AddLineSectionsToLineByID(project, lineID, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> AddLineSectionsToLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.AddLineSectionsToLineByIDAsync(project, lineID, lineSections);
        }
        
        public bool AddLineSectionsToLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.AddLineSectionsToLinesByIDs(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> AddLineSectionsToLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.AddLineSectionsToLinesByIDsAsync(project, lineToLineSections);
        }
        
        public bool DeleteLineSectionsFromLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, string[] lineSections) {
            return base.Channel.DeleteLineSectionsFromLineByName(project, lineName, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, string[] lineSections) {
            return base.Channel.DeleteLineSectionsFromLineByNameAsync(project, lineName, lineSections);
        }
        
        public bool DeleteLineSectionsFromLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string[]> lineToLineSections) {
            return base.Channel.DeleteLineSectionsFromLinesByNames(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, string[]> lineToLineSections) {
            return base.Channel.DeleteLineSectionsFromLinesByNamesAsync(project, lineToLineSections);
        }
        
        public bool DeleteLineSectionsFromLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, string[] lineSections) {
            return base.Channel.DeleteLineSectionsFromLineByID(project, lineID, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, string[] lineSections) {
            return base.Channel.DeleteLineSectionsFromLineByIDAsync(project, lineID, lineSections);
        }
        
        public bool DeleteLineSectionsFromLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> lineToLineSections) {
            return base.Channel.DeleteLineSectionsFromLinesByIDs(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLineSectionsFromLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, string[]> lineToLineSections) {
            return base.Channel.DeleteLineSectionsFromLinesByIDsAsync(project, lineToLineSections);
        }
        
        public bool UpdateLineSectionsOfLineByName(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.UpdateLineSectionsOfLineByName(project, lineName, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLineByNameAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string lineName, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.UpdateLineSectionsOfLineByNameAsync(project, lineName, lineSections);
        }
        
        public bool UpdateLineSectionsOfLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.UpdateLineSectionsOfLinesByNames(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.UpdateLineSectionsOfLinesByNamesAsync(project, lineToLineSections);
        }
        
        public bool UpdateLineSectionsOfLineByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.UpdateLineSectionsOfLineByID(project, lineID, lineSections);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLineByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid lineID, Neplan_coordinacion.NeplanService.LineSectionData[] lineSections) {
            return base.Channel.UpdateLineSectionsOfLineByIDAsync(project, lineID, lineSections);
        }
        
        public bool UpdateLineSectionsOfLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.UpdateLineSectionsOfLinesByIDs(project, lineToLineSections);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLineSectionsOfLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> lineToLineSections) {
            return base.Channel.UpdateLineSectionsOfLinesByIDsAsync(project, lineToLineSections);
        }
        
        public System.Collections.Generic.Dictionary<string, string[]> GetLineSectionsOfLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames) {
            return base.Channel.GetLineSectionsOfLinesByNames(project, lineNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string[]>> GetLineSectionsOfLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames) {
            return base.Channel.GetLineSectionsOfLinesByNamesAsync(project, lineNames);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string[]> GetLineSectionsOfLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs) {
            return base.Channel.GetLineSectionsOfLinesByIDs(project, lineIDs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string[]>> GetLineSectionsOfLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs) {
            return base.Channel.GetLineSectionsOfLinesByIDsAsync(project, lineIDs);
        }
        
        public System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]> GetParameterOfLineSectionsFromLinesByNames(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames, string[] parameters) {
            return base.Channel.GetParameterOfLineSectionsFromLinesByNames(project, lineNames, parameters);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, Neplan_coordinacion.NeplanService.LineSectionData[]>> GetParameterOfLineSectionsFromLinesByNamesAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string[] lineNames, string[] parameters) {
            return base.Channel.GetParameterOfLineSectionsFromLinesByNamesAsync(project, lineNames, parameters);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]> GetParameterOfLineSectionsFromLinesByIDs(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs, string[] parameters) {
            return base.Channel.GetParameterOfLineSectionsFromLinesByIDs(project, lineIDs, parameters);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, Neplan_coordinacion.NeplanService.LineSectionData[]>> GetParameterOfLineSectionsFromLinesByIDsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid[] lineIDs, string[] parameters) {
            return base.Channel.GetParameterOfLineSectionsFromLinesByIDsAsync(project, lineIDs, parameters);
        }
        
        public void SwitchElementAtPortByID(string elementID, short portNr, bool isConnected) {
            base.Channel.SwitchElementAtPortByID(elementID, portNr, isConnected);
        }
        
        public System.Threading.Tasks.Task SwitchElementAtPortByIDAsync(string elementID, short portNr, bool isConnected) {
            return base.Channel.SwitchElementAtPortByIDAsync(elementID, portNr, isConnected);
        }
        
        public void SwitchElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected) {
            base.Channel.SwitchElementAtPort(project, elementName, elementTypeName, portNr, isConnected);
        }
        
        public System.Threading.Tasks.Task SwitchElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr, bool isConnected) {
            return base.Channel.SwitchElementAtPortAsync(project, elementName, elementTypeName, portNr, isConnected);
        }
        
        public System.Nullable<bool> GetSwitchOfElementAtPort(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr) {
            return base.Channel.GetSwitchOfElementAtPort(project, elementName, elementTypeName, portNr);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> GetSwitchOfElementAtPortAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string elementName, string elementTypeName, short portNr) {
            return base.Channel.GetSwitchOfElementAtPortAsync(project, elementName, elementTypeName, portNr);
        }
        
        public System.Nullable<bool> GetSwitchOfElementAtPortByID(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr) {
            return base.Channel.GetSwitchOfElementAtPortByID(project, elementID, portNr);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> GetSwitchOfElementAtPortByIDAsync(Neplan_coordinacion.NeplanService.ExternalProject project, System.Guid elementID, short portNr) {
            return base.Channel.GetSwitchOfElementAtPortByIDAsync(project, elementID, portNr);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchResponse Neplan_coordinacion.NeplanService.NeplanService.GetAllElementsWithOpenSwitch(Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest request) {
            return base.Channel.GetAllElementsWithOpenSwitch(request);
        }
        
        public bool GetAllElementsWithOpenSwitch(Neplan_coordinacion.NeplanService.ExternalProject project, ref System.Guid[] elementIDs) {
            Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest inValue = new Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest();
            inValue.project = project;
            inValue.elementIDs = elementIDs;
            Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchResponse retVal = ((Neplan_coordinacion.NeplanService.NeplanService)(this)).GetAllElementsWithOpenSwitch(inValue);
            elementIDs = retVal.elementIDs;
            return retVal.GetAllElementsWithOpenSwitchResult;
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchResponse> GetAllElementsWithOpenSwitchAsync(Neplan_coordinacion.NeplanService.GetAllElementsWithOpenSwitchRequest request) {
            return base.Channel.GetAllElementsWithOpenSwitchAsync(request);
        }
        
        public string GetResultSummary(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public System.Threading.Tasks.Task<string> GetResultSummaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public string[] GetListResultSummary(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetListResultSummary(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetListResultSummaryAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType, System.DateTime simulationDateTime, int networkTypeGroup, string networkTypeGroupID) {
            return base.Channel.GetListResultSummaryAsync(project, analysisType, simulationDateTime, networkTypeGroup, networkTypeGroupID);
        }
        
        public Neplan_coordinacion.NeplanService.NeplanServiceElementResult[] GetAllElementResults(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetAllElementResults(project, analysisType);
        }
        
        public System.Threading.Tasks.Task<Neplan_coordinacion.NeplanService.NeplanServiceElementResult[]> GetAllElementResultsAsync(Neplan_coordinacion.NeplanService.ExternalProject project, string analysisType) {
            return base.Channel.GetAllElementResultsAsync(project, analysisType);
        }
    }
}
